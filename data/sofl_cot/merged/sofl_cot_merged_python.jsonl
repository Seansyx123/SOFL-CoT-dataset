{"id": "HumanEval/0", "language": "Python", "requirement": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c4efe7`\n   b. Major behaviors: for idx, elem in enumerate(numbers):         for idx2, elem2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False"}
{"id": "HumanEval/1", "language": "Python", "requirement": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `66f035`\n   b. Major behaviors: result = []     current_string = []     current_depth = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result"}
{"id": "HumanEval/2", "language": "Python", "requirement": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8446a4`\n   b. Major behaviors: return number % 1.0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return number % 1.0"}
{"id": "HumanEval/3", "language": "Python", "requirement": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c90a27`\n   b. Major behaviors: balance = 0      for op in operations:         balance += op...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False"}
{"id": "HumanEval/4", "language": "Python", "requirement": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `67bf1c`\n   b. Major behaviors: mean = sum(numbers) / len(numbers)     return sum(abs(x - me...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"id": "HumanEval/5", "language": "Python", "requirement": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1cafea`\n   b. Major behaviors: if not numbers:         return []      result = []      for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result"}
{"id": "HumanEval/6", "language": "Python", "requirement": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `100a48`\n   b. Major behaviors: def parse_paren_group(s):         depth = 0         max_dept...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]"}
{"id": "HumanEval/7", "language": "Python", "requirement": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8efddc`\n   b. Major behaviors: return [x for x in strings if substring in x]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return [x for x in strings if substring in x]"}
{"id": "HumanEval/8", "language": "Python", "requirement": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3d1296`\n   b. Major behaviors: sum_value = 0     prod_value = 1      for n in numbers:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value"}
{"id": "HumanEval/9", "language": "Python", "requirement": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8df8b5`\n   b. Major behaviors: running_max = None     result = []      for n in numbers:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result"}
{"id": "HumanEval/10", "language": "Python", "requirement": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7a4bd5`\n   b. Major behaviors: if not string:         return ''      beginning_of_suffix =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]"}
{"id": "HumanEval/11", "language": "Python", "requirement": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `26c8e4`\n   b. Major behaviors: def xor(i, j):         if i == j:             return '0'...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))"}
{"id": "HumanEval/12", "language": "Python", "requirement": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5ed8dd`\n   b. Major behaviors: if not strings:         return None      maxlen = max(len(x)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s"}
{"id": "HumanEval/13", "language": "Python", "requirement": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `689373`\n   b. Major behaviors: while b:         a, b = b, a % b     return a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "while b:\n        a, b = b, a % b\n    return a"}
{"id": "HumanEval/14", "language": "Python", "requirement": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0f9127`\n   b. Major behaviors: result = []      for i in range(len(string)):         result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result"}
{"id": "HumanEval/15", "language": "Python", "requirement": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d48a10`\n   b. Major behaviors: return ' '.join([str(x) for x in range(n + 1)])...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return ' '.join([str(x) for x in range(n + 1)])"}
{"id": "HumanEval/16", "language": "Python", "requirement": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `14b967`\n   b. Major behaviors: return len(set(string.lower()))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return len(set(string.lower()))"}
{"id": "HumanEval/17", "language": "Python", "requirement": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2f5d00`\n   b. Major behaviors: note_map = {'o': 4, 'o|': 2, '.|': 1}     return [note_map[x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]"}
{"id": "HumanEval/18", "language": "Python", "requirement": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `94fe5d`\n   b. Major behaviors: times = 0      for i in range(len(string) - len(substring) +...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times"}
{"id": "HumanEval/19", "language": "Python", "requirement": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a3571b`\n   b. Major behaviors: value_map = {         'zero': 0,         'one': 1,         '...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))"}
{"id": "HumanEval/20", "language": "Python", "requirement": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `646cc7`\n   b. Major behaviors: closest_pair = None     distance = None      for idx, elem i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair"}
{"id": "HumanEval/21", "language": "Python", "requirement": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4e3737`\n   b. Major behaviors: min_number = min(numbers)     max_number = max(numbers)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]"}
{"id": "HumanEval/22", "language": "Python", "requirement": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `aef3fa`\n   b. Major behaviors: return [x for x in values if isinstance(x, int)]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return [x for x in values if isinstance(x, int)]"}
{"id": "HumanEval/23", "language": "Python", "requirement": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4c350e`\n   b. Major behaviors: return len(string)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return len(string)"}
{"id": "HumanEval/24", "language": "Python", "requirement": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b222ce`\n   b. Major behaviors: for i in reversed(range(n)):         if n % i == 0:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "for i in reversed(range(n)):\n        if n % i == 0:\n            return i"}
{"id": "HumanEval/25", "language": "Python", "requirement": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ba570f`\n   b. Major behaviors: import math     fact = []     i = 2     while i <= int(math....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact"}
{"id": "HumanEval/26", "language": "Python", "requirement": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3a84c8`\n   b. Major behaviors: import collections     c = collections.Counter(numbers)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]"}
{"id": "HumanEval/27", "language": "Python", "requirement": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e15eeb`\n   b. Major behaviors: return string.swapcase()...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return string.swapcase()"}
{"id": "HumanEval/28", "language": "Python", "requirement": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `33ea69`\n   b. Major behaviors: return ''.join(strings)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return ''.join(strings)"}
{"id": "HumanEval/29", "language": "Python", "requirement": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1ebded`\n   b. Major behaviors: return [x for x in strings if x.startswith(prefix)]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return [x for x in strings if x.startswith(prefix)]"}
{"id": "HumanEval/30", "language": "Python", "requirement": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b7c8e0`\n   b. Major behaviors: return [e for e in l if e > 0]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return [e for e in l if e > 0]"}
{"id": "HumanEval/31", "language": "Python", "requirement": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `459fca`\n   b. Major behaviors: if n < 2:         return False     for k in range(2, n - 1):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True"}
{"id": "HumanEval/32", "language": "Python", "requirement": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `59da0d`\n   b. Major behaviors: begin, end = -1., 1.     while poly(xs, begin) * poly(xs, en...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin"}
{"id": "HumanEval/33", "language": "Python", "requirement": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b14bfd`\n   b. Major behaviors: l = list(l)     l[::3] = sorted(l[::3])     return l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "l = list(l)\n    l[::3] = sorted(l[::3])\n    return l"}
{"id": "HumanEval/34", "language": "Python", "requirement": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a300de`\n   b. Major behaviors: return sorted(list(set(l)))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return sorted(list(set(l)))"}
{"id": "HumanEval/35", "language": "Python", "requirement": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b6c3df`\n   b. Major behaviors: m = l[0]     for e in l:         if e > m:             m = e...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m"}
{"id": "HumanEval/36", "language": "Python", "requirement": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4d5003`\n   b. Major behaviors: ns = []     for i in range(n):         if i % 11 == 0 or i %...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans"}
{"id": "HumanEval/37", "language": "Python", "requirement": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6713e0`\n   b. Major behaviors: evens = l[::2]     odds = l[1::2]     evens.sort()     ans =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans"}
{"id": "HumanEval/38", "language": "Python", "requirement": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7981dc`\n   b. Major behaviors: return encode_cyclic(encode_cyclic(s))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return encode_cyclic(encode_cyclic(s))"}
{"id": "HumanEval/39", "language": "Python", "requirement": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `91d8b0`\n   b. Major behaviors: import math      def is_prime(p):         if p < 2:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]"}
{"id": "HumanEval/40", "language": "Python", "requirement": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `db9983`\n   b. Major behaviors: for i in range(len(l)):         for j in range(i + 1, len(l)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"id": "HumanEval/41", "language": "Python", "requirement": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9303eb`\n   b. Major behaviors: return n**2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return n**2"}
{"id": "HumanEval/42", "language": "Python", "requirement": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9b63c3`\n   b. Major behaviors: return [(e + 1) for e in l]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return [(e + 1) for e in l]"}
{"id": "HumanEval/43", "language": "Python", "requirement": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9d2876`\n   b. Major behaviors: for i, l1 in enumerate(l):         for j in range(i + 1, len...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False"}
{"id": "HumanEval/44", "language": "Python", "requirement": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f40d31`\n   b. Major behaviors: ret = \"\"     while x > 0:         ret = str(x % base) + ret...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret"}
{"id": "HumanEval/45", "language": "Python", "requirement": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7deded`\n   b. Major behaviors: return a * h / 2.0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return a * h / 2.0"}
{"id": "HumanEval/46", "language": "Python", "requirement": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0f44df`\n   b. Major behaviors: results = [0, 0, 2, 0]     if n < 4:         return results[...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]"}
{"id": "HumanEval/47", "language": "Python", "requirement": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c4e6cc`\n   b. Major behaviors: l = sorted(l)     if len(l) % 2 == 1:         return l[len(l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0"}
{"id": "HumanEval/48", "language": "Python", "requirement": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8462d7`\n   b. Major behaviors: for i in range(len(text)):         if text[i] != text[len(te...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True"}
{"id": "HumanEval/49", "language": "Python", "requirement": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5eed9d`\n   b. Major behaviors: ret = 1     for i in range(n):         ret = (2 * ret) % p...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret"}
{"id": "HumanEval/50", "language": "Python", "requirement": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f5349c`\n   b. Major behaviors: return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"id": "HumanEval/51", "language": "Python", "requirement": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8e91dc`\n   b. Major behaviors: return \"\".join([s for s in text if s.lower() not in [\"a\", \"e...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])"}
{"id": "HumanEval/52", "language": "Python", "requirement": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `99ad1f`\n   b. Major behaviors: for e in l:         if e >= t:             return False...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "for e in l:\n        if e >= t:\n            return False\n    return True"}
{"id": "HumanEval/53", "language": "Python", "requirement": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0985a1`\n   b. Major behaviors: return x + y...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return x + y"}
{"id": "HumanEval/54", "language": "Python", "requirement": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `401e45`\n   b. Major behaviors: return set(s0) == set(s1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return set(s0) == set(s1)"}
{"id": "HumanEval/55", "language": "Python", "requirement": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e1b1d6`\n   b. Major behaviors: if n == 0:         return 0     if n == 1:         return 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"id": "HumanEval/56", "language": "Python", "requirement": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1a67b7`\n   b. Major behaviors: depth = 0     for b in brackets:         if b == \"<\":...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0"}
{"id": "HumanEval/57", "language": "Python", "requirement": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5c3e3e`\n   b. Major behaviors: if l == sorted(l) or l == sorted(l, reverse=True):         r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False"}
{"id": "HumanEval/58", "language": "Python", "requirement": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cde49d`\n   b. Major behaviors: ret = set()     for e1 in l1:         for e2 in l2:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))"}
{"id": "HumanEval/59", "language": "Python", "requirement": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb93bf`\n   b. Major behaviors: def is_prime(k):         if k < 2:             return False...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest"}
{"id": "HumanEval/60", "language": "Python", "requirement": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7dad2c`\n   b. Major behaviors: return sum(range(n + 1))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return sum(range(n + 1))"}
{"id": "HumanEval/61", "language": "Python", "requirement": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `399edf`\n   b. Major behaviors: depth = 0     for b in brackets:         if b == \"(\":...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0"}
{"id": "HumanEval/62", "language": "Python", "requirement": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dbaff3`\n   b. Major behaviors: return [(i * x) for i, x in enumerate(xs)][1:]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return [(i * x) for i, x in enumerate(xs)][1:]"}
{"id": "HumanEval/63", "language": "Python", "requirement": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `07eacb`\n   b. Major behaviors: if n == 0:         return 0     if n == 1:         return 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"}
{"id": "HumanEval/64", "language": "Python", "requirement": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5c4f52`\n   b. Major behaviors: vowels = \"aeiouAEIOU\"     n_vowels = sum(c in vowels for c i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels"}
{"id": "HumanEval/65", "language": "Python", "requirement": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c05d57`\n   b. Major behaviors: s = str(x)     if shift > len(s):         return s[::-1]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]"}
{"id": "HumanEval/66", "language": "Python", "requirement": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3517bf`\n   b. Major behaviors: if s == \"\": return 0     return sum(ord(char) if char.isuppe...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)"}
{"id": "HumanEval/67", "language": "Python", "requirement": "def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `94943b`\n   b. Major behaviors: lis = list()     for i in s.split(' '):         if i.isdigit...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)"}
{"id": "HumanEval/68", "language": "Python", "requirement": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `42b11d`\n   b. Major behaviors: if(len(arr) == 0): return []     evens = list(filter(lambda...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]"}
{"id": "HumanEval/69", "language": "Python", "requirement": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3776bf`\n   b. Major behaviors: frq = [0] * (max(lst) + 1)     for i in lst:         frq[i]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans"}
{"id": "HumanEval/70", "language": "Python", "requirement": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eca0dd`\n   b. Major behaviors: res, switch = [], True     while lst:         res.append(min...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res"}
{"id": "HumanEval/71", "language": "Python", "requirement": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c273c3`\n   b. Major behaviors: if a + b <= c or a + c <= b or b + c <= a:         return -1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area"}
{"id": "HumanEval/72", "language": "Python", "requirement": "def will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `483784`\n   b. Major behaviors: if sum(q) > w:         return False      i, j = 0, len(q)-1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True"}
{"id": "HumanEval/73", "language": "Python", "requirement": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d92147`\n   b. Major behaviors: ans = 0     for i in range(len(arr) // 2):         if arr[i]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans"}
{"id": "HumanEval/74", "language": "Python", "requirement": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `32c484`\n   b. Major behaviors: l1 = 0     for st in lst1:         l1 += len(st)          l2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2"}
{"id": "HumanEval/75", "language": "Python", "requirement": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6d4929`\n   b. Major behaviors: def is_prime(n):         for j in range(2,n):             if...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False"}
{"id": "HumanEval/76", "language": "Python", "requirement": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `97004b`\n   b. Major behaviors: if (n == 1):          return (x == 1)      power = 1     whi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x)"}
{"id": "HumanEval/77", "language": "Python", "requirement": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `842777`\n   b. Major behaviors: a = abs(a)     return int(round(a ** (1. / 3))) ** 3 == a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a"}
{"id": "HumanEval/78", "language": "Python", "requirement": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `316585`\n   b. Major behaviors: primes = ('2', '3', '5', '7', 'B', 'D')     total = 0     fo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total"}
{"id": "HumanEval/79", "language": "Python", "requirement": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cf43db`\n   b. Major behaviors: return \"db\" + bin(decimal)[2:] + \"db\"...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return \"db\" + bin(decimal)[2:] + \"db\""}
{"id": "HumanEval/80", "language": "Python", "requirement": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `698eb3`\n   b. Major behaviors: if len(s) < 3:       return False      for i in range(len(s)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True"}
{"id": "HumanEval/81", "language": "Python", "requirement": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `130502`\n   b. Major behaviors: letter_grade = []     for gpa in grades:         if gpa == 4...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade"}
{"id": "HumanEval/82", "language": "Python", "requirement": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `393470`\n   b. Major behaviors: l = len(string)     if l == 0 or l == 1:         return Fals...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True"}
{"id": "HumanEval/83", "language": "Python", "requirement": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f75ab5`\n   b. Major behaviors: if n == 1: return 1     return 18 * (10 ** (n - 2))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if n == 1: return 1\n    return 18 * (10 ** (n - 2))"}
{"id": "HumanEval/84", "language": "Python", "requirement": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `199175`\n   b. Major behaviors: return bin(sum(int(i) for i in str(N)))[2:]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return bin(sum(int(i) for i in str(N)))[2:]"}
{"id": "HumanEval/85", "language": "Python", "requirement": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2b8992`\n   b. Major behaviors: return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])"}
{"id": "HumanEval/86", "language": "Python", "requirement": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b5a872`\n   b. Major behaviors: return ' '.join([''.join(sorted(list(i))) for i in s.split('...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])"}
{"id": "HumanEval/87", "language": "Python", "requirement": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `26700b`\n   b. Major behaviors: coords = [(i, j) for i in range(len(lst)) for j in range(len...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])"}
{"id": "HumanEval/88", "language": "Python", "requirement": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7a843b`\n   b. Major behaviors: return [] if len(array) == 0 else sorted(array, reverse= (ar...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)"}
{"id": "HumanEval/89", "language": "Python", "requirement": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cfa881`\n   b. Major behaviors: d = 'abcdefghijklmnopqrstuvwxyz'     out = ''     for c in s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out"}
{"id": "HumanEval/90", "language": "Python", "requirement": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `368228`\n   b. Major behaviors: lst = sorted(set(lst))     return None if len(lst) < 2 else...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]"}
{"id": "HumanEval/91", "language": "Python", "requirement": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fef759`\n   b. Major behaviors: import re     sentences = re.split(r'[.?!]\\s*', S)     retur...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)"}
{"id": "HumanEval/92", "language": "Python", "requirement": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `874f04`\n   b. Major behaviors: if isinstance(x,int) and isinstance(y,int) and isinstance(z,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False"}
{"id": "HumanEval/93", "language": "Python", "requirement": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `64ade1`\n   b. Major behaviors: vowels = \"aeiouAEIOU\"     vowels_replace = dict([(i, chr(ord...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])"}
{"id": "HumanEval/94", "language": "Python", "requirement": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `409873`\n   b. Major behaviors: def isPrime(n):         for i in range(2,int(n**0.5)+1):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result"}
{"id": "HumanEval/95", "language": "Python", "requirement": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c88661`\n   b. Major behaviors: if len(dict.keys()) == 0:         return False     else:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\""}
{"id": "HumanEval/96", "language": "Python", "requirement": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2715ac`\n   b. Major behaviors: primes = []     for i in range(2, n):         is_prime = Tru...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes"}
{"id": "HumanEval/97", "language": "Python", "requirement": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9a0d2a`\n   b. Major behaviors: return abs(a % 10) * abs(b % 10)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return abs(a % 10) * abs(b % 10)"}
{"id": "HumanEval/98", "language": "Python", "requirement": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `82743e`\n   b. Major behaviors: count = 0     for i in range(0,len(s),2):         if s[i] in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count"}
{"id": "HumanEval/99", "language": "Python", "requirement": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `341700`\n   b. Major behaviors: from math import floor, ceil      if value.count('.') == 1:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res"}
{"id": "HumanEval/100", "language": "Python", "requirement": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2770fd`\n   b. Major behaviors: return [n + 2*i for i in range(n)]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return [n + 2*i for i in range(n)]"}
{"id": "HumanEval/101", "language": "Python", "requirement": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e9c6db`\n   b. Major behaviors: if not s:         return []      s_list = []      for letter...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()"}
{"id": "HumanEval/102", "language": "Python", "requirement": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b83b9e`\n   b. Major behaviors: if x > y:         return -1     if y % 2 == 0:         retur...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1"}
{"id": "HumanEval/103", "language": "Python", "requirement": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `040835`\n   b. Major behaviors: if m < n:         return -1     summation = 0     for i in r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))"}
{"id": "HumanEval/104", "language": "Python", "requirement": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6f69c5`\n   b. Major behaviors: odd_digit_elements = []     for i in x:         if all (int(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)"}
{"id": "HumanEval/105", "language": "Python", "requirement": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3f2004`\n   b. Major behaviors: dic = {         1: \"One\",         2: \"Two\",         3: \"Thre...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr"}
{"id": "HumanEval/106", "language": "Python", "requirement": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8504d9`\n   b. Major behaviors: ret = []     for i in range(1,n+1):         if i%2 == 0:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret"}
{"id": "HumanEval/107", "language": "Python", "requirement": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `90d8b3`\n   b. Major behaviors: def is_palindrome(n):         return str(n) == str(n)[::-1]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)"}
{"id": "HumanEval/108", "language": "Python", "requirement": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `434453`\n   b. Major behaviors: def digits_sum(n):         neg = 1         if n < 0: n, neg...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))"}
{"id": "HumanEval/109", "language": "Python", "requirement": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ccc61e`\n   b. Major behaviors: if len(arr)==0:       return True     sorted_array=sorted(ar...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True"}
{"id": "HumanEval/110", "language": "Python", "requirement": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `920e0d`\n   b. Major behaviors: odd = 0     even = 0     for i in lst1:         if i%2 == 1:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\""}
{"id": "HumanEval/111", "language": "Python", "requirement": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2d9a44`\n   b. Major behaviors: dict1={}     list1=test.split(\" \")     t=0      for i in lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1"}
{"id": "HumanEval/112", "language": "Python", "requirement": "def reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `34d8ca`\n   b. Major behaviors: s = ''.join([char for char in s if char not in c])     retur...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)"}
{"id": "HumanEval/113", "language": "Python", "requirement": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fd5c27`\n   b. Major behaviors: res = []     for arr in lst:         n = sum(int(d)%2==1 for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res"}
{"id": "HumanEval/114", "language": "Python", "requirement": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b9f965`\n   b. Major behaviors: max_sum = 0     s = 0     for num in nums:         s += -num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum"}
{"id": "HumanEval/115", "language": "Python", "requirement": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `730143`\n   b. Major behaviors: return sum([math.ceil(sum(arr)/capacity) for arr in grid])...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return sum([math.ceil(sum(arr)/capacity) for arr in grid])"}
{"id": "HumanEval/116", "language": "Python", "requirement": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `49f306`\n   b. Major behaviors: return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))"}
{"id": "HumanEval/117", "language": "Python", "requirement": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ddb030`\n   b. Major behaviors: result = []     for word in s.split():         n_consonants...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result"}
{"id": "HumanEval/118", "language": "Python", "requirement": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7e5462`\n   b. Major behaviors: if len(word) < 3:         return \"\"      vowels = {\"a\", \"e\",...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\""}
{"id": "HumanEval/119", "language": "Python", "requirement": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5a85c2`\n   b. Major behaviors: def check(s):         val = 0         for i in s:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'"}
{"id": "HumanEval/120", "language": "Python", "requirement": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4e5872`\n   b. Major behaviors: if k == 0:         return []     arr.sort()     ans = arr[-k...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans"}
{"id": "HumanEval/121", "language": "Python", "requirement": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0d91ba`\n   b. Major behaviors: return sum([x for idx, x in enumerate(lst) if idx%2==0 and x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])"}
{"id": "HumanEval/122", "language": "Python", "requirement": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d224f9`\n   b. Major behaviors: return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)"}
{"id": "HumanEval/123", "language": "Python", "requirement": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `18880f`\n   b. Major behaviors: if n%2==0:         odd_collatz = []      else:         odd_c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)"}
{"id": "HumanEval/124", "language": "Python", "requirement": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `58b1a6`\n   b. Major behaviors: try:         date = date.strip()         month, day, year =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True"}
{"id": "HumanEval/125", "language": "Python", "requirement": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3ea91d`\n   b. Major behaviors: if \" \" in txt:         return txt.split()     elif \",\" in tx...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])"}
{"id": "HumanEval/126", "language": "Python", "requirement": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8cf5fe`\n   b. Major behaviors: count_digit = dict([(i, 0) for i in lst])     for i in lst:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False"}
{"id": "HumanEval/127", "language": "Python", "requirement": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1bcbc4`\n   b. Major behaviors: def is_prime(num):         if num == 1 or num == 0:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\""}
{"id": "HumanEval/128", "language": "Python", "requirement": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2a9744`\n   b. Major behaviors: if not arr: return None     prod = 0 if 0 in arr else (-1) *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])"}
{"id": "HumanEval/129", "language": "Python", "requirement": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5beab7`\n   b. Major behaviors: n = len(grid)     val = n * n + 1     for i in range(n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans"}
{"id": "HumanEval/130", "language": "Python", "requirement": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f4fd17`\n   b. Major behaviors: if n == 0:         return [1]     my_tri = [1, 3]     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri"}
{"id": "HumanEval/131", "language": "Python", "requirement": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `782b63`\n   b. Major behaviors: product = 1     odd_count = 0     for digit in str(n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product"}
{"id": "HumanEval/132", "language": "Python", "requirement": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9394ea`\n   b. Major behaviors: opening_bracket_index = []     closing_bracket_index = []...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2"}
{"id": "HumanEval/133", "language": "Python", "requirement": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1249ab`\n   b. Major behaviors: import math     squared = 0     for i in lst:         square...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared"}
{"id": "HumanEval/134", "language": "Python", "requirement": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5bc8c1`\n   b. Major behaviors: check = txt.split(' ')[-1]     return True if len(check) ==...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False"}
{"id": "HumanEval/135", "language": "Python", "requirement": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `118323`\n   b. Major behaviors: ind=-1     i=1     while i<len(arr):       if arr[i]<arr[i-1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind"}
{"id": "HumanEval/136", "language": "Python", "requirement": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `aaec76`\n   b. Major behaviors: smallest = list(filter(lambda x: x < 0, lst))     largest =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)"}
{"id": "HumanEval/137", "language": "Python", "requirement": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `348845`\n   b. Major behaviors: temp_a, temp_b = a, b     if isinstance(temp_a, str): temp_a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b"}
{"id": "HumanEval/138", "language": "Python", "requirement": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc57b9`\n   b. Major behaviors: return n%2 == 0 and n >= 8...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return n%2 == 0 and n >= 8"}
{"id": "HumanEval/139", "language": "Python", "requirement": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c6c8a2`\n   b. Major behaviors: fact_i = 1     special_fact = 1     for i in range(1, n+1):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact"}
{"id": "HumanEval/140", "language": "Python", "requirement": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ba9712`\n   b. Major behaviors: new_text = \"\"     i = 0     start, end = 0, 0     while i <...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text"}
{"id": "HumanEval/141", "language": "Python", "requirement": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `764c92`\n   b. Major behaviors: suf = ['txt', 'exe', 'dll']     lst = file_name.split(sep='....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'"}
{"id": "HumanEval/142", "language": "Python", "requirement": "def sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a09315`\n   b. Major behaviors: result =[]     for i in range(len(lst)):         if i %3 ==...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)"}
{"id": "HumanEval/143", "language": "Python", "requirement": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `79af9b`\n   b. Major behaviors: new_lst = []     for word in sentence.split():         flg =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)"}
{"id": "HumanEval/144", "language": "Python", "requirement": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7ef1ce`\n   b. Major behaviors: a, b = x.split(\"/\")     c, d = n.split(\"/\")     numerator =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False"}
{"id": "HumanEval/145", "language": "Python", "requirement": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `35d0c2`\n   b. Major behaviors: def digits_sum(n):         neg = 1         if n < 0: n, neg...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)"}
{"id": "HumanEval/146", "language": "Python", "requirement": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `05a535`\n   b. Major behaviors: count = 0     for num in nums:         if num > 10:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count"}
{"id": "HumanEval/147", "language": "Python", "requirement": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `74053a`\n   b. Major behaviors: A = [i*i - i + 1 for i in range(1,n+1)]     ans = []     for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)"}
{"id": "HumanEval/148", "language": "Python", "requirement": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `941845`\n   b. Major behaviors: planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupite...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])"}
{"id": "HumanEval/149", "language": "Python", "requirement": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1d2ea9`\n   b. Major behaviors: lst.sort()     new_lst = []     for i in lst:         if len...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)"}
{"id": "HumanEval/150", "language": "Python", "requirement": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `213b69`\n   b. Major behaviors: if n == 1:         return y     for i in range(2, n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x"}
{"id": "HumanEval/151", "language": "Python", "requirement": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8636d6`\n   b. Major behaviors: return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" no...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])"}
{"id": "HumanEval/152", "language": "Python", "requirement": "def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5b0cff`\n   b. Major behaviors: return [abs(x-y) for x,y in zip(game,guess)]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return [abs(x-y) for x,y in zip(game,guess)]"}
{"id": "HumanEval/153", "language": "Python", "requirement": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b6aef6`\n   b. Major behaviors: strong = extensions[0]     my_val = len([x for x in extensio...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans"}
{"id": "HumanEval/154", "language": "Python", "requirement": "def cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ae14b5`\n   b. Major behaviors: l = len(b)     pat = b + b     for i in range(len(a) - l + 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False"}
{"id": "HumanEval/155", "language": "Python", "requirement": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fda894`\n   b. Major behaviors: even_count = 0     odd_count = 0     for i in str(abs(num)):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)"}
{"id": "HumanEval/156", "language": "Python", "requirement": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `08ba0e`\n   b. Major behaviors: num = [1, 4, 5, 9, 10, 40, 50, 90,              100, 400, 50...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()"}
{"id": "HumanEval/157", "language": "Python", "requirement": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `003681`\n   b. Major behaviors: return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a +...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b"}
{"id": "HumanEval/158", "language": "Python", "requirement": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `880c48`\n   b. Major behaviors: return sorted(words, key = lambda x: (-len(set(x)), x))[0]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "return sorted(words, key = lambda x: (-len(set(x)), x))[0]"}
{"id": "HumanEval/159", "language": "Python", "requirement": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `38088b`\n   b. Major behaviors: if(need <= remaining):         return [ number + need , rema...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]"}
{"id": "HumanEval/160", "language": "Python", "requirement": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9e3af4`\n   b. Major behaviors: expression = str(operand[0])     for oprt, oprn in zip(opera...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)"}
{"id": "HumanEval/161", "language": "Python", "requirement": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a3160d`\n   b. Major behaviors: flg = 0     idx = 0     new_str = list(s)     for i in s:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s"}
{"id": "HumanEval/162", "language": "Python", "requirement": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eafcaf`\n   b. Major behaviors: import hashlib     return hashlib.md5(text.encode('ascii'))....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None"}
{"id": "HumanEval/163", "language": "Python", "requirement": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ee2490`\n   b. Major behaviors: lower = max(2, min(a, b))     upper = min(8, max(a, b))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]"}
{"id": 1, "language": "Python", "requirement": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e24a7`\n   b. Major behaviors: R = 3\r C = 3\r def min_cost(cost, m, n): \r \ttc = [[0 for x in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"}
{"id": 2, "language": "Python", "requirement": "Write a function to find the similar elements from the given two tuple lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c697fd`\n   b. Major behaviors: def similar_elements(test_tup1, test_tup2):\r   res = tuple(s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res)"}
{"id": 3, "language": "Python", "requirement": "Write a python function to identify non-prime numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3f7541`\n   b. Major behaviors: import math\r def is_not_prime(n):\r     result = False\r     f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"}
{"id": 4, "language": "Python", "requirement": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e1aee3`\n   b. Major behaviors: import heapq as hq\r def heap_queue_largest(nums,n):\r   large...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"}
{"id": 5, "language": "Python", "requirement": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f2d140`\n   b. Major behaviors: def count_ways(n): \r \tA = [0] * (n + 1) \r \tB = [0] * (n + 1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n]"}
{"id": 6, "language": "Python", "requirement": "Write a python function to check whether the two numbers differ at one bit position only or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9155c3`\n   b. Major behaviors: def is_Power_Of_Two (x): \r     return x and (not(x & (x - 1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"}
{"id": 7, "language": "Python", "requirement": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `437705`\n   b. Major behaviors: import re\r def find_char_long(text):\r   return (re.findall(r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"}
{"id": 8, "language": "Python", "requirement": "Write a function to find squares of individual elements in a list using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e6f5bf`\n   b. Major behaviors: def square_nums(nums):\r  square_nums = list(map(lambda x: x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"}
{"id": 9, "language": "Python", "requirement": "Write a python function to find the minimum number of rotations required to get the same string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `25271f`\n   b. Major behaviors: def find_Rotations(str): \r     tmp = str + str\r     n = len(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n"}
{"id": 10, "language": "Python", "requirement": "Write a function to get the n smallest items from a dataset.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc098b`\n   b. Major behaviors: import heapq\r def small_nnum(list1,n):\r   smallest=heapq.nsm...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"}
{"id": 11, "language": "Python", "requirement": "Write a python function to remove first and last occurrence of a given character from the string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fdb11d`\n   b. Major behaviors: def remove_Occ(s,ch): \r     for i in range(len(s)):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s"}
{"id": 12, "language": "Python", "requirement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ca1a34`\n   b. Major behaviors: def sort_matrix(M):\r     result = sorted(M, key=sum)\r     re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"}
{"id": 13, "language": "Python", "requirement": "Write a function to count the most common words in a dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `76e058`\n   b. Major behaviors: from collections import Counter\r def count_common(words):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)"}
{"id": 14, "language": "Python", "requirement": "Write a python function to find the volume of a triangular prism.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `69ea5e`\n   b. Major behaviors: def find_Volume(l,b,h) : \r     return ((l * b * h) / 2)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2)"}
{"id": 15, "language": "Python", "requirement": "Write a function to split a string at lowercase letters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `86b844`\n   b. Major behaviors: import re\r def split_lowerstring(text):\r  return (re.findall...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"}
{"id": 16, "language": "Python", "requirement": "Write a function to find sequences of lowercase letters joined with an underscore.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c5f834`\n   b. Major behaviors: import re\r def text_lowercase_underscore(text):\r         pat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"id": 17, "language": "Python", "requirement": "Write a function to find the perimeter of a square.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e5808b`\n   b. Major behaviors: def square_perimeter(a):\r   perimeter=4*a\r   return perimete...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"}
{"id": 18, "language": "Python", "requirement": "Write a function to remove characters from the first string which are present in the second string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4cfbc6`\n   b. Major behaviors: NO_OF_CHARS = 256\r def str_to_list(string): \r \ttemp = []...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind])"}
{"id": 19, "language": "Python", "requirement": "Write a function to find whether a given array of integers contains any duplicate element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `83af68`\n   b. Major behaviors: def test_duplicate(arraynums):\r     nums_set = set(arraynums...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)"}
{"id": 20, "language": "Python", "requirement": "Write a function to check if the given number is woodball or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3882b4`\n   b. Major behaviors: def is_woodall(x): \r \tif (x % 2 == 0): \r \t\treturn False\r \tif...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"}
{"id": 21, "language": "Python", "requirement": "Write a function to find m number of multiples of n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4eec6c`\n   b. Major behaviors: def multiples_of_num(m,n): \r     multiples_of_num= list(rang...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"}
{"id": 22, "language": "Python", "requirement": "Write a function to find the first duplicate element in a given array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8b5a6c`\n   b. Major behaviors: def find_first_duplicate(nums):\r     num_set = set()\r     no...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"}
{"id": 23, "language": "Python", "requirement": "Write a python function to find the maximum sum of elements of list in a list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `473372`\n   b. Major behaviors: def maximum_Sum(list1): \r     maxi = -100000\r     for x in l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi"}
{"id": 24, "language": "Python", "requirement": "Write a function to convert the given binary number to its decimal equivalent.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a3ef79`\n   b. Major behaviors: def binary_to_decimal(binary): \r     binary1 = binary...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"}
{"id": 25, "language": "Python", "requirement": "Write a python function to find the product of non-repeated elements in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `11b486`\n   b. Major behaviors: def find_Product(arr,n): \r     arr.sort() \r     prod = 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod;"}
{"id": 26, "language": "Python", "requirement": "Write a function to check if the given tuple list has all k elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b48295`\n   b. Major behaviors: def check_k_elements(test_list, K):\r   res = True\r   for tup...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res)"}
{"id": 27, "language": "Python", "requirement": "Write a python function to remove all digits from a list of strings.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `458104`\n   b. Major behaviors: import re  \r def remove(list): \r     pattern = '[0-9]'...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"}
{"id": 28, "language": "Python", "requirement": "Write a python function to find binomial co-efficient.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ece8b2`\n   b. Major behaviors: def binomial_Coeff(n,k): \r     if k > n : \r        return 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"}
{"id": 29, "language": "Python", "requirement": "Write a python function to find the element occurring odd number of times.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f4cf57`\n   b. Major behaviors: def get_Odd_Occurrence(arr,arr_size):   \r     for i in range...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"}
{"id": 30, "language": "Python", "requirement": "Write a python function to count all the substrings starting and ending with same characters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fcb113`\n   b. Major behaviors: def check_Equality(s): \r     return (ord(s[0]) == ord(s[len(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result;"}
{"id": 31, "language": "Python", "requirement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `05b7b2`\n   b. Major behaviors: def func(nums, k):\r     import collections\r     d = collecti...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"}
{"id": 32, "language": "Python", "requirement": "Write a python function to find the largest prime factor of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a37a3d`\n   b. Major behaviors: import math \r def max_Prime_Factors (n): \r     maxPrime = -1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"}
{"id": 33, "language": "Python", "requirement": "Write a python function to convert a decimal number to binary number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1746bb`\n   b. Major behaviors: def decimal_To_Binary(N): \r     B_Number = 0\r     cnt = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number"}
{"id": 34, "language": "Python", "requirement": "Write a python function to find the missing number in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a16a4b`\n   b. Major behaviors: def find_missing(ar,N): \r     l = 0\r     r = N - 1\r     whil...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1)"}
{"id": 35, "language": "Python", "requirement": "Write a function to find the n-th rectangular number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c607a3`\n   b. Major behaviors: def find_rect_num(n):\r   return n*(n + 1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_rect_num(n):\r\n  return n*(n + 1)"}
{"id": 36, "language": "Python", "requirement": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc1f3c`\n   b. Major behaviors: def find_Nth_Digit(p,q,N) :  \r     while (N > 0) :...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;"}
{"id": 37, "language": "Python", "requirement": "Write a function to sort a given mixed list of integers and strings.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cbaaf1`\n   b. Major behaviors: def sort_mixed_list(mixed_list):\r     int_part = sorted([i f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"}
{"id": 38, "language": "Python", "requirement": "Write a function to find the division of first even and odd number of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `208e59`\n   b. Major behaviors: def div_even_odd(list1):\r     first_even = next((el for el i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"}
{"id": 39, "language": "Python", "requirement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `523e4e`\n   b. Major behaviors: import heapq\r from collections import Counter\r def rearange_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"}
{"id": 40, "language": "Python", "requirement": "Write a function to find frequency of the elements in a given list of lists using collections module.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `459bfc`\n   b. Major behaviors: from collections import Counter\r from itertools import chain...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"}
{"id": 41, "language": "Python", "requirement": "Write a function to filter even numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a4b2ab`\n   b. Major behaviors: def filter_evennumbers(nums):\r  even_nums = list(filter(lamb...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"}
{"id": 42, "language": "Python", "requirement": "Write a python function to find the sum of repeated elements in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5fc232`\n   b. Major behaviors: def find_Sum(arr,n): \r     return sum([x for x in arr if arr...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"}
{"id": 43, "language": "Python", "requirement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f70691`\n   b. Major behaviors: import re\r def text_match(text):\r   patterns = '^[a-z]+_[a-z...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}
{"id": 44, "language": "Python", "requirement": "Write a function that matches a word at the beginning of a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `63aa49`\n   b. Major behaviors: import re\r def text_match_string(text):\r         patterns =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"}
{"id": 45, "language": "Python", "requirement": "Write a function to find the gcd of the given array elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `51da70`\n   b. Major behaviors: def find_gcd(x, y): \r \twhile(y): \r \t\tx, y = y, x % y \r \tretu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"}
{"id": 46, "language": "Python", "requirement": "Write a python function to determine whether all the numbers are different from each other are not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `726d1e`\n   b. Major behaviors: def test_distinct(data):\r   if len(data) == len(set(data)):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"}
{"id": 47, "language": "Python", "requirement": "Write a python function to find the last digit when factorial of a divides factorial of b.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `499323`\n   b. Major behaviors: def compute_Last_Digit(A,B): \r     variable = 1\r     if (A =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"}
{"id": 48, "language": "Python", "requirement": "Write a python function to set all odd bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `79e334`\n   b. Major behaviors: def odd_bit_set_number(n):\r     count = 0;res = 0;temp = n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"}
{"id": 49, "language": "Python", "requirement": "Write a function to extract every first or specified element from a given two-dimensional list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `53cdbe`\n   b. Major behaviors: def specified_element(nums, N):\r     result = [i[N] for i in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"}
{"id": 50, "language": "Python", "requirement": "Write a function to find the list with minimum length using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `92c903`\n   b. Major behaviors: def min_length_list(input_list):\r     min_length = min(len(x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"}
{"id": 51, "language": "Python", "requirement": "Write a function to print check if the triangle is equilateral or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d6af92`\n   b. Major behaviors: def check_equilateral(x,y,z):\r   if x == y == z:\r \t   return...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"}
{"id": 52, "language": "Python", "requirement": "Write a function to caluclate area of a parallelogram.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0e618a`\n   b. Major behaviors: def parallelogram_area(b,h):\r   area=b*h\r   return area...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"}
{"id": 53, "language": "Python", "requirement": "Write a python function to check whether the first and last characters of a given string are equal or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2d3341`\n   b. Major behaviors: def check_Equality(str):\r   if (str[0] == str[-1]):  \r     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\")"}
{"id": 54, "language": "Python", "requirement": "Write a function to sort the given array by using counting sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a14478`\n   b. Major behaviors: def counting_sort(my_list):\r     max_value = 0\r     for i in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"}
{"id": 55, "language": "Python", "requirement": "Write a function to find t-nth term of geometric series.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `10dc20`\n   b. Major behaviors: import math\r def tn_gp(a,n,r):\r   tn = a * (math.pow(r, n -...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"}
{"id": 56, "language": "Python", "requirement": "Write a python function to check if a given number is one less than twice its reverse.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `585839`\n   b. Major behaviors: def rev(num):    \r     rev_num = 0\r     while (num > 0):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)"}
{"id": 57, "language": "Python", "requirement": "Write a python function to find the largest number that can be formed with the given digits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0447b9`\n   b. Major behaviors: def find_Max_Num(arr,n) : \r     arr.sort(reverse = True)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num"}
{"id": 58, "language": "Python", "requirement": "Write a python function to check whether the given two integers have opposite sign or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `848c1c`\n   b. Major behaviors: def opposite_Signs(x,y): \r     return ((x ^ y) < 0);...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0);"}
{"id": 59, "language": "Python", "requirement": "Write a function to find the nth octagonal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9469ad`\n   b. Major behaviors: def is_octagonal(n): \r \treturn 3 * n * n - 2 * n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n"}
{"id": 60, "language": "Python", "requirement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3d4952`\n   b. Major behaviors: def max_len_sub( arr, n): \r \tmls=[] \r \tmax = 0\r \tfor i in ra...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"}
{"id": 61, "language": "Python", "requirement": "Write a python function to count number of substrings with the sum of digits equal to their length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a50066`\n   b. Major behaviors: from collections import defaultdict\r def count_Substrings(s,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"}
{"id": 62, "language": "Python", "requirement": "Write a python function to find smallest number in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `946801`\n   b. Major behaviors: def smallest_num(xs):   return min(xs)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def smallest_num(xs):\n  return min(xs)"}
{"id": 63, "language": "Python", "requirement": "Write a function to find the maximum difference between available pairs in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1938c5`\n   b. Major behaviors: def max_difference(test_list):\r   temp = [abs(b - a) for a,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res)"}
{"id": 64, "language": "Python", "requirement": "Write a function to sort a list of tuples using lambda.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `afaea9`\n   b. Major behaviors: def subject_marks(subjectmarks):\r #subject_marks = [('Englis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"}
{"id": 65, "language": "Python", "requirement": "Write a function of recursion list sum.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9c055b`\n   b. Major behaviors: def recursive_list_sum(data_list):\r \ttotal = 0\r \tfor element...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"}
{"id": 66, "language": "Python", "requirement": "Write a python function to count positive numbers in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `59d957`\n   b. Major behaviors: def pos_count(list):\r   pos_count= 0\r   for num in list:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count"}
{"id": 67, "language": "Python", "requirement": "Write a function to find the number of ways to partition a set of bell numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `261164`\n   b. Major behaviors: def bell_number(n):   \r     bell = [[0 for i in range(n+1)]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0]"}
{"id": 68, "language": "Python", "requirement": "Write a python function to check whether the given array is monotonic or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `85eb0b`\n   b. Major behaviors: def is_Monotonic(A): \r     return (all(A[i] <= A[i + 1] for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))"}
{"id": 69, "language": "Python", "requirement": "Write a function to check whether a list contains the given sublist or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0aa5a0`\n   b. Major behaviors: def is_sublist(l, s):\r \tsub_set = False\r \tif s == []:\r \t\tsub...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"}
{"id": 70, "language": "Python", "requirement": "Write a function to find whether all the given tuples have equal length or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e2896b`\n   b. Major behaviors: def find_equal_tuple(Input, k):\r   flag = 1\r   for tuple in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"}
{"id": 71, "language": "Python", "requirement": "Write a function to sort a list of elements using comb sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6ca349`\n   b. Major behaviors: def comb_sort(nums):\r     shrink_fact = 1.3\r     gaps = len(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"}
{"id": 72, "language": "Python", "requirement": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1b54fa`\n   b. Major behaviors: def dif_Square(n): \r     if (n % 4 != 2): \r         return T...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"}
{"id": 73, "language": "Python", "requirement": "Write a function to split the given string with multiple delimiters by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7410a4`\n   b. Major behaviors: import re\r def multiple_split(text):\r   return (re.split(';...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"}
{"id": 74, "language": "Python", "requirement": "Write a function to check whether it follows the sequence given in the patterns array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `55ff07`\n   b. Major behaviors: def is_samepatterns(colors, patterns):    \r     if len(color...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"}
{"id": 75, "language": "Python", "requirement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c91538`\n   b. Major behaviors: def find_tuples(test_list, K):\r   res = [sub for sub in test...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res))"}
{"id": 76, "language": "Python", "requirement": "Write a python function to count the number of squares in a rectangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a1985d`\n   b. Major behaviors: def count_Squares(m,n):\r     if(n < m):\r         temp = m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"}
{"id": 77, "language": "Python", "requirement": "Write a python function to find the difference between sum of even and odd digits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3bf9e6`\n   b. Major behaviors: def is_Diff(n): \r     return (n % 11 == 0)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Diff(n): \r\n    return (n % 11 == 0)"}
{"id": 78, "language": "Python", "requirement": "Write a python function to find number of integers with odd number of set bits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `696073`\n   b. Major behaviors: def count_With_Odd_SetBits(n): \r     if (n % 2 != 0):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans"}
{"id": 79, "language": "Python", "requirement": "Write a python function to check whether the length of the word is odd or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `807aa0`\n   b. Major behaviors: def word_len(s): \r     s = s.split(' ')   \r     for word in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"}
{"id": 80, "language": "Python", "requirement": "Write a function to find the nth tetrahedral number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `421810`\n   b. Major behaviors: def tetrahedral_number(n): \r \treturn (n * (n + 1) * (n + 2))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"}
{"id": 81, "language": "Python", "requirement": "Write a function to zip the two given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e25ed7`\n   b. Major behaviors: def zip_tuples(test_tup1, test_tup2):\r   res = []\r   for i,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res)"}
{"id": 82, "language": "Python", "requirement": "Write a function to find the volume of a sphere.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cf2418`\n   b. Major behaviors: import math\r def volume_sphere(r):\r   volume=(4/3)*math.pi*r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"}
{"id": 83, "language": "Python", "requirement": "Write a python function to find the character made by adding all the characters of the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0c2e62`\n   b. Major behaviors: def get_Char(strr):  \r     summ = 0\r     for i in range(len(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"}
{"id": 84, "language": "Python", "requirement": "Write a function to find the n-th number in newman conway sequence.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4d7784`\n   b. Major behaviors: def sequence(n): \r \tif n == 1 or n == 2: \r \t\treturn 1\r \telse...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"}
{"id": 85, "language": "Python", "requirement": "Write a function to find the surface area of a sphere.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `52e0f8`\n   b. Major behaviors: import math\r def surfacearea_sphere(r):\r   surfacearea=4*mat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"}
{"id": 86, "language": "Python", "requirement": "Write a function to find nth centered hexagonal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6b1ffc`\n   b. Major behaviors: def centered_hexagonal_number(n):\r   return 3 * n * (n - 1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"}
{"id": 87, "language": "Python", "requirement": "Write a function to merge three dictionaries into a single expression.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cd28ec`\n   b. Major behaviors: import collections as ct\r def merge_dictionaries_three(dict1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"}
{"id": 88, "language": "Python", "requirement": "Write a function to get the frequency of the elements in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `917f9a`\n   b. Major behaviors: import collections\r def freq_count(list1):\r   freq_count= co...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"}
{"id": 89, "language": "Python", "requirement": "Write a function to find the closest smaller number than n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc84c9`\n   b. Major behaviors: def closest_num(N):\r   return (N - 1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def closest_num(N):\r\n  return (N - 1)"}
{"id": 90, "language": "Python", "requirement": "Write a python function to find the length of the longest word.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `744876`\n   b. Major behaviors: def len_log(list1):\r     max=len(list1[0])\r     for i in lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"}
{"id": 91, "language": "Python", "requirement": "Write a function to check if a substring is present in a given list of string values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c702dd`\n   b. Major behaviors: def find_substring(str1, sub_str):\r    if any(sub_str in s f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"}
{"id": 92, "language": "Python", "requirement": "Write a function to check whether the given number is undulating or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d18eaf`\n   b. Major behaviors: def is_undulating(n): \r \tif (len(n) <= 2): \r \t\treturn False...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"}
{"id": 93, "language": "Python", "requirement": "Write a function to calculate the value of 'a' to the power 'b'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `41d75b`\n   b. Major behaviors: def power(a,b):\r \tif b==0:\r \t\treturn 1\r \telif a==0:\r \t\tretur...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"}
{"id": 94, "language": "Python", "requirement": "Write a function to extract the index minimum value record from the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e18384`\n   b. Major behaviors: from operator import itemgetter \r def index_minimum(test_lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res)"}
{"id": 95, "language": "Python", "requirement": "Write a python function to find the minimum length of sublist.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `37c285`\n   b. Major behaviors: def Find_Min_Length(lst):  \r     minLength = min(len(x) for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength"}
{"id": 96, "language": "Python", "requirement": "Write a python function to find the number of divisors of a given integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1a398a`\n   b. Major behaviors: def divisor(n):\r   for i in range(n):\r     x = len([i for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"}
{"id": 97, "language": "Python", "requirement": "Write a function to find frequency count of list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c8326e`\n   b. Major behaviors: def frequency_lists(list1):\r     list1 = [item for sublist i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data"}
{"id": 98, "language": "Python", "requirement": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `67e141`\n   b. Major behaviors: def multiply_num(numbers):  \r     total = 1\r     for x in nu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers)"}
{"id": 99, "language": "Python", "requirement": "Write a function to convert the given decimal number to its binary equivalent.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `513991`\n   b. Major behaviors: def decimal_to_binary(n): \r     return bin(n).replace(\"0b\",\"...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\")"}
{"id": 100, "language": "Python", "requirement": "Write a function to find the next smallest palindrome of a specified number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `18d98b`\n   b. Major behaviors: import sys\r def next_smallest_palindrome(num):\r     numstr =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"}
{"id": 101, "language": "Python", "requirement": "Write a function to find the kth element in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `702b6d`\n   b. Major behaviors: def kth_element(arr, n, k):\r   for i in range(n):\r     for j...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"}
{"id": 102, "language": "Python", "requirement": "Write a function to convert snake case string to camel case string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `df5124`\n   b. Major behaviors: def snake_to_camel(word):\r         import re\r         return...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"id": 103, "language": "Python", "requirement": "Write a function to find eulerian number a(n, m).", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e60b4d`\n   b. Major behaviors: def eulerian_num(n, m): \r \tif (m >= n or n == 0): \r \t\treturn...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"}
{"id": 104, "language": "Python", "requirement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2e0226`\n   b. Major behaviors: def sort_sublists(input_list):\r     result = [sorted(x, key...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result"}
{"id": 105, "language": "Python", "requirement": "Write a python function to count true booleans in the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f58ea4`\n   b. Major behaviors: def count(lst):   \r     return sum(lst)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count(lst):   \r\n    return sum(lst)"}
{"id": 106, "language": "Python", "requirement": "Write a function to add the given list to the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `26ef4c`\n   b. Major behaviors: def add_lists(test_list, test_tup):\r   res = tuple(list(test...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res)"}
{"id": 107, "language": "Python", "requirement": "Write a python function to count hexadecimal numbers for a given range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `862589`\n   b. Major behaviors: def count_Hexadecimal(L,R) :  \r     count = 0;  \r     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;"}
{"id": 108, "language": "Python", "requirement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3dba86`\n   b. Major behaviors: import heapq\r def merge_sorted_list(num1,num2,num3):\r   num1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"}
{"id": 109, "language": "Python", "requirement": "Write a python function to find the count of rotations of a binary string with odd value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `949cd1`\n   b. Major behaviors: def odd_Equivalent(s,n): \r     count=0\r     for i in range(0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count"}
{"id": 110, "language": "Python", "requirement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ba1906`\n   b. Major behaviors: def extract_missing(test_list, strt_val, stop_val):\r   res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res)"}
{"id": 111, "language": "Python", "requirement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3b55da`\n   b. Major behaviors: def common_in_nested_lists(nestedlist):\r     result = list(s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"}
{"id": 112, "language": "Python", "requirement": "Write a python function to find the perimeter of a cylinder.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `01176a`\n   b. Major behaviors: def perimeter(diameter,height) : \r     return 2*(diameter+he...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)"}
{"id": 113, "language": "Python", "requirement": "Write a function to check if a string represents an integer or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7f43ee`\n   b. Major behaviors: def check_integer(text):\r  text = text.strip()\r  if len(text...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"}
{"id": 114, "language": "Python", "requirement": "Write a function to assign frequency to each tuple in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0b3af8`\n   b. Major behaviors: from collections import Counter \r def assign_freq(test_list)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res))"}
{"id": 115, "language": "Python", "requirement": "Write a function to check whether all dictionaries in a list are empty or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4997ef`\n   b. Major behaviors: def empty_dit(list1):\r  empty_dit=all(not d for d in list1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"}
{"id": 116, "language": "Python", "requirement": "Write a function to convert a given tuple of positive integers into an integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1339fe`\n   b. Major behaviors: def tuple_to_int(nums):\r     result = int(''.join(map(str,nu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"}
{"id": 117, "language": "Python", "requirement": "Write a function to convert all possible convertible elements in the list to float.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4d1bfd`\n   b. Major behaviors: def list_to_float(test_list):\r   res = []\r   for tup in test...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res))"}
{"id": 118, "language": "Python", "requirement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1298ad`\n   b. Major behaviors: def string_to_list(string): \r     lst = list(string.split(\"...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"}
{"id": 119, "language": "Python", "requirement": "Write a python function to find the element that appears only once in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `23434f`\n   b. Major behaviors: def search(arr,n) :\r     XOR = 0\r     for i in range(n) :...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"}
{"id": 120, "language": "Python", "requirement": "Write a function to find the maximum product from the pairs of tuples within a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dd6897`\n   b. Major behaviors: def max_product_tuple(list1):\r     result_max = max([abs(x *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"}
{"id": 121, "language": "Python", "requirement": "Write a function to find the triplet with sum of the given array", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `671970`\n   b. Major behaviors: def check_triplet(A, n, sum, count):\r     if count == 3 and...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"}
{"id": 122, "language": "Python", "requirement": "Write a function to find n\u2019th smart number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c6ee04`\n   b. Major behaviors: MAX = 3000 \r def smartNumber(n): \r \tprimes = [0] * MAX \r \tre...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1]"}
{"id": 123, "language": "Python", "requirement": "Write a function to sum all amicable numbers from 1 to a specified number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6ea7c2`\n   b. Major behaviors: def amicable_numbers_sum(limit):\r     if not isinstance(limi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"}
{"id": 124, "language": "Python", "requirement": "Write a function to get the angle of a complex number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7915bc`\n   b. Major behaviors: import cmath\r def angle_complex(a,b):\r   cn=complex(a,b)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"}
{"id": 125, "language": "Python", "requirement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8cf489`\n   b. Major behaviors: def find_length(string, n): \r \tcurrent_sum = 0\r \tmax_sum = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"}
{"id": 126, "language": "Python", "requirement": "Write a python function to find the sum of common divisors of two given numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `caed38`\n   b. Major behaviors: def sum(a,b): \r     sum = 0\r     for i in range (1,min(a,b))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"}
{"id": 127, "language": "Python", "requirement": "Write a function to multiply two integers without using the * operator in python.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e0ad4c`\n   b. Major behaviors: def multiply_int(x, y):\r     if y < 0:\r         return -mult...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"}
{"id": 128, "language": "Python", "requirement": "Write a function to shortlist words that are longer than n from a given list of words.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a496e5`\n   b. Major behaviors: def long_words(n, str):\r     word_len = []\r     txt = str.sp...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len"}
{"id": 129, "language": "Python", "requirement": "Write a function to calculate magic square.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `50e1df`\n   b. Major behaviors: def magic_square_test(my_matrix):\r     iSize = len(my_matrix...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"}
{"id": 130, "language": "Python", "requirement": "Write a function to find the item with maximum frequency in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `792d37`\n   b. Major behaviors: from collections import defaultdict\r def max_occurrences(num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"}
{"id": 131, "language": "Python", "requirement": "Write a python function to reverse only the vowels of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6f6118`\n   b. Major behaviors: def reverse_vowels(str1):\r \tvowels = \"\"\r \tfor char in str1:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"}
{"id": 132, "language": "Python", "requirement": "Write a function to convert tuple to a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `91d9e9`\n   b. Major behaviors: def tup_string(tup1):\r   str =  ''.join(tup1)\r   return str...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"}
{"id": 133, "language": "Python", "requirement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2aea6e`\n   b. Major behaviors: def sum_negativenum(nums):\r   sum_negativenum = list(filter(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"}
{"id": 134, "language": "Python", "requirement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2a717a`\n   b. Major behaviors: def check_last (arr,n,p): \r     _sum = 0\r     for i in range...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\""}
{"id": 135, "language": "Python", "requirement": "Write a function to find the nth hexagonal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e907ef`\n   b. Major behaviors: def hexagonal_num(n): \r \treturn n*(2*n - 1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1)"}
{"id": 136, "language": "Python", "requirement": "Write a function to calculate electricity bill.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fcbd4f`\n   b. Major behaviors: def cal_electbill(units):\r  if(units < 50):\r     amount = un...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"}
{"id": 137, "language": "Python", "requirement": "Write a function to find the ration of zeroes in an array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5f35ac`\n   b. Major behaviors: from array import array\r def zero_count(nums):\r     n = len(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"}
{"id": 138, "language": "Python", "requirement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `768634`\n   b. Major behaviors: def is_Sum_Of_Powers_Of_Two(n): \r     if (n % 2 == 1):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"}
{"id": 139, "language": "Python", "requirement": "Write a function to find the circumference of a circle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `72ec6b`\n   b. Major behaviors: def circle_circumference(r):\r   perimeter=2*3.1415*r\r   retu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"}
{"id": 140, "language": "Python", "requirement": "Write a function to extract elements that occur singly in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `145fc9`\n   b. Major behaviors: def extract_singly(test_list):\r   res = []\r   temp = set()...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res)"}
{"id": 141, "language": "Python", "requirement": "Write a function to sort a list of elements using pancake sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `02e6d7`\n   b. Major behaviors: def pancake_sort(nums):\r     arr_len = len(nums)\r     while...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"}
{"id": 142, "language": "Python", "requirement": "Write a function to count the same pair in three given lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d28b8e`\n   b. Major behaviors: def count_samepair(list1,list2,list3):\r     result = sum(m =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"}
{"id": 143, "language": "Python", "requirement": "Write a function to find number of lists present in the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bf1569`\n   b. Major behaviors: def find_lists(Input): \r \tif isinstance(Input, list): \r \t\tre...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input)"}
{"id": 144, "language": "Python", "requirement": "Write a python function to find the sum of absolute differences in all pairs of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b53ea1`\n   b. Major behaviors: def sum_Pairs(arr,n): \r     sum = 0\r     for i in range(n -...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"}
{"id": 145, "language": "Python", "requirement": "Write a python function to find the maximum difference between any two elements in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e40db8`\n   b. Major behaviors: def max_Abs_Diff(arr,n): \r     minEle = arr[0] \r     maxEle...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle)"}
{"id": 146, "language": "Python", "requirement": "Write a function to find the ascii value of total characters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `605c04`\n   b. Major behaviors: def ascii_value_string(str1):\r   for i in range(len(str1)):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"}
{"id": 147, "language": "Python", "requirement": "Write a function to find the maximum total path sum in the given triangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2ce214`\n   b. Major behaviors: def max_path_sum(tri, m, n): \r \tfor i in range(m-1, -1, -1):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"}
{"id": 148, "language": "Python", "requirement": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ea9d6b`\n   b. Major behaviors: def sum_digits_single(x) : \r     ans = 0\r     while x :...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A)"}
{"id": 149, "language": "Python", "requirement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3a84ce`\n   b. Major behaviors: def longest_subseq_with_diff_one(arr, n): \r \tdp = [1 for i i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"}
{"id": 150, "language": "Python", "requirement": "Write a python function to find whether the given number is present in the infinite sequence or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `18ac88`\n   b. Major behaviors: def does_Contain_B(a,b,c): \r     if (a == b): \r         retu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"}
{"id": 151, "language": "Python", "requirement": "Write a python function to check whether the given number is co-prime or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2d632a`\n   b. Major behaviors: def gcd(p,q):\r     while q != 0:\r         p, q = q,p%q...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"}
{"id": 152, "language": "Python", "requirement": "Write a function to sort the given array by using merge sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1cc09f`\n   b. Major behaviors: def merge(a,b):\r     c = []\r     while len(a) != 0 and len(b...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)"}
{"id": 153, "language": "Python", "requirement": "Write a function to find the vertex of a parabola.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a6a76c`\n   b. Major behaviors: def parabola_vertex(a, b, c): \r   vertex=(((-b / (2 * a)),((...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"}
{"id": 154, "language": "Python", "requirement": "Write a function to extract every specified element from a given two dimensional list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `53cdbe`\n   b. Major behaviors: def specified_element(nums, N):\r     result = [i[N] for i in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"}
{"id": 155, "language": "Python", "requirement": "Write a python function to toggle all even bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fe66ad`\n   b. Major behaviors: def even_bit_toggle_number(n) : \r     res = 0; count = 0; te...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res"}
{"id": 156, "language": "Python", "requirement": "Write a function to convert a tuple of string values to a tuple of integer values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4a87df`\n   b. Major behaviors: def tuple_int_str(tuple_str):\r     result = tuple((int(x[0])...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"}
{"id": 157, "language": "Python", "requirement": "Write a function to reflect the run-length encoding from a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a1bb49`\n   b. Major behaviors: from itertools import groupby\r def encode_list(list1):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"}
{"id": 158, "language": "Python", "requirement": "Write a python function to find k number of operations required to make all elements equal.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `46a233`\n   b. Major behaviors: def min_Ops(arr,n,k): \r     max1 = max(arr) \r     res = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res)"}
{"id": 159, "language": "Python", "requirement": "Write a function to print the season for the given month and day.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `61e3b7`\n   b. Major behaviors: def month_season(month,days):\r  if month in ('January', 'Feb...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"}
{"id": 160, "language": "Python", "requirement": "Write a function to find x and y that satisfies ax + by = n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6226e6`\n   b. Major behaviors: def solution (a, b, n): \r \ti = 0\r \twhile i * a <= n: \r \t\tif...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\")"}
{"id": 161, "language": "Python", "requirement": "Write a function to remove all elements from a given list present in another list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a0046d`\n   b. Major behaviors: def remove_elements(list1, list2):\r     result = [x for x in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"}
{"id": 162, "language": "Python", "requirement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7b15bc`\n   b. Major behaviors: def sum_series(n):\r   if n < 1:\r     return 0\r   else:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"}
{"id": 163, "language": "Python", "requirement": "Write a function to calculate the area of a regular polygon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a1762f`\n   b. Major behaviors: from math import tan, pi\r def area_polygon(s,l):\r   area = s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"}
{"id": 164, "language": "Python", "requirement": "Write a python function to check whether the sum of divisors are same or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c8878a`\n   b. Major behaviors: import math \r def divSum(n): \r     sum = 1; \r     i = 2;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2);"}
{"id": 165, "language": "Python", "requirement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `494dab`\n   b. Major behaviors: def count_char_position(str1): \r     count_chars = 0\r     fo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars"}
{"id": 166, "language": "Python", "requirement": "Write a python function to count the pairs with xor as an even number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2dbe25`\n   b. Major behaviors: def find_even_Pair(A,N): \r     evenPair = 0\r     for i in ra...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair;"}
{"id": 167, "language": "Python", "requirement": "Write a python function to find smallest power of 2 greater than or equal to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4bbacc`\n   b. Major behaviors: def next_Power_Of_2(n): \r     count = 0; \r     if (n and not...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count;"}
{"id": 168, "language": "Python", "requirement": "Write a python function to find the frequency of a number in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fa10ba`\n   b. Major behaviors: def frequency(a,x): \r     count = 0  \r     for i in a:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count"}
{"id": 169, "language": "Python", "requirement": "Write a function to calculate the nth pell number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ab34b7`\n   b. Major behaviors: def get_pell(n): \r \tif (n <= 2): \r \t\treturn n \r \ta = 1\r \tb =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b"}
{"id": 170, "language": "Python", "requirement": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b9f318`\n   b. Major behaviors: def sum_range_list(list1, m, n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range"}
{"id": 171, "language": "Python", "requirement": "Write a function to find the perimeter of a pentagon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `130f03`\n   b. Major behaviors: import math\r def perimeter_pentagon(a):\r   perimeter=(5*a)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"}
{"id": 172, "language": "Python", "requirement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4554b7`\n   b. Major behaviors: def count_occurance(s):\r   count=0\r   for i in range(len(s))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"}
{"id": 173, "language": "Python", "requirement": "Write a function to remove everything except alphanumeric characters from a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f82a8b`\n   b. Major behaviors: import re\r def remove_splchar(text): \r  pattern = re.compile...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"}
{"id": 174, "language": "Python", "requirement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `68e29e`\n   b. Major behaviors: def group_keyvalue(l):\r     result = {}\r     for k, v in l:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"}
{"id": 175, "language": "Python", "requirement": "Write a function to verify validity of a string of parentheses.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `32067f`\n   b. Major behaviors: def is_valid_parenthese( str1):\r         stack, pchar = [],...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"}
{"id": 176, "language": "Python", "requirement": "Write a function to find the perimeter of a triangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0f7af3`\n   b. Major behaviors: def perimeter_triangle(a,b,c):\r   perimeter=a+b+c\r   return...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"}
{"id": 177, "language": "Python", "requirement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8011a9`\n   b. Major behaviors: def answer(L,R): \r     if (2 * L <= R): \r         return (L...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1)"}
{"id": 178, "language": "Python", "requirement": "Write a function to search some literals strings in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b65593`\n   b. Major behaviors: import re\r def string_literals(patterns,text):\r   for patter...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"}
{"id": 179, "language": "Python", "requirement": "Write a function to find if the given number is a keith number or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `39c9f4`\n   b. Major behaviors: def is_num_keith(x): \r \tterms = [] \r \ttemp = x \r \tn = 0 \r \tw...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x)"}
{"id": 180, "language": "Python", "requirement": "Write a function to calculate distance between two points using latitude and longitude.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e15edb`\n   b. Major behaviors: from math import radians, sin, cos, acos\r def distance_lat_l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"}
{"id": 181, "language": "Python", "requirement": "Write a function to find the longest common prefix in the given set of strings.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f25647`\n   b. Major behaviors: def common_prefix_util(str1, str2): \r \tresult = \"\"; \r \tn1 =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix)"}
{"id": 182, "language": "Python", "requirement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `73f888`\n   b. Major behaviors: import re\r def find_character(string):\r   uppercase_characte...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"}
{"id": 183, "language": "Python", "requirement": "Write a function to count all the distinct pairs having a difference of k in any array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `87014c`\n   b. Major behaviors: def count_pairs(arr, n, k):\r   count=0;\r   for i in range(0,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"}
{"id": 184, "language": "Python", "requirement": "Write a function to find all the values in a list that are greater than a specified number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `196d9b`\n   b. Major behaviors: def greater_specificnum(list,num):\r  greater_specificnum=all...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"}
{"id": 185, "language": "Python", "requirement": "Write a function to find the focus of a parabola.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `00f943`\n   b. Major behaviors: def parabola_focus(a, b, c): \r   focus= (((-b / (2 * a)),(((...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"}
{"id": 186, "language": "Python", "requirement": "Write a function to search some literals strings in a string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `adaf2b`\n   b. Major behaviors: import re\r def check_literals(text, patterns):\r   for patter...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"}
{"id": 187, "language": "Python", "requirement": "Write a function to find the longest common subsequence for the given two sequences.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `03d0dc`\n   b. Major behaviors: def longest_common_subsequence(X, Y, m, n): \r     if m == 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"}
{"id": 188, "language": "Python", "requirement": "Write a python function to check whether the given number can be represented by product of two squares or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7486b8`\n   b. Major behaviors: def prod_Square(n):\r     for i in range(2,(n) + 1):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"}
{"id": 189, "language": "Python", "requirement": "Write a python function to find the first missing positive number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2a58ca`\n   b. Major behaviors: def first_Missing_Positive(arr,n): \r     ptr = 0\r     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"}
{"id": 190, "language": "Python", "requirement": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f8fe3d`\n   b. Major behaviors: def count_Intgral_Points(x1,y1,x2,y2): \r     return ((y2 - y...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1))"}
{"id": 191, "language": "Python", "requirement": "Write a function to check whether the given month name contains 30 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `87e858`\n   b. Major behaviors: def check_monthnumber(monthname3):\r   if monthname3 ==\"April...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"}
{"id": 192, "language": "Python", "requirement": "Write a python function to check whether a string has atleast one letter and one number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0eca38`\n   b. Major behaviors: def check_String(str): \r     flag_l = False\r     flag_n = Fa...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n"}
{"id": 193, "language": "Python", "requirement": "Write a function to remove the duplicates from the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `22c000`\n   b. Major behaviors: def remove_tuple(test_tup):\r   res = tuple(set(test_tup))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res)"}
{"id": 194, "language": "Python", "requirement": "Write a python function to convert octal number to decimal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `007982`\n   b. Major behaviors: def octal_To_Decimal(n):  \r     num = n; \r     dec_value = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value;"}
{"id": 195, "language": "Python", "requirement": "Write a python function to find the first position of an element in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `df9817`\n   b. Major behaviors: def first(arr,x,n): \r     low = 0\r     high = n - 1\r     res...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"}
{"id": 196, "language": "Python", "requirement": "Write a function to remove all the tuples with length k.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a3da15`\n   b. Major behaviors: def remove_tuples(test_list, K):\r   res = [ele for ele in te...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res)"}
{"id": 197, "language": "Python", "requirement": "Write a function to perform the exponentiation of the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1e7924`\n   b. Major behaviors: def find_exponentio(test_tup1, test_tup2):\r   res = tuple(el...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 198, "language": "Python", "requirement": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `decbda`\n   b. Major behaviors: import math\r def largest_triangle(a,b): \r     if (a < 0 or b...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area"}
{"id": 199, "language": "Python", "requirement": "Write a python function to find highest power of 2 less than or equal to given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c6d2af`\n   b. Major behaviors: def highest_Power_of_2(n): \r     res = 0; \r     for i in ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res;"}
{"id": 200, "language": "Python", "requirement": "Write a function to find all index positions of the maximum values in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `30dc45`\n   b. Major behaviors: def position_max(list1):\r     max_val = max(list1)\r     max_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"}
{"id": 201, "language": "Python", "requirement": "Write a python function to check whether the elements in a list are same or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb4ba3`\n   b. Major behaviors: def chkList(lst): \r     return len(set(lst)) == 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def chkList(lst): \r\n    return len(set(lst)) == 1"}
{"id": 202, "language": "Python", "requirement": "Write a function to remove even characters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `10ae0c`\n   b. Major behaviors: def remove_even(str1):\r  str2 = ''\r  for i in range(1, len(s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"}
{"id": 203, "language": "Python", "requirement": "Write a python function to find the hamming distance between given two integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `97ee60`\n   b. Major behaviors: def hamming_Distance(n1,n2) : \r     x = n1 ^ n2  \r     setBi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits"}
{"id": 204, "language": "Python", "requirement": "Write a python function to count the occurrence of a given character in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0a5c91`\n   b. Major behaviors: def count(s,c) : \r     res = 0 \r     for i in range(len(s))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res"}
{"id": 205, "language": "Python", "requirement": "Write a function to find the inversions of tuple elements in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `47d3c9`\n   b. Major behaviors: def inversion_elements(test_tup):\r   res = tuple(list(map(la...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res)"}
{"id": 206, "language": "Python", "requirement": "Write a function to perform the adjacent element concatenation in the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5830e9`\n   b. Major behaviors: def concatenate_elements(test_tup):\r   res = tuple(i + j for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res)"}
{"id": 207, "language": "Python", "requirement": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `274383`\n   b. Major behaviors: def find_longest_repeating_subseq(str): \r \tn = len(str) \r \td...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"}
{"id": 208, "language": "Python", "requirement": "Write a function to check the given decimal with a precision of 2 by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `95b439`\n   b. Major behaviors: import re\r def is_decimal(num):\r   num_fetch = re.compile(r\"...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"}
{"id": 209, "language": "Python", "requirement": "Write a function to delete the smallest element from the given heap and then insert a new item.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `689979`\n   b. Major behaviors: import heapq as hq\r def heap_replace(heap,a):\r   hq.heapify(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"}
{"id": 210, "language": "Python", "requirement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `55780b`\n   b. Major behaviors: import re\r def is_allowed_specific_char(string):\r     get_ch...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"}
{"id": 211, "language": "Python", "requirement": "Write a python function to count numbers whose oth and nth bits are set.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `57a94a`\n   b. Major behaviors: def count_Num(n): \r     if (n == 1): \r         return 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count"}
{"id": 212, "language": "Python", "requirement": "Write a python function to find the sum of fourth power of n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8b82e2`\n   b. Major behaviors: import math  \r def fourth_Power_Sum(n): \r     sum = 0\r     f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"}
{"id": 213, "language": "Python", "requirement": "Write a function to perform the concatenation of two string tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7e5e2d`\n   b. Major behaviors: def concatenate_strings(test_tup1, test_tup2):\r   res = tupl...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 214, "language": "Python", "requirement": "Write a function to convert radians to degrees.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e8b107`\n   b. Major behaviors: import math\r def degree_radian(radian):\r  degree = radian*(1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"}
{"id": 215, "language": "Python", "requirement": "Write a function to decode a run-length encoded given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fa880b`\n   b. Major behaviors: def decode_list(alist):\r     def aux(g):\r         if isinsta...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"}
{"id": 216, "language": "Python", "requirement": "Write a function to check if a nested list is a subset of another nested list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5f0fa7`\n   b. Major behaviors: def check_subset_list(list1, list2): \r     l1, l2 = list1[0]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist"}
{"id": 217, "language": "Python", "requirement": "Write a python function to find the first repeated character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c149d0`\n   b. Major behaviors: def first_Repeated_Char(str): \r     h = {}\r     for ch in st...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"}
{"id": 218, "language": "Python", "requirement": "Write a python function to find the minimum operations required to make two numbers equal.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `65536a`\n   b. Major behaviors: import math   \r def min_Operations(A,B):  \r     if (A > B):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"}
{"id": 219, "language": "Python", "requirement": "Write a function to extract maximum and minimum k elements in the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `28524d`\n   b. Major behaviors: def extract_min_max(test_tup, K):\r   res = []\r   test_tup =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res)"}
{"id": 220, "language": "Python", "requirement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3507b1`\n   b. Major behaviors: import re\r def replace_max_specialchar(text,n):\r  return (re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"}
{"id": 221, "language": "Python", "requirement": "Write a python function to find the first even number in a given list of numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `13fd28`\n   b. Major behaviors: def first_even(nums):\r     first_even = next((el for el in n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"}
{"id": 222, "language": "Python", "requirement": "Write a function to check if all the elements in tuple have same data type or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c6ebe6`\n   b. Major behaviors: def check_type(test_tuple):\r   res = True\r   for ele in test...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res)"}
{"id": 223, "language": "Python", "requirement": "Write a function to check for majority element in the given sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `efde05`\n   b. Major behaviors: def is_majority(arr, n, x):\r \ti = binary_search(arr, 0, n-1,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"}
{"id": 224, "language": "Python", "requirement": "Write a python function to count set bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d8aa2b`\n   b. Major behaviors: def count_Set_Bits(n): \r     count = 0\r     while (n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count"}
{"id": 225, "language": "Python", "requirement": "Write a python function to find the minimum element in a sorted and rotated array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7239f3`\n   b. Major behaviors: def find_Min(arr,low,high): \r     while (low < high):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high];"}
{"id": 226, "language": "Python", "requirement": "Write a python function to remove the characters which have odd index values of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `05cb99`\n   b. Major behaviors: def odd_values_string(str):\r   result = \"\" \r   for i in rang...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"}
{"id": 227, "language": "Python", "requirement": "Write a function to find minimum of three numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `013a46`\n   b. Major behaviors: def min_of_three(a,b,c): \r       if (a <= b) and (a <= c):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest"}
{"id": 228, "language": "Python", "requirement": "Write a python function to check whether all the bits are unset in the given range or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f6875d`\n   b. Major behaviors: def all_Bits_Set_In_The_Given_Range(n,l,r):  \r     num = (((...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"}
{"id": 229, "language": "Python", "requirement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4ab8b3`\n   b. Major behaviors: def re_arrange_array(arr, n):\r   j=0\r   for i in range(0, n)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"}
{"id": 230, "language": "Python", "requirement": "Write a function to replace blank spaces with any character in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fce7fa`\n   b. Major behaviors: def replace_blank(str1,char):\r  str2 = str1.replace(' ', cha...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"}
{"id": 231, "language": "Python", "requirement": "Write a function to find the maximum sum in the given right triangle of numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8c80dc`\n   b. Major behaviors: def max_sum(tri, n): \r \tif n > 1: \r \t\ttri[1][1] = tri[1][1]+...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"}
{"id": 232, "language": "Python", "requirement": "Write a function to get the n largest items from a dataset.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4b79c3`\n   b. Major behaviors: import heapq\r def larg_nnum(list1,n):\r  largest=heapq.nlarge...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"}
{"id": 233, "language": "Python", "requirement": "Write a function to find the lateral surface area of a cylinder.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ee7548`\n   b. Major behaviors: def lateralsuface_cylinder(r,h):\r   lateralsurface= 2*3.1415...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"}
{"id": 234, "language": "Python", "requirement": "Write a function to find the volume of a cube.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d5687e`\n   b. Major behaviors: def volume_cube(l):\r   volume = l * l * l\r   return volume...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"}
{"id": 235, "language": "Python", "requirement": "Write a python function to set all even bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `39db57`\n   b. Major behaviors: def even_bit_set_number(n): \r     count = 0;res = 0;temp = n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res)"}
{"id": 236, "language": "Python", "requirement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a891e0`\n   b. Major behaviors: def No_of_Triangle(N,K):\r     if (N < K):\r         return -1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"}
{"id": 237, "language": "Python", "requirement": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dc9d48`\n   b. Major behaviors: from collections import Counter \r def check_occurences(test_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res)"}
{"id": 238, "language": "Python", "requirement": "Write a python function to count number of non-empty substrings of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `97c3b1`\n   b. Major behaviors: def number_of_substrings(str): \r \tstr_len = len(str); \r \tret...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2);"}
{"id": 239, "language": "Python", "requirement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1a51ee`\n   b. Major behaviors: def get_total_number_of_sequences(m,n): \r \tT=[[0 for i in ra...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"}
{"id": 240, "language": "Python", "requirement": "Write a function to replace the last element of the list with another list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e8621c`\n   b. Major behaviors: def replace_list(list1,list2):\r  list1[-1:] = list2\r  replac...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list"}
{"id": 241, "language": "Python", "requirement": "Write a function to generate a 3d array having each element as '*'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `055faa`\n   b. Major behaviors: def array_3d(m,n,o):\r  array_3d = [[ ['*' for col in range(m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"}
{"id": 242, "language": "Python", "requirement": "Write a function to count total characters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4bf023`\n   b. Major behaviors: def count_charac(str1):\r  total = 0\r  for i in str1:\r     to...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"}
{"id": 243, "language": "Python", "requirement": "Write a function to sort the given list based on the occurrence of first element of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c40aff`\n   b. Major behaviors: def sort_on_occurence(lst): \r \tdct = {} \r \tfor i, j in lst:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()])"}
{"id": 244, "language": "Python", "requirement": "Write a python function to find the next perfect square greater than a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `33c466`\n   b. Major behaviors: import math  \r def next_Perfect_Square(N): \r     nextN = mat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN"}
{"id": 245, "language": "Python", "requirement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ca4433`\n   b. Major behaviors: def max_sum(arr, n): \r \tMSIBS = arr[:] \r \tfor i in range(n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"}
{"id": 246, "language": "Python", "requirement": "Write a function for computing square roots using the babylonian method.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1fa633`\n   b. Major behaviors: def babylonian_squareroot(number):\r     if(number == 0):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"}
{"id": 247, "language": "Python", "requirement": "Write a function to find the longest palindromic subsequence in the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a28c47`\n   b. Major behaviors: def lps(str): \r \tn = len(str) \r \tL = [[0 for x in range(n)]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"}
{"id": 248, "language": "Python", "requirement": "Write a function to calculate the harmonic sum of n-1.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5c7331`\n   b. Major behaviors: def harmonic_sum(n):\r   if n < 2:\r     return 1\r   else:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"}
{"id": 249, "language": "Python", "requirement": "Write a function to find the intersection of two arrays using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cf90bc`\n   b. Major behaviors: def intersection_array(array_nums1,array_nums2):\r  result =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"}
{"id": 250, "language": "Python", "requirement": "Write a python function to count the occcurences of an element in a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fe5eb7`\n   b. Major behaviors: def count_X(tup, x): \r     count = 0\r     for ele in tup:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count"}
{"id": 251, "language": "Python", "requirement": "Write a function to insert an element before each element of a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1209fd`\n   b. Major behaviors: def insert_element(list,element):\r  list = [v for elt in lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"}
{"id": 252, "language": "Python", "requirement": "Write a python function to convert complex numbers to polar coordinates.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b63a32`\n   b. Major behaviors: import cmath  \r def convert(numbers):    \r   num = cmath.pol...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num)"}
{"id": 253, "language": "Python", "requirement": "Write a python function to count integers from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1bfdf1`\n   b. Major behaviors: def count_integer(list1):\r     ctr = 0\r     for i in list1:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"}
{"id": 254, "language": "Python", "requirement": "Write a function to find all words starting with 'a' or 'e' in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dfdac4`\n   b. Major behaviors: import re\r def words_ae(text):\r  list = re.findall(\"[ae]\\w+\"...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"}
{"id": 255, "language": "Python", "requirement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `216761`\n   b. Major behaviors: from itertools import combinations_with_replacement \r def co...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))"}
{"id": 256, "language": "Python", "requirement": "Write a python function to count the number of prime numbers less than a given non-negative number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9678a6`\n   b. Major behaviors: def count_Primes_nums(n):\r     ctr = 0\r     for num in range...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"}
{"id": 257, "language": "Python", "requirement": "Write a function to swap two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `39d02e`\n   b. Major behaviors: def swap_numbers(a,b):\r  temp = a\r  a = b\r  b = temp\r  retur...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"}
{"id": 258, "language": "Python", "requirement": "Write a function to find number of odd elements in the given list using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `af8e5f`\n   b. Major behaviors: def count_odd(array_nums):\r    count_odd = len(list(filter(l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"}
{"id": 259, "language": "Python", "requirement": "Write a function to maximize the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `761014`\n   b. Major behaviors: def maximize_elements(test_tup1, test_tup2):\r   res = tuple(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 260, "language": "Python", "requirement": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f5f167`\n   b. Major behaviors: def newman_prime(n): \r \tif n == 0 or n == 1: \r \t\treturn 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"}
{"id": 261, "language": "Python", "requirement": "Write a function to perform mathematical division operation across the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `12ce79`\n   b. Major behaviors: def division_elements(test_tup1, test_tup2):\r   res = tuple(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 262, "language": "Python", "requirement": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f5d50d`\n   b. Major behaviors: def split_two_parts(list1, L):\r     return list1[:L], list1[...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"}
{"id": 263, "language": "Python", "requirement": "Write a function to merge two dictionaries.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `28a06b`\n   b. Major behaviors: def merge_dict(d1,d2):\r  d = d1.copy()\r  d.update(d2)\r  retu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"}
{"id": 264, "language": "Python", "requirement": "Write a function to calculate a dog's age in dog's years.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `77790a`\n   b. Major behaviors: def dog_age(h_age):\r  if h_age < 0:\r  \texit()\r  elif h_age <...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"}
{"id": 265, "language": "Python", "requirement": "Write a function to split a list for every nth element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7d13bb`\n   b. Major behaviors: def list_split(S, step):\r     return [S[i::step] for i in ra...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"}
{"id": 266, "language": "Python", "requirement": "Write a function to find the lateral surface area of a cube.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e1f995`\n   b. Major behaviors: def lateralsurface_cube(l):\r   LSA = 4 * (l * l)\r   return L...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"}
{"id": 267, "language": "Python", "requirement": "Write a python function to find the sum of squares of first n odd natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3802f0`\n   b. Major behaviors: def square_Sum(n):  \r     return int(n*(4*n*n-1)/3)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3)"}
{"id": 268, "language": "Python", "requirement": "Write a function to find the n'th star number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `70ea5a`\n   b. Major behaviors: def find_star_num(n): \r \treturn (6 * n * (n - 1) + 1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1)"}
{"id": 269, "language": "Python", "requirement": "Write a function to find the ascii value of a character.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6f0e73`\n   b. Major behaviors: def ascii_value(k):\r   ch=k\r   return ord(ch)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"}
{"id": 270, "language": "Python", "requirement": "Write a python function to find the sum of even numbers at even positions.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `574473`\n   b. Major behaviors: def sum_even_and_even_index(arr,n):  \r     i = 0\r     sum =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"}
{"id": 271, "language": "Python", "requirement": "Write a python function to find the sum of fifth power of first n even natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9b436d`\n   b. Major behaviors: def even_Power_Sum(n): \r     sum = 0; \r     for i in range(1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum;"}
{"id": 272, "language": "Python", "requirement": "Write a function to perfom the rear element extraction from list of tuples records.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `961e64`\n   b. Major behaviors: def rear_extract(test_list):\r   res = [lis[-1] for lis in te...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res)"}
{"id": 273, "language": "Python", "requirement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f23eaa`\n   b. Major behaviors: def substract_elements(test_tup1, test_tup2):\r   res = tuple...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res)"}
{"id": 274, "language": "Python", "requirement": "Write a python function to find sum of even index binomial coefficients.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4fd329`\n   b. Major behaviors: import math  \r def even_binomial_Coeff_Sum( n): \r     return...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1))"}
{"id": 275, "language": "Python", "requirement": "Write a python function to find the position of the last removed element from the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `23ef16`\n   b. Major behaviors: import math as mt \r def get_Position(a,n,m): \r     for i in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"}
{"id": 276, "language": "Python", "requirement": "Write a function to find the volume of a cylinder.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `521913`\n   b. Major behaviors: def volume_cylinder(r,h):\r   volume=3.1415*r*r*h\r   return v...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"}
{"id": 277, "language": "Python", "requirement": "Write a function to filter a dictionary based on values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7e8d86`\n   b. Major behaviors: def dict_filter(dict,n):\r  result = {key:value for (key, val...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"}
{"id": 278, "language": "Python", "requirement": "Write a function to find the element count that occurs before the record in the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1d6659`\n   b. Major behaviors: def count_first_elements(test_tup):\r   for count, ele in enu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count)"}
{"id": 279, "language": "Python", "requirement": "Write a function to find the nth decagonal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4e02e5`\n   b. Major behaviors: def is_num_decagonal(n): \r \treturn 4 * n * n - 3 * n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n"}
{"id": 280, "language": "Python", "requirement": "Write a function to search an element in the given array by using sequential search.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1be7b8`\n   b. Major behaviors: def sequential_search(dlist, item):\r     pos = 0\r     found...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"}
{"id": 281, "language": "Python", "requirement": "Write a python function to check if the elements of a given list are unique or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ba7f73`\n   b. Major behaviors: def all_unique(test_list):\r     if len(test_list) > len(set(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"}
{"id": 282, "language": "Python", "requirement": "Write a function to substaract two lists using map and lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ebf4df`\n   b. Major behaviors: def sub_list(nums1,nums2):\r   result = map(lambda x, y: x -...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"}
{"id": 283, "language": "Python", "requirement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e0e2cc`\n   b. Major behaviors: def validate(n): \r     for i in range(10): \r         temp =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"}
{"id": 284, "language": "Python", "requirement": "Write a function to check whether all items of a list are equal to a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `872384`\n   b. Major behaviors: def check_element(list,element):\r   check_element=all(v== el...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"}
{"id": 285, "language": "Python", "requirement": "Write a function that matches a string that has an a followed by two to three 'b'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4c2c88`\n   b. Major behaviors: import re\r def text_match_two_three(text):\r         patterns...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"id": 286, "language": "Python", "requirement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0502dc`\n   b. Major behaviors: def max_sub_array_sum_repeated(a, n, k): \r \tmax_so_far = -21...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"}
{"id": 287, "language": "Python", "requirement": "Write a python function to find the sum of squares of first n even natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d58ad3`\n   b. Major behaviors: def square_Sum(n):  \r     return int(2*n*(n+1)*(2*n+1)/3)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"}
{"id": 288, "language": "Python", "requirement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `48b857`\n   b. Major behaviors: def modular_inverse(arr, N, P):\r \tcurrent_element = 0\r \tfor...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"}
{"id": 289, "language": "Python", "requirement": "Write a python function to calculate the number of odd days in a given year.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d1c257`\n   b. Major behaviors: def odd_Days(N): \r     hund1 = N // 100\r     hund4 = N // 40...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd"}
{"id": 290, "language": "Python", "requirement": "Write a function to find the list of lists with maximum length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c95959`\n   b. Major behaviors: def max_length(list1):\r     max_length = max(len(x) for x in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"}
{"id": 291, "language": "Python", "requirement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1fdbf4`\n   b. Major behaviors: def count_no_of_ways(n, k): \r \tdp = [0] * (n + 1) \r \ttotal =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"}
{"id": 292, "language": "Python", "requirement": "Write a python function to find quotient of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `897fe1`\n   b. Major behaviors: def find(n,m):  \r     q = n//m \r     return (q)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"}
{"id": 293, "language": "Python", "requirement": "Write a function to find the third side of a right angled triangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3b146c`\n   b. Major behaviors: import math\r def otherside_rightangle(w,h):\r   s=math.sqrt((...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"}
{"id": 294, "language": "Python", "requirement": "Write a function to find the maximum value in a given heterogeneous list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3efb0d`\n   b. Major behaviors: def max_val(listval):\r      max_val = max(i for i in listval...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"}
{"id": 295, "language": "Python", "requirement": "Write a function to return the sum of all divisors of a number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `885ae0`\n   b. Major behaviors: def sum_div(number):\r     divisors = [1]\r     for i in range...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"}
{"id": 296, "language": "Python", "requirement": "Write a python function to count inversions in an array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `71166f`\n   b. Major behaviors: def get_Inv_Count(arr,n): \r     inv_count = 0\r     for i in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count"}
{"id": 297, "language": "Python", "requirement": "Write a function to flatten a given nested list structure.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c9671f`\n   b. Major behaviors: def flatten_list(list1):\r     result_list = []\r     if not l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list"}
{"id": 298, "language": "Python", "requirement": "Write a function to find the nested list elements which are present in another list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7c539d`\n   b. Major behaviors: def intersection_nested_lists(l1, l2):\r     result = [[n for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"}
{"id": 299, "language": "Python", "requirement": "Write a function to calculate the maximum aggregate from the list of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5ec7b8`\n   b. Major behaviors: from collections import defaultdict\r def max_aggregate(stdat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"}
{"id": 300, "language": "Python", "requirement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a23141`\n   b. Major behaviors: def count_binary_seq(n): \r \tnCr = 1\r \tres = 1\r \tfor r in ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res"}
{"id": 301, "language": "Python", "requirement": "Write a function to find the depth of a dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4bb46e`\n   b. Major behaviors: def dict_depth(d):\r     if isinstance(d, dict):\r         ret...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"}
{"id": 302, "language": "Python", "requirement": "Write a python function to find the most significant bit number which is also a set bit.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0a9ab0`\n   b. Major behaviors: def set_Bit_Number(n): \r     if (n == 0): \r         return 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"}
{"id": 303, "language": "Python", "requirement": "Write a python function to check whether the count of inversion of two types are same or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `29dc7d`\n   b. Major behaviors: import sys \r def solve(a,n):   \r     mx = -sys.maxsize - 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"}
{"id": 304, "language": "Python", "requirement": "Write a python function to find element at a given index after number of rotations.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8894f3`\n   b. Major behaviors: def find_Element(arr,ranges,rotations,index) :  \r     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index]"}
{"id": 305, "language": "Python", "requirement": "Write a function to match two words from a list of words starting with letter 'p'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0f0a35`\n   b. Major behaviors: import re\r def start_withp(words):\r  for w in words:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"}
{"id": 306, "language": "Python", "requirement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c37217`\n   b. Major behaviors: def max_sum_increasing_subseq(a, n, index, k):\r \tdp = [[0 fo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"}
{"id": 307, "language": "Python", "requirement": "Write a function to get a colon of a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `305de0`\n   b. Major behaviors: from copy import deepcopy\r def colon_tuplex(tuplex,m,n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"}
{"id": 308, "language": "Python", "requirement": "Write a function to find the specified number of largest products from two given lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb0125`\n   b. Major behaviors: def large_product(nums1, nums2, N):\r     result = sorted([x*...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"}
{"id": 309, "language": "Python", "requirement": "Write a python function to find the maximum of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `05e5eb`\n   b. Major behaviors: def maximum(a,b):   \r     if a >= b: \r         return a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b"}
{"id": 310, "language": "Python", "requirement": "Write a function to convert a given string to a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `64f9bb`\n   b. Major behaviors: def string_to_tuple(str1):\r     result = tuple(x for x in st...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"}
{"id": 311, "language": "Python", "requirement": "Write a python function to set the left most unset bit.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `92c8fb`\n   b. Major behaviors: def set_left_most_unset_bit(n): \r     if not (n & (n + 1)):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos)))"}
{"id": 312, "language": "Python", "requirement": "Write a function to find the volume of a cone.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a10a5d`\n   b. Major behaviors: import math\r def volume_cone(r,h):\r   volume = (1.0/3) * mat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"}
{"id": 313, "language": "Python", "requirement": "Write a python function to print positive numbers in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f4215c`\n   b. Major behaviors: def pos_nos(list1):\r   for num in list1: \r     if num >= 0:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num"}
{"id": 314, "language": "Python", "requirement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0ce12b`\n   b. Major behaviors: def max_sum_rectangular_grid(grid, n) : \r \tincl = max(grid[0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"}
{"id": 315, "language": "Python", "requirement": "Write a python function to find the first maximum length of even word.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cecd14`\n   b. Major behaviors: def find_Max_Len_Even(str): \r     n = len(str) \r     i = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen]"}
{"id": 316, "language": "Python", "requirement": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `725d0e`\n   b. Major behaviors: def find_last_occurrence(A, x):\r     (left, right) = (0, len...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"}
{"id": 317, "language": "Python", "requirement": "Write a function to reflect the modified run-length encoding from a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d25ff6`\n   b. Major behaviors: from itertools import groupby\r def modified_encode(alist):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"}
{"id": 318, "language": "Python", "requirement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4f934c`\n   b. Major behaviors: def max_volume (s): \r     maxvalue = 0\r     i = 1\r     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue"}
{"id": 319, "language": "Python", "requirement": "Write a function to find all five characters long word in the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6bb70e`\n   b. Major behaviors: import re\r def find_long_word(text):\r   return (re.findall(r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"}
{"id": 320, "language": "Python", "requirement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4823f9`\n   b. Major behaviors: def sum_difference(n):\r     sumofsquares = 0\r     squareofsu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"}
{"id": 321, "language": "Python", "requirement": "Write a function to find the demlo number for the given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e26d3`\n   b. Major behaviors: def find_demlo(s): \r \tl = len(s) \r \tres = \"\" \r \tfor i in ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res"}
{"id": 322, "language": "Python", "requirement": "Write a function to find all index positions of the minimum values in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `19910b`\n   b. Major behaviors: def position_min(list1):\r     min_val = min(list1)\r     min_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"}
{"id": 323, "language": "Python", "requirement": "Write a function to re-arrange the given array in alternating positive and negative items.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3f9a5b`\n   b. Major behaviors: def right_rotate(arr, n, out_of_place, cur):\r \ttemp = arr[cu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"}
{"id": 324, "language": "Python", "requirement": "Write a function to extract the sum of alternate chains of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c169db`\n   b. Major behaviors: def sum_of_alternates(test_tuple):\r   sum1 = 0\r   sum2 = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2))"}
{"id": 325, "language": "Python", "requirement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ecafad`\n   b. Major behaviors: def get_Min_Squares(n):\r     if n <= 3:\r         return n;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"}
{"id": 326, "language": "Python", "requirement": "Write a function to get the word with most number of occurrences in the given strings list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `662e95`\n   b. Major behaviors: from collections import defaultdict \r \r def most_occurrences...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res))"}
{"id": 327, "language": "Python", "requirement": "Write a function to print check if the triangle is isosceles or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ea069d`\n   b. Major behaviors: def check_isosceles(x,y,z):\r   if x==y or y==z or z==x:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"}
{"id": 328, "language": "Python", "requirement": "Write a function to rotate a given list by specified number of items to the left direction.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9befbb`\n   b. Major behaviors: def rotate_left(list1,m,n):\r   result =  list1[m:]+list1[:n]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"}
{"id": 329, "language": "Python", "requirement": "Write a python function to count negative numbers in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4ac90e`\n   b. Major behaviors: def neg_count(list):\r   neg_count= 0\r   for num in list:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count"}
{"id": 330, "language": "Python", "requirement": "Write a function to find all three, four, five characters long words in the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8f958b`\n   b. Major behaviors: import re\r def find_char(text):\r   return (re.findall(r\"\\b\\w...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"}
{"id": 331, "language": "Python", "requirement": "Write a python function to count unset bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `81df62`\n   b. Major behaviors: def count_unset_bits(n): \r     count = 0\r     x = 1\r     whi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count"}
{"id": 332, "language": "Python", "requirement": "Write a function to count character frequency of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6b63a8`\n   b. Major behaviors: def char_frequency(str1):\r     dict = {}\r     for n in str1:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"}
{"id": 333, "language": "Python", "requirement": "Write a python function to sort a list according to the second element in sublist.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `70e17b`\n   b. Major behaviors: def Sort(sub_li): \r     sub_li.sort(key = lambda x: x[1])...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li"}
{"id": 334, "language": "Python", "requirement": "Write a python function to check whether the triangle is valid or not if sides are given.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4e0314`\n   b. Major behaviors: def check_Validity(a,b,c):  \r     if (a + b <= c) or (a + c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True"}
{"id": 335, "language": "Python", "requirement": "Write a function to find the sum of arithmetic progression.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c6fe7f`\n   b. Major behaviors: def ap_sum(a,n,d):\r   total = (n * (2 * a + (n - 1) * d)) /...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"}
{"id": 336, "language": "Python", "requirement": "Write a function to check whether the given month name contains 28 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `063a29`\n   b. Major behaviors: def check_monthnum(monthname1):\r   if monthname1 == \"Februar...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"}
{"id": 337, "language": "Python", "requirement": "Write a function that matches a word at the end of a string, with optional punctuation.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fda5dc`\n   b. Major behaviors: import re\r def text_match_word(text):\r         patterns = '\\...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"}
{"id": 338, "language": "Python", "requirement": "Write a python function to count the number of substrings with same first and last characters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2f9bec`\n   b. Major behaviors: def check_Equality(s): \r     return (ord(s[0]) == ord(s[len(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result;"}
{"id": 339, "language": "Python", "requirement": "Write a python function to find the maximum occuring divisor in an interval.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f519cc`\n   b. Major behaviors: def find_Divisor(x,y):  \r     if (x==y): \r         return y...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"}
{"id": 340, "language": "Python", "requirement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ec3c12`\n   b. Major behaviors: def sum_three_smallest_nums(lst):\r \treturn sum(sorted([x for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"}
{"id": 341, "language": "Python", "requirement": "Write a function to convert the given set into ordered tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5f5aec`\n   b. Major behaviors: def set_to_tuple(s):\r   t = tuple(sorted(s))\r   return (t)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"}
{"id": 342, "language": "Python", "requirement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `428c71`\n   b. Major behaviors: from heapq import heappop, heappush\r class Node:\r     def __...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"}
{"id": 343, "language": "Python", "requirement": "Write a function to calculate the number of digits and letters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fb7486`\n   b. Major behaviors: def dig_let(s):\r  d=l=0\r  for c in s:\r     if c.isdigit():...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"}
{"id": 344, "language": "Python", "requirement": "Write a python function to find number of elements with odd factors in a given range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3b89e1`\n   b. Major behaviors: def count_Odd_Squares(n,m): \r     return int(m**0.5) - int((...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5)"}
{"id": 345, "language": "Python", "requirement": "Write a function to find the difference between two consecutive numbers in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `23985b`\n   b. Major behaviors: def diff_consecutivenums(nums):\r     result = [b-a for a, b...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"id": 346, "language": "Python", "requirement": "Write a function to find entringer number e(n, k).", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c2abc8`\n   b. Major behaviors: def zigzag(n, k): \r \tif (n == 0 and k == 0): \r \t\treturn 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"}
{"id": 347, "language": "Python", "requirement": "Write a python function to count the number of squares in a rectangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5fa4b6`\n   b. Major behaviors: def count_Squares(m,n): \r     if (n < m): \r         temp = m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"}
{"id": 348, "language": "Python", "requirement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bc5b49`\n   b. Major behaviors: def bin_coff(n, r): \r \tval = 1\r \tif (r > (n - r)): \r \t\tr = (...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b)"}
{"id": 349, "language": "Python", "requirement": "Write a python function to check whether the given string is a binary string or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f7d1ab`\n   b. Major behaviors: def check(string) :\r     p = set(string) \r     s = {'0', '1'...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\")"}
{"id": 350, "language": "Python", "requirement": "Write a python function to minimize the length of the string by removing occurrence of only one character.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c57a52`\n   b. Major behaviors: def minimum_Length(s) : \r     maxOcc = 0\r     n = len(s)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc"}
{"id": 351, "language": "Python", "requirement": "Write a python function to find the first element occurring k times in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `af6fec`\n   b. Major behaviors: def first_Element(arr,n,k): \r     count_map = {}; \r     for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"}
{"id": 352, "language": "Python", "requirement": "Write a python function to check whether all the characters in a given string are unique.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `86ebeb`\n   b. Major behaviors: def unique_Characters(str):\r     for i in range(len(str)):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"}
{"id": 353, "language": "Python", "requirement": "Write a function to remove a specified column from a given nested list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `acc3db`\n   b. Major behaviors: def remove_column(list1, n):\r    for i in list1: \r     del i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"}
{"id": 354, "language": "Python", "requirement": "Write a function to find t-nth term of arithemetic progression.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2f9c8c`\n   b. Major behaviors: def tn_ap(a,n,d):\r   tn = a + (n - 1) * d\r   return tn...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"}
{"id": 355, "language": "Python", "requirement": "Write a python function to count the number of rectangles in a circle of radius r.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7e71c0`\n   b. Major behaviors: def count_Rectangles(radius):  \r     rectangles = 0 \r     di...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles"}
{"id": 356, "language": "Python", "requirement": "Write a function to find the third angle of a triangle using two angles.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `88e163`\n   b. Major behaviors: def find_angle(a,b):\r  c = 180 - (a + b)\r  return c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c"}
{"id": 357, "language": "Python", "requirement": "Write a function to find the maximum element of all the given tuple records.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `25c6df`\n   b. Major behaviors: def find_max(test_list):\r   res = max(int(j) for i in test_l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res)"}
{"id": 358, "language": "Python", "requirement": "Write a function to find modulo division of two lists using map and lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `23ae8a`\n   b. Major behaviors: def moddiv_list(nums1,nums2):\r   result = map(lambda x, y: x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"}
{"id": 359, "language": "Python", "requirement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `52b92c`\n   b. Major behaviors: def Check_Solution(a,b,c): \r     if (2*b*b == 9*a*c):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\");"}
{"id": 360, "language": "Python", "requirement": "Write a function to find the n\u2019th carol number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9ab125`\n   b. Major behaviors: def get_carol(n): \r \tresult = (2**n) - 1\r \treturn result * r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"}
{"id": 361, "language": "Python", "requirement": "Write a function to remove empty lists from a given list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2af3a8`\n   b. Major behaviors: def remove_empty(list1):\r   remove_empty = [x for x in list1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"}
{"id": 362, "language": "Python", "requirement": "Write a python function to find the item with maximum occurrences in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `172416`\n   b. Major behaviors: def max_occurrences(nums):\r     max_val = 0\r     result = nu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"}
{"id": 363, "language": "Python", "requirement": "Write a function to add the k elements to each element in the tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `13088f`\n   b. Major behaviors: def add_K_element(test_list, K):\r   res = [tuple(j + K for j...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res)"}
{"id": 364, "language": "Python", "requirement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cf3e14`\n   b. Major behaviors: def make_flip(ch): \r \treturn '1' if (ch == '0') else '0'\r de...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1'))"}
{"id": 365, "language": "Python", "requirement": "Write a python function to count the number of digits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bbd13f`\n   b. Major behaviors: def count_Digit(n):\r     count = 0\r     while n != 0:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"}
{"id": 366, "language": "Python", "requirement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8c0b1c`\n   b. Major behaviors: def adjacent_num_product(list_nums):\r     return max(a*b for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"}
{"id": 367, "language": "Python", "requirement": "Write a function to check if a binary tree is balanced or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ce1e45`\n   b. Major behaviors: class Node: \r \tdef __init__(self, data): \r \t\tself.data = dat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"}
{"id": 368, "language": "Python", "requirement": "Write a function to repeat the given tuple n times.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9d6d72`\n   b. Major behaviors: def repeat_tuples(test_tup, N):\r   res = ((test_tup, ) * N)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res)"}
{"id": 369, "language": "Python", "requirement": "Write a function to find the lateral surface area of cuboid", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bc4090`\n   b. Major behaviors: def lateralsurface_cuboid(l,w,h):\r   LSA = 2*h*(l+w)\r   retu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"}
{"id": 370, "language": "Python", "requirement": "Write a function to sort a tuple by its float element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c64eda`\n   b. Major behaviors: def float_sort(price):\r   float_sort=sorted(price, key=lambd...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"}
{"id": 371, "language": "Python", "requirement": "Write a function to find the smallest missing element in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0e0d7b`\n   b. Major behaviors: def smallest_missing(A, left_element, right_element):\r     i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"}
{"id": 372, "language": "Python", "requirement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cd3c80`\n   b. Major behaviors: import heapq as hq\r def heap_assending(nums):\r   hq.heapify(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"}
{"id": 373, "language": "Python", "requirement": "Write a function to find the volume of a cuboid.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e6ae78`\n   b. Major behaviors: def volume_cuboid(l,w,h):\r   volume=l*w*h\r   return volume...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"}
{"id": 374, "language": "Python", "requirement": "Write a function to print all permutations of a given string including duplicates.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ddc702`\n   b. Major behaviors: def permute_string(str):\r     if len(str) == 0:\r         ret...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"}
{"id": 375, "language": "Python", "requirement": "Write a function to round the given number to the nearest multiple of a specific number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c770ca`\n   b. Major behaviors: def round_num(n,m):\r     a = (n //m) * m\r     b = a + m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"}
{"id": 376, "language": "Python", "requirement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b967b6`\n   b. Major behaviors: def remove_replica(test_tup):\r   temp = set()\r   res = tuple...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"}
{"id": 377, "language": "Python", "requirement": "Write a python function to remove all occurrences of a character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `825316`\n   b. Major behaviors: def remove_Char(s,c) :  \r     counts = s.count(c) \r     s =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s)"}
{"id": 378, "language": "Python", "requirement": "Write a python function to shift last element to first position in the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2f4813`\n   b. Major behaviors: def move_first(test_list):\r   test_list = test_list[-1:] + t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"}
{"id": 379, "language": "Python", "requirement": "Write a function to find the surface area of a cuboid.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `98df9e`\n   b. Major behaviors: def surfacearea_cuboid(l,w,h):\r   SA = 2*(l*w + l * h + w *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"}
{"id": 380, "language": "Python", "requirement": "Write a function to generate a two-dimensional array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6dfa6f`\n   b. Major behaviors: def multi_list(rownum,colnum):\r   multi_list = [[0 for col i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list"}
{"id": 381, "language": "Python", "requirement": "Write a function to sort a list of lists by a given index of the inner list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `22faca`\n   b. Major behaviors: from operator import itemgetter\r def index_on_inner_list(lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"}
{"id": 382, "language": "Python", "requirement": "Write a function to find the number of rotations in a circularly sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `908937`\n   b. Major behaviors: def find_rotation_count(A):\r     (left, right) = (0, len(A)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"}
{"id": 383, "language": "Python", "requirement": "Write a python function to toggle all odd bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fa8396`\n   b. Major behaviors: def even_bit_toggle_number(n) : \r     res = 0; count = 0; te...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res"}
{"id": 384, "language": "Python", "requirement": "Write a python function to find the frequency of the smallest value in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9373b5`\n   b. Major behaviors: def frequency_Of_Smallest(n,arr): \r     mn = arr[0] \r     fr...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq"}
{"id": 385, "language": "Python", "requirement": "Write a function to find the n'th perrin number using recursion.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e2ca60`\n   b. Major behaviors: def get_perrin(n):\r   if (n == 0):\r     return 3\r   if (n ==...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"}
{"id": 386, "language": "Python", "requirement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3b2485`\n   b. Major behaviors: def swap_count(s):\r \tchars = s\r \tcount_left = 0\r \tcount_righ...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"}
{"id": 387, "language": "Python", "requirement": "Write a python function to check whether the hexadecimal number is even or odd.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc4775`\n   b. Major behaviors: def even_or_odd(N): \r     l = len(N) \r     if (N[l-1] =='0'o...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\")"}
{"id": 388, "language": "Python", "requirement": "Write a python function to find the highest power of 2 that is less than or equal to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6f6672`\n   b. Major behaviors: def highest_Power_of_2(n): \r     res = 0; \r     for i in ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res;"}
{"id": 389, "language": "Python", "requirement": "Write a function to find the n'th lucas number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `08c04f`\n   b. Major behaviors: def find_lucas(n): \r \tif (n == 0): \r \t\treturn 2\r \tif (n == 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2)"}
{"id": 390, "language": "Python", "requirement": "Write a function to insert a given string at the beginning of all items in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `16916e`\n   b. Major behaviors: def add_string(list,string):\r  add_string=[string.format(i)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"}
{"id": 391, "language": "Python", "requirement": "Write a function to convert more than one list to nested dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b10d5f`\n   b. Major behaviors: def convert_list_dictionary(l1, l2, l3):\r      result = [{x:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"}
{"id": 392, "language": "Python", "requirement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e422a`\n   b. Major behaviors: def get_max_sum (n):\r \tres = list()\r \tres.append(0)\r \tres.ap...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"}
{"id": 393, "language": "Python", "requirement": "Write a function to find the list with maximum length using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `715ac2`\n   b. Major behaviors: def max_length_list(input_list):\r     max_length = max(len(x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"}
{"id": 394, "language": "Python", "requirement": "Write a function to check if given tuple is distinct or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2f96b4`\n   b. Major behaviors: def check_distinct(test_tup):\r   res = True\r   temp = set()...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res)"}
{"id": 395, "language": "Python", "requirement": "Write a python function to find the first non-repeated character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d80ccd`\n   b. Major behaviors: def first_non_repeating_character(str1):\r   char_order = []...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"}
{"id": 396, "language": "Python", "requirement": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d953fb`\n   b. Major behaviors: import re  \r regex = r'^[a-z]$|^([a-z]).*\\1$'\r def check_cha...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\""}
{"id": 397, "language": "Python", "requirement": "Write a function to find the median of three specific numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `149f5b`\n   b. Major behaviors: def median_numbers(a,b,c):\r  if a > b:\r     if a < c:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"}
{"id": 398, "language": "Python", "requirement": "Write a function to compute the sum of digits of each number of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `10ab23`\n   b. Major behaviors: def sum_of_digits(nums):\r     return sum(int(el) for n in nu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"}
{"id": 399, "language": "Python", "requirement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `759bb1`\n   b. Major behaviors: def bitwise_xor(test_tup1, test_tup2):\r   res = tuple(ele1 ^...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 400, "language": "Python", "requirement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0eb740`\n   b. Major behaviors: def extract_freq(test_list):\r   res = len(list(set(tuple(sor...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"}
{"id": 401, "language": "Python", "requirement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `055428`\n   b. Major behaviors: def add_nested_tuples(test_tup1, test_tup2):\r   res = tuple(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 402, "language": "Python", "requirement": "Write a function to compute the value of ncr%p.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b5af6b`\n   b. Major behaviors: def ncr_modp(n, r, p): \r     C = [0 for i in range(r+1)]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r]"}
{"id": 403, "language": "Python", "requirement": "Write a function to check if a url is valid or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4e5e22`\n   b. Major behaviors: import re\r def is_valid_URL(str):\r \tregex = (\"((http|https):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"}
{"id": 404, "language": "Python", "requirement": "Write a python function to find the minimum of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5f6812`\n   b. Major behaviors: def minimum(a,b):   \r     if a <= b: \r         return a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b"}
{"id": 405, "language": "Python", "requirement": "Write a function to check whether an element exists within a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ec237e`\n   b. Major behaviors: def check_tuplex(tuplex,tuple1): \r   if tuple1 in tuplex:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"}
{"id": 406, "language": "Python", "requirement": "Write a python function to find the parity of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `843a1a`\n   b. Major behaviors: def find_Parity(x): \r     y = x ^ (x >> 1); \r     y = y ^ (y...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\");"}
{"id": 407, "language": "Python", "requirement": "Write a function to create the next bigger number by rearranging the digits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `390b9e`\n   b. Major behaviors: def rearrange_bigger(n):\r     nums = list(str(n))\r     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"}
{"id": 408, "language": "Python", "requirement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3ab82c`\n   b. Major behaviors: import heapq\r def k_smallest_pairs(nums1, nums2, k):\r    que...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"}
{"id": 409, "language": "Python", "requirement": "Write a function to find the minimum product from the pairs of tuples within a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `73d043`\n   b. Major behaviors: def min_product_tuple(list1):\r     result_min = min([abs(x *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"}
{"id": 410, "language": "Python", "requirement": "Write a function to find the minimum value in a given heterogeneous list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fc5872`\n   b. Major behaviors: def min_val(listval):\r      min_val = min(i for i in listval...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"}
{"id": 411, "language": "Python", "requirement": "Write a function to convert the given snake case string to camel case string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `46daad`\n   b. Major behaviors: import re\r def snake_to_camel(word):\r   return ''.join(x.cap...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"}
{"id": 412, "language": "Python", "requirement": "Write a python function to remove odd numbers from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `134cea`\n   b. Major behaviors: def remove_odd(l):\r     for i in l:\r         if i % 2 != 0:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"}
{"id": 413, "language": "Python", "requirement": "Write a function to extract the nth element from a given list of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a68371`\n   b. Major behaviors: def extract_nth_element(list1, n):\r     result = [x[n] for x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"}
{"id": 414, "language": "Python", "requirement": "Write a python function to check whether the value exists in a sequence or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8e2816`\n   b. Major behaviors: def overlapping(list1,list2):  \r     c=0\r     d=0\r     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"}
{"id": 415, "language": "Python", "requirement": "Write a python function to find a pair with highest product from a given array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f0efcb`\n   b. Major behaviors: def max_Product(arr): \r     arr_len = len(arr) \r     if (arr...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y"}
{"id": 416, "language": "Python", "requirement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e71f34`\n   b. Major behaviors: MAX = 1000000\r def breakSum(n): \r \tdp = [0]*(n+1) \r \tdp[0] =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"}
{"id": 417, "language": "Python", "requirement": "Write a function to find common first element in given list of tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2443a6`\n   b. Major behaviors: def group_tuples(Input): \r \tout = {} \r \tfor elem in Input:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()]"}
{"id": 418, "language": "Python", "requirement": "Write a python function to find the sublist having maximum length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eea917`\n   b. Major behaviors: def Find_Max(lst): \r     maxList = max((x) for x in lst)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"}
{"id": 419, "language": "Python", "requirement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `580180`\n   b. Major behaviors: def round_and_sum(list1):\r   lenght=len(list1)\r   round_and_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"}
{"id": 420, "language": "Python", "requirement": "Write a python function to find the cube sum of first n even natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `306b79`\n   b. Major behaviors: def cube_Sum(n): \r     sum = 0\r     for i in range(1,n + 1):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"}
{"id": 421, "language": "Python", "requirement": "Write a function to concatenate each element of tuple by the delimiter.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `50f1f8`\n   b. Major behaviors: def concatenate_tuple(test_tup):\r     delim = \"-\"\r     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res))"}
{"id": 422, "language": "Python", "requirement": "Write a python function to find the average of cubes of first n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3a563f`\n   b. Major behaviors: def find_Average_Of_Cube(n):  \r     sum = 0\r     for i in ra...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6)"}
{"id": 423, "language": "Python", "requirement": "Write a function to solve gold mine problem.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2bca9f`\n   b. Major behaviors: def get_maxgold(gold, m, n): \r     goldTable = [[0 for i in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res"}
{"id": 424, "language": "Python", "requirement": "Write a function to extract only the rear index element of each string in the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `86deb6`\n   b. Major behaviors: def extract_rear(test_tuple):\r   res = list(sub[len(sub) - 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res)"}
{"id": 425, "language": "Python", "requirement": "Write a function to count the number of sublists containing a particular element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8c8e12`\n   b. Major behaviors: def count_element_in_list(list1, x): \r     ctr = 0\r     for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"}
{"id": 426, "language": "Python", "requirement": "Write a function to filter odd numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7d363d`\n   b. Major behaviors: def filter_oddnumbers(nums):\r  odd_nums = list(filter(lambda...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"}
{"id": 427, "language": "Python", "requirement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2adc03`\n   b. Major behaviors: import re\r def change_date_format(dt):\r         return re.su...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"}
{"id": 428, "language": "Python", "requirement": "Write a function to sort the given array by using shell sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2675b7`\n   b. Major behaviors: def shell_sort(my_list):\r     gap = len(my_list) // 2\r     w...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"}
{"id": 429, "language": "Python", "requirement": "Write a function to extract the elementwise and tuples from the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b2cf69`\n   b. Major behaviors: def and_tuples(test_tup1, test_tup2):\r   res = tuple(ele1 &...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 430, "language": "Python", "requirement": "Write a function to find the directrix of a parabola.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ed1cfb`\n   b. Major behaviors: def parabola_directrix(a, b, c): \r   directrix=((int)(c - ((...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"}
{"id": 431, "language": "Python", "requirement": "Write a function that takes two lists and returns true if they have at least one common element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `457816`\n   b. Major behaviors: def common_element(list1, list2):\r      result = False...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"}
{"id": 432, "language": "Python", "requirement": "Write a function to find the median of a trapezium.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `20f4a1`\n   b. Major behaviors: def median_trapezium(base1,base2,height):\r  median = 0.5 * (...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"}
{"id": 433, "language": "Python", "requirement": "Write a function to check whether the entered number is greater than the elements of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7dd344`\n   b. Major behaviors: def check_greater(arr, number):\r   arr.sort()\r   if number >...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"}
{"id": 434, "language": "Python", "requirement": "Write a function that matches a string that has an a followed by one or more b's.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `81965c`\n   b. Major behaviors: import re\r def text_match_one(text):\r         patterns = 'ab...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"id": 435, "language": "Python", "requirement": "Write a python function to find the last digit of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bb303f`\n   b. Major behaviors: def last_Digit(n) :\r     return (n % 10)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def last_Digit(n) :\r\n    return (n % 10)"}
{"id": 436, "language": "Python", "requirement": "Write a python function to print negative numbers in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1bfc3c`\n   b. Major behaviors: def neg_nos(list1):\r   for num in list1: \r     if num < 0:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num"}
{"id": 437, "language": "Python", "requirement": "Write a function to remove odd characters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `96c5bd`\n   b. Major behaviors: def remove_odd(str1):\r  str2 = ''\r  for i in range(1, len(st...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"}
{"id": 438, "language": "Python", "requirement": "Write a function to count bidirectional tuple pairs.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `05c468`\n   b. Major behaviors: def count_bidirectional(test_list):\r   res = 0\r   for idx in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res))"}
{"id": 439, "language": "Python", "requirement": "Write a function to convert a list of multiple integers into a single integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9bd15a`\n   b. Major behaviors: def multiple_to_single(L):\r   x = int(\"\".join(map(str, L)))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"}
{"id": 440, "language": "Python", "requirement": "Write a function to find all adverbs and their positions in a given sentence.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9cfa19`\n   b. Major behaviors: import re\r def find_adverb_position(text):\r  for m in re.fin...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"}
{"id": 441, "language": "Python", "requirement": "Write a function to find the surface area of a cube.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `376505`\n   b. Major behaviors: def surfacearea_cube(l):\r   surfacearea= 6*l*l\r   return sur...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"}
{"id": 442, "language": "Python", "requirement": "Write a function to find the ration of positive numbers in an array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f8bec0`\n   b. Major behaviors: from array import array\r def positive_count(nums):\r     n =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"}
{"id": 443, "language": "Python", "requirement": "Write a python function to find the largest negative number from the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2555f4`\n   b. Major behaviors: def largest_neg(list1): \r     max = list1[0] \r     for x in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"}
{"id": 444, "language": "Python", "requirement": "Write a function to trim each tuple by k in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `25e192`\n   b. Major behaviors: def trim_tuple(test_list, K):\r   res = []\r   for ele in test...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res))"}
{"id": 445, "language": "Python", "requirement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `acefbc`\n   b. Major behaviors: def index_multiplication(test_tup1, test_tup2):\r   res = tup...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 446, "language": "Python", "requirement": "Write a python function to count the occurence of all elements of list in a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9e5c08`\n   b. Major behaviors: from collections import Counter \r def count_Occurrence(tup,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count"}
{"id": 447, "language": "Python", "requirement": "Write a function to find cubes of individual elements in a list using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0df62e`\n   b. Major behaviors: def cube_nums(nums):\r  cube_nums = list(map(lambda x: x ** 3...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"}
{"id": 448, "language": "Python", "requirement": "Write a function to calculate the sum of perrin numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f30ed6`\n   b. Major behaviors: def cal_sum(n): \r \ta = 3\r \tb = 0\r \tc = 2\r \tif (n == 0):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"}
{"id": 449, "language": "Python", "requirement": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `53e0c5`\n   b. Major behaviors: def check_Triangle(x1,y1,x2,y2,x3,y3): \r     a = (x1*(y2-y3)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes')"}
{"id": 450, "language": "Python", "requirement": "Write a function to extract specified size of strings from a give list of string values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b086f3`\n   b. Major behaviors: def extract_string(str, l):\r     result = [e for e in str if...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"}
{"id": 451, "language": "Python", "requirement": "Write a function to remove all whitespaces from the given string using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `151e56`\n   b. Major behaviors: import re\r def remove_whitespaces(text1):\r   return (re.sub(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"}
{"id": 452, "language": "Python", "requirement": "Write a function that gives loss amount if the given amount has loss else return none.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c6d80a`\n   b. Major behaviors: def loss_amount(actual_cost,sale_amount): \r   if(sale_amount...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"}
{"id": 453, "language": "Python", "requirement": "Write a python function to find the sum of even factors of a number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ae0dce`\n   b. Major behaviors: import math \r def sumofFactors(n) : \r     if (n % 2 != 0) :...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res"}
{"id": 454, "language": "Python", "requirement": "Write a function that matches a word containing 'z'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4888de`\n   b. Major behaviors: import re\r def text_match_wordz(text):\r         patterns = '...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"id": 455, "language": "Python", "requirement": "Write a function to check whether the given month number contains 31 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c7ebcd`\n   b. Major behaviors: def check_monthnumb_number(monthnum2):\r   if(monthnum2==1 or...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"}
{"id": 456, "language": "Python", "requirement": "Write a function to reverse strings in a given list of string values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6ddbbe`\n   b. Major behaviors: def reverse_string_list(stringlist):\r     result = [x[::-1]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"}
{"id": 457, "language": "Python", "requirement": "Write a python function to find the sublist having minimum length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e42151`\n   b. Major behaviors: def Find_Min(lst): \r     minList = min((x) for x in lst)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"}
{"id": 458, "language": "Python", "requirement": "Write a function to find the area of a rectangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4501da`\n   b. Major behaviors: def rectangle_area(l,b):\r   area=l*b\r   return area...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"}
{"id": 459, "language": "Python", "requirement": "Write a function to remove uppercase substrings from a given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `58ad11`\n   b. Major behaviors: import re\r def remove_uppercase(str1):\r   remove_upper = lam...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"}
{"id": 460, "language": "Python", "requirement": "Write a python function to get the first element of each sublist.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f7957f`\n   b. Major behaviors: def Extract(lst): \r     return [item[0] for item in lst]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Extract(lst): \r\n    return [item[0] for item in lst]"}
{"id": 461, "language": "Python", "requirement": "Write a python function to count the upper case characters in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e208e`\n   b. Major behaviors: def upper_ctr(str):\r     upper_ctr = 0\r     for i in range(l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"}
{"id": 462, "language": "Python", "requirement": "Write a function to find all possible combinations of the elements of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f74eb1`\n   b. Major behaviors: def combinations_list(list1):\r     if len(list1) == 0:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"}
{"id": 463, "language": "Python", "requirement": "Write a function to find the maximum product subarray of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b304f6`\n   b. Major behaviors: def max_subarray_product(arr):\r \tn = len(arr)\r \tmax_ending_h...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"}
{"id": 464, "language": "Python", "requirement": "Write a function to check if all values are same in a dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `88b34d`\n   b. Major behaviors: def check_value(dict, n):\r     result = all(x == n for x in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"}
{"id": 465, "language": "Python", "requirement": "Write a function to drop empty items from a given dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7b0dfa`\n   b. Major behaviors: def drop_empty(dict1):\r   dict1 = {key:value for (key, value...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"}
{"id": 466, "language": "Python", "requirement": "Write a function to find the peak element in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c23adc`\n   b. Major behaviors: def find_peak_util(arr, low, high, n): \r \tmid = low + (high...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n)"}
{"id": 467, "language": "Python", "requirement": "Write a python function to convert decimal number to octal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `21b2a2`\n   b. Major behaviors: def decimal_to_Octal(deciNum):\r     octalNum = 0\r     countv...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"}
{"id": 468, "language": "Python", "requirement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e3c0c`\n   b. Major behaviors: def max_product(arr, n ): \r \tmpis =[0] * (n) \r \tfor i in ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"}
{"id": 469, "language": "Python", "requirement": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `874094`\n   b. Major behaviors: def max_profit(price, k):\r     n = len(price)\r     final_pro...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"}
{"id": 470, "language": "Python", "requirement": "Write a function to find the pairwise addition of the elements of the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `746d41`\n   b. Major behaviors: def add_pairwise(test_tup):\r   res = tuple(i + j for i, j in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res)"}
{"id": 471, "language": "Python", "requirement": "Write a python function to find remainder of array multiplication divided by n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7a26d6`\n   b. Major behaviors: def find_remainder(arr, lens, n): \r     mul = 1\r     for i i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n"}
{"id": 472, "language": "Python", "requirement": "Write a python function to check whether the given list contains consecutive numbers or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7781e7`\n   b. Major behaviors: def check_Consecutive(l): \r     return sorted(l) == list(ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1))"}
{"id": 473, "language": "Python", "requirement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `aacf8f`\n   b. Major behaviors: def tuple_intersection(test_list1, test_list2):\r   res = set...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"}
{"id": 474, "language": "Python", "requirement": "Write a function to replace characters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0f1f2f`\n   b. Major behaviors: def replace_char(str1,ch,newch):\r  str2 = str1.replace(ch, n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"}
{"id": 475, "language": "Python", "requirement": "Write a function to sort counter by value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `99c820`\n   b. Major behaviors: from collections import Counter\r def sort_counter(dict1):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"}
{"id": 476, "language": "Python", "requirement": "Write a python function to find the sum of the largest and smallest value in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f5ffe9`\n   b. Major behaviors: def big_sum(nums):\r       sum= max(nums)+min(nums)\r       re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"}
{"id": 477, "language": "Python", "requirement": "Write a python function to convert the given string to lower case.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f7d99a`\n   b. Major behaviors: def is_lower(string):\r   return (string.lower())...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_lower(string):\r\n  return (string.lower())"}
{"id": 478, "language": "Python", "requirement": "Write a function to remove lowercase substrings from a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `71b376`\n   b. Major behaviors: import re\r def remove_lowercase(str1):\r  remove_lower = lamb...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"}
{"id": 479, "language": "Python", "requirement": "Write a python function to find the first digit of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e9baff`\n   b. Major behaviors: def first_Digit(n) :  \r     while n >= 10:  \r         n = n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n)"}
{"id": 480, "language": "Python", "requirement": "Write a python function to find the maximum occurring character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b4b76b`\n   b. Major behaviors: def get_max_occuring_char(str1):\r   ASCII_SIZE = 256\r   ctr...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"}
{"id": 481, "language": "Python", "requirement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7f5407`\n   b. Major behaviors: def is_subset_sum(set, n, sum):\r \tif (sum == 0):\r \t\treturn T...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"}
{"id": 482, "language": "Python", "requirement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `52f842`\n   b. Major behaviors: import re \r def match(text): \r \t\tpattern = '[A-Z]+[a-z]+$'...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No')"}
{"id": 483, "language": "Python", "requirement": "Write a python function to find the first natural number whose factorial is divisible by x.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b48f96`\n   b. Major behaviors: def first_Factorial_Divisible_Number(x): \r     i = 1;\r     f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i"}
{"id": 484, "language": "Python", "requirement": "Write a function to remove the matching tuples from the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `109f9a`\n   b. Major behaviors: def remove_matching_tuple(test_list1, test_list2):\r   res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res)"}
{"id": 485, "language": "Python", "requirement": "Write a function to find the largest palindromic number in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `84aee6`\n   b. Major behaviors: def is_palindrome(n) : \r \tdivisor = 1\r \twhile (n / divisor >...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"}
{"id": 486, "language": "Python", "requirement": "Write a function to compute binomial probability for the given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc74ef`\n   b. Major behaviors: def nCr(n, r): \r \tif (r > n / 2): \r \t\tr = n - r \r \tanswer =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k))"}
{"id": 487, "language": "Python", "requirement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `00c6bb`\n   b. Major behaviors: def sort_tuple(tup): \r \tlst = len(tup) \r \tfor i in range(0,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"}
{"id": 488, "language": "Python", "requirement": "Write a function to find the area of a pentagon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `635ab3`\n   b. Major behaviors: import math\r def area_pentagon(a):\r   area=(math.sqrt(5*(5+2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"}
{"id": 489, "language": "Python", "requirement": "Write a python function to find the frequency of the largest value in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `34eac1`\n   b. Major behaviors: def frequency_Of_Largest(n,arr): \r     mn = arr[0] \r     fre...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq"}
{"id": 490, "language": "Python", "requirement": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `87ebe3`\n   b. Major behaviors: def extract_symmetric(test_list):\r   temp = set(test_list) &...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res)"}
{"id": 491, "language": "Python", "requirement": "Write a function to find the sum of geometric progression series.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0408c4`\n   b. Major behaviors: import math\r def sum_gp(a,n,r):\r  total = (a * (1 - math.pow...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"}
{"id": 492, "language": "Python", "requirement": "Write a function to search an element in the given array by using binary search.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0fc7c9`\n   b. Major behaviors: def binary_search(item_list,item):\r \tfirst = 0\r \tlast = len(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"}
{"id": 493, "language": "Python", "requirement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `806edb`\n   b. Major behaviors: import math\r def calculate_polygons(startx, starty, endx, en...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"}
{"id": 494, "language": "Python", "requirement": "Write a function to convert the given binary tuple to integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d934b8`\n   b. Major behaviors: def binary_to_integer(test_tup):\r   res = int(\"\".join(str(el...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res))"}
{"id": 495, "language": "Python", "requirement": "Write a function to remove lowercase substrings from a given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dda2a7`\n   b. Major behaviors: import re\r def remove_lowercase(str1):\r   remove_lower = lam...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"}
{"id": 496, "language": "Python", "requirement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c4b123`\n   b. Major behaviors: import heapq as hq\r def heap_queue_smallest(nums,n):\r   smal...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"}
{"id": 497, "language": "Python", "requirement": "Write a function to find the surface area of a cone.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `997d3b`\n   b. Major behaviors: import math\r def surfacearea_cone(r,h):\r   l = math.sqrt(r *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"}
{"id": 498, "language": "Python", "requirement": "Write a python function to find gcd of two positive integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `768a04`\n   b. Major behaviors: def gcd(x, y):\r     gcd = 1\r     if x % y == 0:\r         ret...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"}
{"id": 499, "language": "Python", "requirement": "Write a function to find the diameter of a circle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1af128`\n   b. Major behaviors: def diameter_circle(r):\r   diameter=2*r\r   return diameter...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"}
{"id": 500, "language": "Python", "requirement": "Write a function to concatenate all elements of the given list into a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `38f7dc`\n   b. Major behaviors: def concatenate_elements(list):\r   ans = ' '\r   for i in lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans)"}
{"id": 501, "language": "Python", "requirement": "Write a python function to find common divisor between two numbers in a given pair.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a70367`\n   b. Major behaviors: def ngcd(x,y):\r     i=1\r     while(i<=x and i<=y):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"}
{"id": 502, "language": "Python", "requirement": "Write a python function to find remainder of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e54b24`\n   b. Major behaviors: def find(n,m):\r   r = n%m\r   return (r)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find(n,m):\r\n  r = n%m\r\n  return (r)"}
{"id": 503, "language": "Python", "requirement": "Write a function to add consecutive numbers of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `47c98c`\n   b. Major behaviors: def add_consecutive_nums(nums):\r     result = [b+a for a, b...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"id": 504, "language": "Python", "requirement": "Write a python function to find the cube sum of first n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1d147b`\n   b. Major behaviors: def sum_Of_Series(n): \r     sum = 0\r     for i in range(1,n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"}
{"id": 505, "language": "Python", "requirement": "Write a function to move all zeroes to the end of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7c566d`\n   b. Major behaviors: def re_order(A):\r     k = 0\r     for i in A:\r         if i:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"}
{"id": 506, "language": "Python", "requirement": "Write a function to calculate the permutation coefficient of given p(n, k).", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b1f01b`\n   b. Major behaviors: def permutation_coefficient(n, k): \r \tP = [[0 for i in range...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k]"}
{"id": 507, "language": "Python", "requirement": "Write a function to remove specific words from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `284392`\n   b. Major behaviors: def remove_words(list1, removewords):\r     for word in list(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1"}
{"id": 508, "language": "Python", "requirement": "Write a function to check if the common elements between two given lists are in the same order or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c6e4cf`\n   b. Major behaviors: def same_order(l1, l2):\r     common_elements = set(l1) & set...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"}
{"id": 509, "language": "Python", "requirement": "Write a python function to find the average of odd numbers till a given odd number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `89e0b1`\n   b. Major behaviors: def average_Odd(n) : \r     if (n%2==0) : \r         return (\"...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count"}
{"id": 510, "language": "Python", "requirement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `732623`\n   b. Major behaviors: def no_of_subsequences(arr, k): \r \tn = len(arr) \r \tdp = [[0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"}
{"id": 511, "language": "Python", "requirement": "Write a python function to find minimum sum of factors of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `de4ca7`\n   b. Major behaviors: def find_Min_Sum(num): \r     sum = 0\r     i = 2\r     while(i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"}
{"id": 512, "language": "Python", "requirement": "Write a function to count the element frequency in the mixed nested tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `64491a`\n   b. Major behaviors: def flatten(test_tuple): \r \tfor tup in test_tuple: \r \t\tif is...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res)"}
{"id": 513, "language": "Python", "requirement": "Write a function to convert tuple into list by adding the given string after every element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2372e5`\n   b. Major behaviors: def add_str(test_tup, K):\r   res = [ele for sub in test_tup...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res)"}
{"id": 514, "language": "Python", "requirement": "Write a function to find the summation of tuple elements in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d43c55`\n   b. Major behaviors: def sum_elements(test_tup):\r   res = sum(list(test_tup))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res)"}
{"id": 515, "language": "Python", "requirement": "Write a function to check if there is a subset with sum divisible by m.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `18e326`\n   b. Major behaviors: def modular_sum(arr, n, m): \r \tif (n > m): \r \t\treturn True...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"}
{"id": 516, "language": "Python", "requirement": "Write a function to sort a list of elements using radix sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d09acc`\n   b. Major behaviors: def radix_sort(nums):\r     RADIX = 10\r     placement = 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"}
{"id": 517, "language": "Python", "requirement": "Write a python function to find the largest postive number from the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `010650`\n   b. Major behaviors: def largest_pos(list1): \r     max = list1[0] \r     for x in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"}
{"id": 518, "language": "Python", "requirement": "Write a function to find the square root of a perfect number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `186796`\n   b. Major behaviors: import math\r def sqrt_root(num):\r  sqrt_root = math.pow(num,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root"}
{"id": 519, "language": "Python", "requirement": "Write a function to calculate volume of a tetrahedron.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `215bc9`\n   b. Major behaviors: import math\r def volume_tetrahedron(num):\r \tvolume = (num **...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"}
{"id": 520, "language": "Python", "requirement": "Write a function to find the lcm of the given array elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cfbfe3`\n   b. Major behaviors: def find_lcm(num1, num2): \r \tif(num1>num2): \r \t\tnum = num1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm"}
{"id": 521, "language": "Python", "requirement": "Write a function to print check if the triangle is scalene or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `195e62`\n   b. Major behaviors: def check_isosceles(x,y,z):\r   if x!=y & y!=z & z!=x:\r \t   r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"}
{"id": 522, "language": "Python", "requirement": "Write a function to find the longest bitonic subsequence for the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b51057`\n   b. Major behaviors: def lbs(arr): \r \tn = len(arr) \r \tlis = [1 for i in range(n+1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"}
{"id": 523, "language": "Python", "requirement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dbd9e5`\n   b. Major behaviors: def check_string(str1):\r     messg = [\r     lambda str1: any...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result"}
{"id": 524, "language": "Python", "requirement": "Write a function to find the sum of maximum increasing subsequence of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `94224c`\n   b. Major behaviors: def max_sum_increasing_subsequence(arr, n): \r \tmax = 0\r \tmsi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"}
{"id": 525, "language": "Python", "requirement": "Write a python function to check whether two given lines are parallel or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `35435f`\n   b. Major behaviors: def parallel_lines(line1, line2):\r   return line1[0]/line1[1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"}
{"id": 526, "language": "Python", "requirement": "Write a python function to capitalize first and last letters of each word of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9e2011`\n   b. Major behaviors: def capitalize_first_last_letters(str1):\r      str1 = result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]"}
{"id": 527, "language": "Python", "requirement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `84fb79`\n   b. Major behaviors: def get_pairs_count(arr, n, sum):\r     count = 0 \r     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"}
{"id": 528, "language": "Python", "requirement": "Write a function to find the list of lists with minimum length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7efcae`\n   b. Major behaviors: def min_length(list1):\r    min_length = min(len(x) for x in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)"}
{"id": 529, "language": "Python", "requirement": "Write a function to find the nth jacobsthal-lucas number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d6f94e`\n   b. Major behaviors: def jacobsthal_lucas(n): \r \tdp=[0] * (n + 1) \r \tdp[0] = 2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"}
{"id": 530, "language": "Python", "requirement": "Write a function to find the ration of negative numbers in an array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `63b5c8`\n   b. Major behaviors: from array import array\r def negative_count(nums):\r     n =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"}
{"id": 531, "language": "Python", "requirement": "Write a function to find minimum number of coins that make a given value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f11647`\n   b. Major behaviors: import sys \r def min_coins(coins, m, V): \r     if (V == 0):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res"}
{"id": 532, "language": "Python", "requirement": "Write a function to check if the two given strings are permutations of each other.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f9cd27`\n   b. Major behaviors: def check_permutation(str1, str2):\r   n1=len(str1)\r   n2=len...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"}
{"id": 533, "language": "Python", "requirement": "Write a function to remove particular data type elements from the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9477ed`\n   b. Major behaviors: def remove_datatype(test_tuple, data_type):\r   res = []\r   f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res)"}
{"id": 534, "language": "Python", "requirement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f5b566`\n   b. Major behaviors: import re\r def search_literal(pattern,text):\r  match = re.se...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"}
{"id": 535, "language": "Python", "requirement": "Write a function to find the top or bottom surface area of a cylinder.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dd8835`\n   b. Major behaviors: def topbottom_surfacearea(r):\r   toporbottomarea=3.1415*r*r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"}
{"id": 536, "language": "Python", "requirement": "Write a function to select the nth items of a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b30328`\n   b. Major behaviors: def nth_items(list,n):\r  return list[::n]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def nth_items(list,n):\r\n return list[::n]"}
{"id": 537, "language": "Python", "requirement": "Write a python function to find the first repeated word in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4b0ac9`\n   b. Major behaviors: def first_repeated_word(str1):\r   temp = set()\r   for word i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"}
{"id": 538, "language": "Python", "requirement": "Write a python function to convert a given string list to a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ed8fb9`\n   b. Major behaviors: def string_list_to_tuple(str1):\r     result = tuple(x for x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"}
{"id": 539, "language": "Python", "requirement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d98c08`\n   b. Major behaviors: def basesnum_coresspondingnum(bases_num,index):\r   result =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"}
{"id": 540, "language": "Python", "requirement": "Write a python function to find the difference between highest and least frequencies in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `60134e`\n   b. Major behaviors: def find_Diff(arr,n): \r     arr.sort()  \r     count = 0; max...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count"}
{"id": 541, "language": "Python", "requirement": "Write a function to find if the given number is abundant or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e21021`\n   b. Major behaviors: import math \r def get_sum(n): \r \tsum = 0\r \ti = 1\r \twhile i <...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"}
{"id": 542, "language": "Python", "requirement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c505fd`\n   b. Major behaviors: import re\r def fill_spaces(text):\r   return (re.sub(\"[ ,.]\",...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"}
{"id": 543, "language": "Python", "requirement": "Write a function to add two numbers and print number of digits of sum.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0cad70`\n   b. Major behaviors: def count_digits(num1,num2):\r     number=num1+num2\r     coun...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"}
{"id": 544, "language": "Python", "requirement": "Write a function to flatten the tuple list to a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8d6062`\n   b. Major behaviors: def flatten_tuple(test_list):\r   res = ' '.join([idx for tup...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res)"}
{"id": 545, "language": "Python", "requirement": "Write a python function to toggle only first and last bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1e1da6`\n   b. Major behaviors: def take_L_and_F_set_bits(n) : \r     n = n | n >> 1\r     n =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n)"}
{"id": 546, "language": "Python", "requirement": "Write a function to find the last occurrence of a character in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `11910e`\n   b. Major behaviors: def last_occurence_char(string,char):\r  flag = -1\r  for i in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"}
{"id": 547, "language": "Python", "requirement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `67aa9e`\n   b. Major behaviors: def Total_Hamming_Distance(n):   \r     i = 1\r     sum = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"}
{"id": 548, "language": "Python", "requirement": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `697370`\n   b. Major behaviors: def longest_increasing_subsequence(arr): \r \tn = len(arr)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"}
{"id": 549, "language": "Python", "requirement": "Write a python function to find the sum of fifth power of first n odd natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `82b7e1`\n   b. Major behaviors: def odd_Num_Sum(n) : \r     j = 0\r     sm = 0\r     for i in r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm"}
{"id": 550, "language": "Python", "requirement": "Write a python function to find the maximum element in a sorted and rotated array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2b4a7f`\n   b. Major behaviors: def find_Max(arr,low,high): \r     if (high < low):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high)"}
{"id": 551, "language": "Python", "requirement": "Write a function to extract a specified column from a given nested list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d44038`\n   b. Major behaviors: def extract_column(list1, n):\r    result = [i.pop(n) for i i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result"}
{"id": 552, "language": "Python", "requirement": "Write a python function to check whether a given sequence is linear or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a73314`\n   b. Major behaviors: def Seq_Linear(seq_nums):\r   seq_nums = [seq_nums[x] - seq_n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""}
{"id": 553, "language": "Python", "requirement": "Write a function to convert the given tuple to a floating-point number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `65ca3c`\n   b. Major behaviors: def tuple_to_float(test_tup):\r   res = float('.'.join(str(el...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res)"}
{"id": 554, "language": "Python", "requirement": "Write a python function to find odd numbers from a mixed list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `938120`\n   b. Major behaviors: def Split(list): \r     od_li = [] \r     for i in list:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"}
{"id": 555, "language": "Python", "requirement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `40af6c`\n   b. Major behaviors: def difference(n) :  \r     S = (n*(n + 1))//2;  \r     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;"}
{"id": 556, "language": "Python", "requirement": "Write a python function to count the pairs with xor as an odd number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `82d81d`\n   b. Major behaviors: def find_Odd_Pair(A,N) : \r     oddPair = 0\r     for i in ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair"}
{"id": 557, "language": "Python", "requirement": "Write a function to toggle characters case in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5f9191`\n   b. Major behaviors: def toggle_string(string):\r  string1 = string.swapcase()\r  r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"}
{"id": 558, "language": "Python", "requirement": "Write a python function to find the digit distance between two integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `56f745`\n   b. Major behaviors: def digit_distance_nums(n1, n2):\r          return sum(map(in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"}
{"id": 559, "language": "Python", "requirement": "Write a function to find the largest sum of contiguous subarray in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `994061`\n   b. Major behaviors: def max_sub_array_sum(a, size):\r   max_so_far = 0\r   max_end...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"}
{"id": 560, "language": "Python", "requirement": "Write a function to find the union of elements of the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2119e4`\n   b. Major behaviors: def union_elements(test_tup1, test_tup2):\r   res = tuple(set...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res)"}
{"id": 561, "language": "Python", "requirement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e7a180`\n   b. Major behaviors: def assign_elements(test_list):\r   res = dict()\r   for key,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res)"}
{"id": 562, "language": "Python", "requirement": "Write a python function to find the maximum length of sublist.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5c0f13`\n   b. Major behaviors: def Find_Max_Length(lst):  \r     maxLength = max(len(x) for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength"}
{"id": 563, "language": "Python", "requirement": "Write a function to extract values between quotation marks of a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e44dcd`\n   b. Major behaviors: import re\r def extract_values(text):\r  return (re.findall(r'...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"}
{"id": 564, "language": "Python", "requirement": "Write a python function to count unequal element pairs from the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7d8957`\n   b. Major behaviors: def count_Pairs(arr,n): \r     cnt = 0; \r     for i in range(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt;"}
{"id": 565, "language": "Python", "requirement": "Write a python function to split a string into characters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `62adaa`\n   b. Major behaviors: def split(word): \r     return [char for char in word]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def split(word): \r\n    return [char for char in word]"}
{"id": 566, "language": "Python", "requirement": "Write a function to get the sum of a non-negative integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cb97d4`\n   b. Major behaviors: def sum_digits(n):\r   if n == 0:\r     return 0\r   else:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"}
{"id": 567, "language": "Python", "requirement": "Write a function to check whether a specified list is sorted or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0e0bdd`\n   b. Major behaviors: def issort_list(list1):\r     result = all(list1[i] <= list1[...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"}
{"id": 568, "language": "Python", "requirement": "Write a function to create a list of empty dictionaries.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a0df53`\n   b. Major behaviors: def empty_list(length):\r  empty_list = [{} for _ in range(le...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"}
{"id": 569, "language": "Python", "requirement": "Write a function to sort each sublist of strings in a given list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `aa26b5`\n   b. Major behaviors: def sort_sublists(list1):\r     result = list(map(sorted,list...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"}
{"id": 570, "language": "Python", "requirement": "Write a function to remove words from a given list of strings containing a character or string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1bedf9`\n   b. Major behaviors: def remove_words(list1, charlist):\r     new_list = []\r     f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"}
{"id": 571, "language": "Python", "requirement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `73c10a`\n   b. Major behaviors: def max_sum_pair_diff_lessthan_K(arr, N, K): \r \tarr.sort()...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"}
{"id": 572, "language": "Python", "requirement": "Write a python function to remove two duplicate numbers from a given number of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `68c218`\n   b. Major behaviors: def two_unique_nums(nums):\r   return [i for i in nums if num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"}
{"id": 573, "language": "Python", "requirement": "Write a python function to calculate the product of the unique numbers of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `abe76c`\n   b. Major behaviors: def unique_product(list_data):\r     temp = list(set(list_dat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"}
{"id": 574, "language": "Python", "requirement": "Write a function to find the surface area of a cylinder.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9294e3`\n   b. Major behaviors: def surfacearea_cylinder(r,h):\r   surfacearea=((2*3.1415*r*r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"}
{"id": 575, "language": "Python", "requirement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d19d21`\n   b. Major behaviors: def count_no (A,N,L,R): \r     count = 0\r     for i in range...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i)"}
{"id": 576, "language": "Python", "requirement": "Write a python function to check whether an array is subarray of another or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `814da2`\n   b. Major behaviors: def is_Sub_Array(A,B,n,m): \r     i = 0; j = 0; \r     while (...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False;"}
{"id": 577, "language": "Python", "requirement": "Write a python function to find the last digit in factorial of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `54d60f`\n   b. Major behaviors: def last_Digit_Factorial(n): \r     if (n == 0): return 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"}
{"id": 578, "language": "Python", "requirement": "Write a function to interleave lists of the same length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `58b3e0`\n   b. Major behaviors: def interleave_lists(list1,list2,list3):\r     result = [el f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"}
{"id": 579, "language": "Python", "requirement": "Write a function to find the dissimilar elements in the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `046c3e`\n   b. Major behaviors: def find_dissimilar(test_tup1, test_tup2):\r   res = tuple(se...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res)"}
{"id": 580, "language": "Python", "requirement": "Write a function to extract the even elements in the nested mixed tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c97534`\n   b. Major behaviors: def even_ele(test_tuple, even_fnc): \r \tres = tuple() \r \tfor...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res)"}
{"id": 581, "language": "Python", "requirement": "Write a python function to find the surface area of the square pyramid.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `01b7a0`\n   b. Major behaviors: def surface_Area(b,s): \r     return 2 * b * s + pow(b,2)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2)"}
{"id": 582, "language": "Python", "requirement": "Write a function to check if a dictionary is empty or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `290eb3`\n   b. Major behaviors: def my_dict(dict1):\r   if bool(dict1):\r      return False...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"}
{"id": 583, "language": "Python", "requirement": "Write a function for nth catalan number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9f6bf2`\n   b. Major behaviors: def catalan_number(num):\r     if num <=1:\r          return 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"}
{"id": 584, "language": "Python", "requirement": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bf1a3f`\n   b. Major behaviors: import re\r def find_adverbs(text):\r   for m in re.finditer(r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"}
{"id": 585, "language": "Python", "requirement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cb31a3`\n   b. Major behaviors: import heapq\r def expensive_items(items,n):\r   expensive_ite...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"}
{"id": 586, "language": "Python", "requirement": "Write a python function to split the array and add the first part to the end.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1c00fc`\n   b. Major behaviors: def split_Arr(a,n,k):  \r    b = a[:k] \r    return (a[k::]+b[...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::])"}
{"id": 587, "language": "Python", "requirement": "Write a function to convert a list to a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b53c3b`\n   b. Major behaviors: def list_tuple(listx):\r   tuplex = tuple(listx)\r   return tu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"}
{"id": 588, "language": "Python", "requirement": "Write a python function to find the difference between largest and smallest value in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `04c82a`\n   b. Major behaviors: def big_diff(nums):\r      diff= max(nums)-min(nums)\r      re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"}
{"id": 589, "language": "Python", "requirement": "Write a function to find perfect squares between two given numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3ef41d`\n   b. Major behaviors: def perfect_squares(a, b):\r     lists=[]\r     for i in range...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"}
{"id": 590, "language": "Python", "requirement": "Write a function to convert polar coordinates to rectangular coordinates.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ae8ab1`\n   b. Major behaviors: import cmath\r def polar_rect(x,y):\r  cn = complex(x,y)\r  cn=...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"}
{"id": 591, "language": "Python", "requirement": "Write a python function to interchange the first and last elements in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dbf822`\n   b. Major behaviors: def swap_List(newList): \r     size = len(newList) \r     temp...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList"}
{"id": 592, "language": "Python", "requirement": "Write a python function to find sum of product of binomial co-efficients.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ced14b`\n   b. Major behaviors: def binomial_Coeff(n,k): \r     C = [0] * (k + 1); \r     C[0]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1);"}
{"id": 593, "language": "Python", "requirement": "Write a function to remove leading zeroes from an ip address.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `924d6e`\n   b. Major behaviors: import re\r def removezero_ip(ip):\r  string = re.sub('\\.[0]*'...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string"}
{"id": 594, "language": "Python", "requirement": "Write a function to find the difference of first even and odd number of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bc880c`\n   b. Major behaviors: def diff_even_odd(list1):\r     first_even = next((el for el...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"}
{"id": 595, "language": "Python", "requirement": "Write a python function to count minimum number of swaps required to convert one binary string to another.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0d1c28`\n   b. Major behaviors: def min_Swaps(str1,str2) : \r     count = 0\r     for i in ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\")"}
{"id": 596, "language": "Python", "requirement": "Write a function to find the size of the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `75ef65`\n   b. Major behaviors: import sys \r def tuple_size(tuple_list):\r   return (sys.gets...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list))"}
{"id": 597, "language": "Python", "requirement": "Write a function to find kth element from the given two sorted arrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4c9273`\n   b. Major behaviors: def find_kth(arr1, arr2, m, n, k):\r \tsorted1 = [0] * (m + n)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"}
{"id": 598, "language": "Python", "requirement": "Write a function to check whether the given number is armstrong or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `80fdca`\n   b. Major behaviors: def armstrong_number(number):\r  sum = 0\r  times = 0\r  temp =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"}
{"id": 599, "language": "Python", "requirement": "Write a function to find sum and average of first n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `59f596`\n   b. Major behaviors: def sum_average(number):\r  total = 0\r  for value in range(1,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"}
{"id": 600, "language": "Python", "requirement": "Write a python function to check whether the given number is even or not using bitwise operator.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f98b99`\n   b. Major behaviors: def is_Even(n) : \r     if (n^1 == n+1) :\r         return Tru...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False;"}
{"id": 601, "language": "Python", "requirement": "Write a function to find the longest chain which can be formed from the given set of pairs.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `239876`\n   b. Major behaviors: class Pair(object): \r \tdef __init__(self, a, b): \r \t\tself.a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"}
{"id": 602, "language": "Python", "requirement": "Write a python function to find the first repeated character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5de555`\n   b. Major behaviors: def first_repeated_char(str1):\r   for index,c in enumerate(s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""}
{"id": 603, "language": "Python", "requirement": "Write a function to get a lucid number smaller than or equal to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9d7bd1`\n   b. Major behaviors: def get_ludic(n):\r \tludics = []\r \tfor i in range(1, n + 1):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"}
{"id": 604, "language": "Python", "requirement": "Write a function to reverse words in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8bc606`\n   b. Major behaviors: def reverse_words(s):\r         return ' '.join(reversed(s.sp...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"}
{"id": 605, "language": "Python", "requirement": "Write a function to check if the given integer is a prime number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a42048`\n   b. Major behaviors: def prime_num(num):\r   if num >=1:\r    for i in range(2, num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"}
{"id": 606, "language": "Python", "requirement": "Write a function to convert degrees to radians.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6479e5`\n   b. Major behaviors: import math\r def radian_degree(degree):\r  radian = degree*(m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"}
{"id": 607, "language": "Python", "requirement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b29b6c`\n   b. Major behaviors: import re\r pattern = 'fox'\r text = 'The quick brown fox jump...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"}
{"id": 608, "language": "Python", "requirement": "Write a python function to find nth bell number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `61a138`\n   b. Major behaviors: def bell_Number(n): \r     bell = [[0 for i in range(n+1)] fo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0]"}
{"id": 609, "language": "Python", "requirement": "Write a python function to find minimum possible value for the given periodic function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a48b3f`\n   b. Major behaviors: def floor_Min(A,B,N):\r     x = max(B - 1,N)\r     return (A*x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"}
{"id": 610, "language": "Python", "requirement": "Write a python function to remove the k'th element from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c553ec`\n   b. Major behaviors: def remove_kth_element(list1, L):\r     return  list1[:L-1] +...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"}
{"id": 611, "language": "Python", "requirement": "Write a function to find the maximum of nth column from the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `03cb56`\n   b. Major behaviors: def max_of_nth(test_list, N):\r   res = max([sub[N] for sub i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res)"}
{"id": 612, "language": "Python", "requirement": "Write a python function to merge the first and last elements separately in a list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4875f8`\n   b. Major behaviors: def merge(lst):  \r     return [list(ele) for ele in list(zip...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))]"}
{"id": 613, "language": "Python", "requirement": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1e7465`\n   b. Major behaviors: def maximum_value(test_list):\r   res = [(key, max(lst)) for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res)"}
{"id": 614, "language": "Python", "requirement": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a29a6f`\n   b. Major behaviors: def cummulative_sum(test_list):\r   res = sum(map(sum, test_l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"}
{"id": 615, "language": "Python", "requirement": "Write a function to find average value of the numbers in a given tuple of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7ea89c`\n   b. Major behaviors: def average_tuple(nums):\r     result = [sum(x) / len(x) for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"}
{"id": 616, "language": "Python", "requirement": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `222449`\n   b. Major behaviors: def tuple_modulo(test_tup1, test_tup2):\r   res = tuple(ele1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res)"}
{"id": 617, "language": "Python", "requirement": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ca2ed3`\n   b. Major behaviors: def min_Jumps(a, b, d): \r     temp = a \r     a = min(a, b)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"}
{"id": 618, "language": "Python", "requirement": "Write a function to divide two lists using map and lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `04c295`\n   b. Major behaviors: def div_list(nums1,nums2):\r   result = map(lambda x, y: x /...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"}
{"id": 619, "language": "Python", "requirement": "Write a function to move all the numbers in it to the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ee215a`\n   b. Major behaviors: def move_num(test_str):\r   res = ''\r   dig = ''\r   for ele i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res)"}
{"id": 620, "language": "Python", "requirement": "Write a function to find the largest subset where each pair is divisible.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `97e31b`\n   b. Major behaviors: def largest_subset(a, n):\r \tdp = [0 for i in range(n)]\r \tdp[...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"}
{"id": 621, "language": "Python", "requirement": "Write a function to increment the numeric values in the given strings by k.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6c7a8f`\n   b. Major behaviors: def increment_numerics(test_list, K):\r   res = [str(int(ele)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res"}
{"id": 622, "language": "Python", "requirement": "Write a function to find the median of two sorted arrays of same size.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0f5003`\n   b. Major behaviors: def get_median(arr1, arr2, n):\r   i = 0\r   j = 0\r   m1 = -1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"}
{"id": 623, "language": "Python", "requirement": "Write a function to find the n-th power of individual elements in a list using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c4b935`\n   b. Major behaviors: def nth_nums(nums,n):\r  nth_nums = list(map(lambda x: x ** n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"}
{"id": 624, "language": "Python", "requirement": "Write a python function to convert the given string to upper case.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `891731`\n   b. Major behaviors: def is_upper(string):\r   return (string.upper())...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_upper(string):\r\n  return (string.upper())"}
{"id": 625, "language": "Python", "requirement": "Write a python function to interchange first and last elements in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0515d0`\n   b. Major behaviors: def swap_List(newList): \r     size = len(newList) \r     temp...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList"}
{"id": 626, "language": "Python", "requirement": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `69bc28`\n   b. Major behaviors: def triangle_area(r) :  \r     if r < 0 : \r         return -1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r"}
{"id": 627, "language": "Python", "requirement": "Write a python function to find the smallest missing number from the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `77a3e6`\n   b. Major behaviors: def find_First_Missing(array,start,end): \r     if (start > e...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid)"}
{"id": 628, "language": "Python", "requirement": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `baecc8`\n   b. Major behaviors: MAX=1000;\r def replace_spaces(string):\r   string=string.stri...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"}
{"id": 629, "language": "Python", "requirement": "Write a python function to find even numbers from a mixed list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9836af`\n   b. Major behaviors: def Split(list): \r     ev_li = [] \r     for i in list:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"}
{"id": 630, "language": "Python", "requirement": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e63386`\n   b. Major behaviors: def adjac(ele, sub = []): \r   if not ele: \r      yield sub...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res)"}
{"id": 631, "language": "Python", "requirement": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8d68fb`\n   b. Major behaviors: import re\r text = 'Python Exercises'\r def replace_spaces(tex...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"}
{"id": 632, "language": "Python", "requirement": "Write a python function to move all zeroes to the end of the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a3536e`\n   b. Major behaviors: def move_zero(num_list):\r     a = [0 for i in range(num_list...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"}
{"id": 633, "language": "Python", "requirement": "Write a python function to find the sum of xor of all pairs of numbers in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d29846`\n   b. Major behaviors: def pair_OR_Sum(arr,n) : \r     ans = 0 \r     for i in range(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans"}
{"id": 634, "language": "Python", "requirement": "Write a python function to find the sum of fourth power of first n even natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a64632`\n   b. Major behaviors: def even_Power_Sum(n): \r     sum = 0; \r     for i in range(1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum;"}
{"id": 635, "language": "Python", "requirement": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `db2a13`\n   b. Major behaviors: import heapq as hq\r def heap_sort(iterable):\r     h = []...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"}
{"id": 636, "language": "Python", "requirement": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7ff917`\n   b. Major behaviors: def Check_Solution(a,b,c): \r     if (a == c): \r         retu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\");"}
{"id": 637, "language": "Python", "requirement": "Write a function to check whether the given amount has no profit and no loss", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d5ea94`\n   b. Major behaviors: def noprofit_noloss(actual_cost,sale_amount): \r   if(sale_am...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"}
{"id": 638, "language": "Python", "requirement": "Write a function to calculate wind chill index.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7364e0`\n   b. Major behaviors: import math\r def wind_chill(v,t):\r  windchill = 13.12 + 0.62...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"}
{"id": 639, "language": "Python", "requirement": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `525b8a`\n   b. Major behaviors: def sample_nam(sample_names):\r   sample_names=list(filter(la...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"}
{"id": 640, "language": "Python", "requirement": "Write a function to remove the parenthesis area in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `76b88c`\n   b. Major behaviors: import re\r def remove_parenthesis(items):\r  for item in item...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"}
{"id": 641, "language": "Python", "requirement": "Write a function to find the nth nonagonal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `795829`\n   b. Major behaviors: def is_nonagonal(n): \r \treturn int(n * (7 * n - 5) / 2)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2)"}
{"id": 642, "language": "Python", "requirement": "Write a function to remove similar rows from the given tuple matrix.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ac3a06`\n   b. Major behaviors: def remove_similar_row(test_list):\r   res = set(sorted([tupl...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res)"}
{"id": 643, "language": "Python", "requirement": "Write a function that matches a word containing 'z', not at the start or end of the word.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0b9481`\n   b. Major behaviors: import re\r def text_match_wordz_middle(text):\r         patte...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"id": 644, "language": "Python", "requirement": "Write a python function to reverse an array upto a given position.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fabaed`\n   b. Major behaviors: def reverse_Array_Upto_K(input, k): \r   return (input[k-1::-...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:])"}
{"id": 645, "language": "Python", "requirement": "Write a function to find the product of it\u2019s kth index in the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6ab8fd`\n   b. Major behaviors: def get_product(val) : \r \tres = 1\r \tfor ele in val: \r \t\tres...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res)"}
{"id": 646, "language": "Python", "requirement": "Write a python function to count number of cubes of size k in a cube of size n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `38f6ac`\n   b. Major behaviors: def No_of_cubes(N,K):\r     No = 0\r     No = (N - K + 1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"}
{"id": 647, "language": "Python", "requirement": "Write a function to split a string at uppercase letters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bfcc99`\n   b. Major behaviors: import re\r def split_upperstring(text):\r  return (re.findall...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"}
{"id": 648, "language": "Python", "requirement": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c44582`\n   b. Major behaviors: from itertools import zip_longest, chain, tee\r def exchange_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"}
{"id": 649, "language": "Python", "requirement": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `470338`\n   b. Major behaviors: def sum_Range_list(nums, m, n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range"}
{"id": 650, "language": "Python", "requirement": "Write a python function to check whether the given two arrays are equal or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ab74c0`\n   b. Major behaviors: def are_Equal(arr1,arr2,n,m):\r     if (n != m):\r         ret...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"}
{"id": 651, "language": "Python", "requirement": "Write a function to check if one tuple is a subset of another tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0747eb`\n   b. Major behaviors: def check_subset(test_tup1, test_tup2):\r   res = set(test_tu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res)"}
{"id": 652, "language": "Python", "requirement": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `42d96f`\n   b. Major behaviors: def matrix_to_list(test_list):\r   temp = [ele for sub in tes...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"}
{"id": 653, "language": "Python", "requirement": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2a5300`\n   b. Major behaviors: from collections import defaultdict\r def grouping_dictionary...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"}
{"id": 654, "language": "Python", "requirement": "Write a function to find the perimeter of a rectangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `90e525`\n   b. Major behaviors: def rectangle_perimeter(l,b):\r   perimeter=2*(l+b)\r   return...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"}
{"id": 655, "language": "Python", "requirement": "Write a python function to find the sum of fifth power of n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `707069`\n   b. Major behaviors: def fifth_Power_Sum(n) : \r     sm = 0 \r     for i in range(1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm"}
{"id": 656, "language": "Python", "requirement": "Write a python function to find the minimum sum of absolute differences of two arrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `996429`\n   b. Major behaviors: def find_Min_Sum(a,b,n): \r     a.sort() \r     b.sort()...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"}
{"id": 657, "language": "Python", "requirement": "Write a python function to find the first digit in factorial of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c325fb`\n   b. Major behaviors: import math \r def first_Digit(n) : \r     fact = 1\r     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact)"}
{"id": 658, "language": "Python", "requirement": "Write a function to find the item with maximum occurrences in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `53649a`\n   b. Major behaviors: def max_occurrences(list1):\r     max_val = 0\r     result = l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"}
{"id": 659, "language": "Python", "requirement": "Write a python function to print duplicants from a list of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f1ceb9`\n   b. Major behaviors: def Repeat(x): \r     _size = len(x) \r     repeated = []...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated"}
{"id": 660, "language": "Python", "requirement": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d34d6d`\n   b. Major behaviors: def find_Points(l1,r1,l2,r2): \r     x = min(l1,l2) if (l1 !=...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"}
{"id": 661, "language": "Python", "requirement": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `340244`\n   b. Major behaviors: def max_sum_of_three_consecutive(arr, n): \r \tsum = [0 for k...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"}
{"id": 662, "language": "Python", "requirement": "Write a function to sort a list in a dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `64438d`\n   b. Major behaviors: def sorted_dict(dict1):\r   sorted_dict = {x: sorted(y) for x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"}
{"id": 663, "language": "Python", "requirement": "Write a function to find the largest possible value of k such that k modulo x is y.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a0ea68`\n   b. Major behaviors: import sys \r def find_max_val(n, x, y): \r \tans = -sys.maxsiz...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1)"}
{"id": 664, "language": "Python", "requirement": "Write a python function to find the average of even numbers till a given even number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f42942`\n   b. Major behaviors: def average_Even(n) : \r     if (n% 2!= 0) : \r         return...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count"}
{"id": 665, "language": "Python", "requirement": "Write a python function to shift first element to the end of given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `aea7f5`\n   b. Major behaviors: def move_last(num_list):\r     a = [num_list[0] for i in rang...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"}
{"id": 666, "language": "Python", "requirement": "Write a function to count occurrence of a character in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c8fc9e`\n   b. Major behaviors: def count_char(string,char):\r  count = 0\r  for i in range(le...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"}
{"id": 667, "language": "Python", "requirement": "Write a python function to count number of vowels in the string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `882ae3`\n   b. Major behaviors: def Check_Vow(string, vowels): \r     final = [each for each...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final))"}
{"id": 668, "language": "Python", "requirement": "Write a python function to replace multiple occurence of character by single.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8bb452`\n   b. Major behaviors: import re \r def replace(string, char): \r     pattern = char...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string"}
{"id": 669, "language": "Python", "requirement": "Write a function to check whether the given ip address is valid or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `877183`\n   b. Major behaviors: import re \r regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\")"}
{"id": 670, "language": "Python", "requirement": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ac8009`\n   b. Major behaviors: def decreasing_trend(nums):\r     if (sorted(nums)== nums):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}
{"id": 671, "language": "Python", "requirement": "Write a python function to set the right most unset bit.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6fbd50`\n   b. Major behaviors: import math \r def get_Pos_Of_Right_most_Set_Bit(n): \r     re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n)"}
{"id": 672, "language": "Python", "requirement": "Write a function to find maximum of three numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f2b63f`\n   b. Major behaviors: def max_of_three(num1,num2,num3): \r     if (num1 >= num2) an...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"}
{"id": 673, "language": "Python", "requirement": "Write a python function to convert a list of multiple integers into a single integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `305496`\n   b. Major behaviors: def convert(list): \r     s = [str(i) for i in list] \r     re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res)"}
{"id": 674, "language": "Python", "requirement": "Write a function to remove duplicate words from a given string using collections module.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d5a7d3`\n   b. Major behaviors: from collections import OrderedDict\r def remove_duplicate(st...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"}
{"id": 675, "language": "Python", "requirement": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3e0d9d`\n   b. Major behaviors: def sum_nums(x, y,m,n):\r     sum_nums= x + y\r     if sum_num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"}
{"id": 676, "language": "Python", "requirement": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e0e277`\n   b. Major behaviors: import re\r def remove_extra_char(text1):\r   pattern = re.com...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"}
{"id": 677, "language": "Python", "requirement": "Write a function to check if the triangle is valid or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ce23cb`\n   b. Major behaviors: def validity_triangle(a,b,c):\r  total = a + b + c\r  if total...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"}
{"id": 678, "language": "Python", "requirement": "Write a python function to remove spaces from a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `08a537`\n   b. Major behaviors: def remove_spaces(str1):\r   str1 = str1.replace(' ','')\r   r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"}
{"id": 679, "language": "Python", "requirement": "Write a function to access dictionary key\u2019s element by index.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `20da1a`\n   b. Major behaviors: def access_key(ditionary,key):\r   return list(ditionary)[key...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"}
{"id": 680, "language": "Python", "requirement": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b0ec71`\n   b. Major behaviors: def increasing_trend(nums):\r     if (sorted(nums)== nums):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"}
{"id": 681, "language": "Python", "requirement": "Write a python function to find the smallest prime divisor of a number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f7c2ce`\n   b. Major behaviors: def smallest_Divisor(n): \r     if (n % 2 == 0): \r         re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n;"}
{"id": 682, "language": "Python", "requirement": "Write a function to multiply two lists using map and lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dc78b4`\n   b. Major behaviors: def mul_list(nums1,nums2):\r   result = map(lambda x, y: x *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"}
{"id": 683, "language": "Python", "requirement": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `06e055`\n   b. Major behaviors: def sum_Square(n) : \r     i = 1 \r     while i*i <= n :...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"}
{"id": 684, "language": "Python", "requirement": "Write a python function to count occurences of a character in a repeated string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0e3202`\n   b. Major behaviors: def count_Char(str,x): \r     count = 0\r     for i in range(l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count"}
{"id": 685, "language": "Python", "requirement": "Write a python function to find sum of prime numbers between 1 to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `84196b`\n   b. Major behaviors: def sum_Of_Primes(n): \r     prime = [True] * (n + 1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"}
{"id": 686, "language": "Python", "requirement": "Write a function to find the frequency of each element in the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2185d8`\n   b. Major behaviors: from collections import defaultdict \r def freq_element(test_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res)))"}
{"id": 687, "language": "Python", "requirement": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d71d2a`\n   b. Major behaviors: def recur_gcd(a, b):\r \tlow = min(a, b)\r \thigh = max(a, b)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"}
{"id": 688, "language": "Python", "requirement": "Write a function to get the length of a complex number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `58df4f`\n   b. Major behaviors: import cmath\r def len_complex(a,b):\r   cn=complex(a,b)\r   le...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"}
{"id": 689, "language": "Python", "requirement": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `24e023`\n   b. Major behaviors: def min_jumps(arr, n):\r \tjumps = [0 for i in range(n)]\r \tif...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"}
{"id": 690, "language": "Python", "requirement": "Write a function to multiply consecutive numbers of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8482e5`\n   b. Major behaviors: def mul_consecutive_nums(nums):\r     result = [b*a for a, b...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"}
{"id": 691, "language": "Python", "requirement": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b2da78`\n   b. Major behaviors: from itertools import groupby \r def group_element(test_list)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)"}
{"id": 692, "language": "Python", "requirement": "Write a python function to find the last two digits in factorial of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0a5005`\n   b. Major behaviors: def last_Two_Digits(N): \r     if (N >= 10): \r         return...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac)"}
{"id": 693, "language": "Python", "requirement": "Write a function to remove multiple spaces in a string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a7d451`\n   b. Major behaviors: import re\r def remove_multiple_spaces(text1):\r   return (re....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"}
{"id": 694, "language": "Python", "requirement": "Write a function to extract unique values from the given dictionary values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `45ca9f`\n   b. Major behaviors: def extract_unique(test_dict):\r   res = list(sorted({ele for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"}
{"id": 695, "language": "Python", "requirement": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1e7434`\n   b. Major behaviors: def check_greater(test_tup1, test_tup2):\r   res = all(x < y...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 696, "language": "Python", "requirement": "Write a function to zip two given lists of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `94e952`\n   b. Major behaviors: def zip_list(list1,list2):  \r  result = list(map(list.__add_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"}
{"id": 697, "language": "Python", "requirement": "Write a function to find number of even elements in the given list using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4de079`\n   b. Major behaviors: def count_even(array_nums):\r    count_even = len(list(filter...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"}
{"id": 698, "language": "Python", "requirement": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4f9f7d`\n   b. Major behaviors: def sort_dict_item(test_dict):\r   res = {key: test_dict[key]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res)"}
{"id": 699, "language": "Python", "requirement": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d586b5`\n   b. Major behaviors: def min_Swaps(str1,str2) : \r     count = 0\r     for i in ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\")"}
{"id": 700, "language": "Python", "requirement": "Write a function to count the number of elements in a list which are within a specific range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c3573b`\n   b. Major behaviors: def count_range_in_list(li, min, max):\r \tctr = 0\r \tfor x in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"}
{"id": 701, "language": "Python", "requirement": "Write a function to find the equilibrium index of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2d6ab3`\n   b. Major behaviors: def equilibrium_index(arr):\r   total_sum = sum(arr)\r   left_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"}
{"id": 702, "language": "Python", "requirement": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `246056`\n   b. Major behaviors: def find_ind(key, i, n, \r \t\t\tk, arr):\r \tind = -1\r \tstart = i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"}
{"id": 703, "language": "Python", "requirement": "Write a function to check whether the given key is present in the dictionary or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `673eb5`\n   b. Major behaviors: def is_key_present(d,x):\r   if x in d:\r     return True\r   e...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"}
{"id": 704, "language": "Python", "requirement": "Write a function to calculate the harmonic sum of n-1.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5c7331`\n   b. Major behaviors: def harmonic_sum(n):\r   if n < 2:\r     return 1\r   else:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"}
{"id": 705, "language": "Python", "requirement": "Write a function to sort a list of lists by length and value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `162bfb`\n   b. Major behaviors: def sort_sublists(list1):\r       list1.sort()  \r       list1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"}
{"id": 706, "language": "Python", "requirement": "Write a function to find whether an array is subset of another array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8c24f0`\n   b. Major behaviors: def is_subset(arr1, m, arr2, n): \r \thashset = set() \r \tfor i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True"}
{"id": 707, "language": "Python", "requirement": "Write a python function to count the total set bits from 1 to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `de0d20`\n   b. Major behaviors: def count_Set_Bits(n) :  \r     n += 1; \r     powerOf2 = 2;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;"}
{"id": 708, "language": "Python", "requirement": "Write a python function to convert a string to a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f09116`\n   b. Major behaviors: def Convert(string): \r     li = list(string.split(\" \"))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li"}
{"id": 709, "language": "Python", "requirement": "Write a function to count unique keys for each value present in the tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e45d47`\n   b. Major behaviors: from collections import defaultdict \r def get_unique(test_li...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict))"}
{"id": 710, "language": "Python", "requirement": "Write a function to access the initial and last data of the given tuple record.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `908384`\n   b. Major behaviors: def front_and_rear(test_tup):\r   res = (test_tup[0], test_tu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res)"}
{"id": 711, "language": "Python", "requirement": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `368633`\n   b. Major behaviors: def product_Equal(n): \r     if n < 10: \r         return Fals...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"}
{"id": 712, "language": "Python", "requirement": "Write a function to remove duplicates from a list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `993207`\n   b. Major behaviors: import itertools\r def remove_duplicate(list1):\r  list.sort(l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"}
{"id": 713, "language": "Python", "requirement": "Write a function to check if the given tuple contains all valid values or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `91cefe`\n   b. Major behaviors: def check_valid(test_tup):\r   res = not any(map(lambda ele:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res)"}
{"id": 714, "language": "Python", "requirement": "Write a python function to count the number of distinct power of prime factor of given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d0fc32`\n   b. Major behaviors: def count_Fac(n):  \r     m = n \r     count = 0\r     i = 2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count"}
{"id": 715, "language": "Python", "requirement": "Write a function to convert the given string of integers into a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2e8bd4`\n   b. Major behaviors: def str_to_tuple(test_str):\r   res = tuple(map(int, test_str...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res)"}
{"id": 716, "language": "Python", "requirement": "Write a function to find the perimeter of a rombus.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8d4849`\n   b. Major behaviors: def rombus_perimeter(a):\r   perimeter=4*a\r   return perimete...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"}
{"id": 717, "language": "Python", "requirement": "Write a function to calculate the standard deviation.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ad902e`\n   b. Major behaviors: import math\r import sys\r def sd_calc(data):\r     n = len(dat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"}
{"id": 718, "language": "Python", "requirement": "Write a function to create a list taking alternate elements from another given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4b4c15`\n   b. Major behaviors: def alternate_elements(list1):\r     result=[]\r     for item...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result"}
{"id": 719, "language": "Python", "requirement": "Write a function that matches a string that has an a followed by zero or more b's.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `82dce5`\n   b. Major behaviors: import re\r def text_match(text):\r         patterns = 'ab*?'...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"id": 720, "language": "Python", "requirement": "Write a function to add a dictionary to the tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e7465`\n   b. Major behaviors: def add_dict_to_tuple(test_tup, test_dict):\r   test_tup = li...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup)"}
{"id": 721, "language": "Python", "requirement": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `849902`\n   b. Major behaviors: M = 100\r def maxAverageOfPath(cost, N): \r \tdp = [[0 for i in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"}
{"id": 722, "language": "Python", "requirement": "Write a function to filter the height and width of students which are stored in a dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `56d9d2`\n   b. Major behaviors: def filter_data(students,h,w):\r     result = {k: s for k, s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result"}
{"id": 723, "language": "Python", "requirement": "Write a function to count the same pair in two given lists using map function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `adae29`\n   b. Major behaviors: from operator import eq\r def count_same_pair(nums1, nums2):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"}
{"id": 724, "language": "Python", "requirement": "Write a function to calculate the sum of all digits of the base to the specified power.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7a674c`\n   b. Major behaviors: def power_base_sum(base, power):\r     return sum([int(i) for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"}
{"id": 725, "language": "Python", "requirement": "Write a function to extract values between quotation marks of the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c0a9f1`\n   b. Major behaviors: import re\r def extract_quotation(text1):\r   return (re.finda...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"}
{"id": 726, "language": "Python", "requirement": "Write a function to multiply the adjacent elements of the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5ee864`\n   b. Major behaviors: def multiply_elements(test_tup):\r   res = tuple(i * j for i,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res)"}
{"id": 727, "language": "Python", "requirement": "Write a function to remove all characters except letters and numbers using regex", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3af6e8`\n   b. Major behaviors: import re \r def remove_char(S):\r   result = re.sub('[\\W_]+',...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"}
{"id": 728, "language": "Python", "requirement": "Write a function to sum elements in two lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `962841`\n   b. Major behaviors: def sum_list(lst1,lst2):\r   res_list = [lst1[i] + lst2[i] fo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"}
{"id": 729, "language": "Python", "requirement": "Write a function to add two lists using map and lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e2e524`\n   b. Major behaviors: def add_list(nums1,nums2):\r   result = map(lambda x, y: x +...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"}
{"id": 730, "language": "Python", "requirement": "Write a function to remove consecutive duplicates of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1b2d58`\n   b. Major behaviors: from itertools import groupby\r def consecutive_duplicates(nu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)]"}
{"id": 731, "language": "Python", "requirement": "Write a function to find the lateral surface area of a cone.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b8ed5e`\n   b. Major behaviors: import math\r def lateralsurface_cone(r,h):\r   l = math.sqrt(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"}
{"id": 732, "language": "Python", "requirement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c3e61f`\n   b. Major behaviors: import re\r def replace_specialchar(text):\r  return (re.sub(\"...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))"}
{"id": 733, "language": "Python", "requirement": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2dd1be`\n   b. Major behaviors: def find_first_occurrence(A, x):\r     (left, right) = (0, le...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"}
{"id": 734, "language": "Python", "requirement": "Write a python function to find sum of products of all possible subarrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `007e81`\n   b. Major behaviors: def sum_Of_Subarray_Prod(arr,n):\r     ans = 0\r     res = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"}
{"id": 735, "language": "Python", "requirement": "Write a python function to toggle bits of the number except the first and the last bit.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `888225`\n   b. Major behaviors: def set_middle_bits(n):  \r     n |= n >> 1; \r     n |= n >>...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n)"}
{"id": 736, "language": "Python", "requirement": "Write a function to locate the left insertion point for a specified value in sorted order.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fa21ac`\n   b. Major behaviors: import bisect\r def left_insertion(a, x):\r     i = bisect.bis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"}
{"id": 737, "language": "Python", "requirement": "Write a function to check whether the given string is starting with a vowel or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `45722d`\n   b. Major behaviors: import re \r regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r def check_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\")"}
{"id": 738, "language": "Python", "requirement": "Write a function to calculate the geometric sum of n-1.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `08b4a3`\n   b. Major behaviors: def geometric_sum(n):\r   if n < 0:\r     return 0\r   else:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"}
{"id": 739, "language": "Python", "requirement": "Write a python function to find the index of smallest triangular number with n digits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `75e551`\n   b. Major behaviors: import math \r def find_Index(n): \r     x = math.sqrt(2 * mat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x);"}
{"id": 740, "language": "Python", "requirement": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8e749c`\n   b. Major behaviors: def tuple_to_dict(test_tup):\r   res = dict(test_tup[idx : id...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res)"}
{"id": 741, "language": "Python", "requirement": "Write a python function to check whether all the characters are same or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fee80b`\n   b. Major behaviors: def all_Characters_Same(s) :\r     n = len(s)\r     for i in r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"}
{"id": 742, "language": "Python", "requirement": "Write a function to caluclate the area of a tetrahedron.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `16d0b2`\n   b. Major behaviors: import math\r def area_tetrahedron(side):\r   area = math.sqrt...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"}
{"id": 743, "language": "Python", "requirement": "Write a function to rotate a given list by specified number of items to the right direction.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `27dc56`\n   b. Major behaviors: def rotate_right(list1,m,n):\r   result =  list1[-(m):]+list1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"}
{"id": 744, "language": "Python", "requirement": "Write a function to check if the given tuple has any none value or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4d56bd`\n   b. Major behaviors: def check_none(test_tup):\r   res = any(map(lambda ele: ele i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res)"}
{"id": 745, "language": "Python", "requirement": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `56b56a`\n   b. Major behaviors: def divisible_by_digits(startnum, endnum):\r     return [n fo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"}
{"id": 746, "language": "Python", "requirement": "Write a function to find area of a sector.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dcebce`\n   b. Major behaviors: def sector_area(r,a):\r     pi=22/7\r     if a >= 360:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"}
{"id": 747, "language": "Python", "requirement": "Write a function to find the longest common subsequence for the given three string sequence.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2c8520`\n   b. Major behaviors: def lcs_of_three(X, Y, Z, m, n, o): \r \tL = [[[0 for i in ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"}
{"id": 748, "language": "Python", "requirement": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d74cba`\n   b. Major behaviors: import re\r def capital_words_spaces(str1):\r   return re.sub(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"}
{"id": 749, "language": "Python", "requirement": "Write a function to sort a given list of strings of numbers numerically.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6415c3`\n   b. Major behaviors: def sort_numeric_strings(nums_str):\r     result = [int(x) fo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"}
{"id": 750, "language": "Python", "requirement": "Write a function to add the given tuple to the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `df9bcd`\n   b. Major behaviors: def add_tuple(test_list, test_tup):\r   test_list += test_tup...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list)"}
{"id": 751, "language": "Python", "requirement": "Write a function to check if the given array represents min heap or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f488ab`\n   b. Major behaviors: def check_min_heap(arr, i):\r     if 2 * i + 2 > len(arr):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"}
{"id": 752, "language": "Python", "requirement": "Write a function to find the nth jacobsthal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `448d7e`\n   b. Major behaviors: def jacobsthal_num(n): \r \tdp = [0] * (n + 1) \r \tdp[0] = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"}
{"id": 753, "language": "Python", "requirement": "Write a function to find minimum k records from tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e83f32`\n   b. Major behaviors: def min_k(test_list, K):\r   res = sorted(test_list, key = la...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res)"}
{"id": 754, "language": "Python", "requirement": "Write a function to find common index elements from three lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f0eafd`\n   b. Major behaviors: def extract_index_list(l1, l2, l3):\r     result = []\r     fo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"}
{"id": 755, "language": "Python", "requirement": "Write a function to find the second smallest number in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `be620b`\n   b. Major behaviors: def second_smallest(numbers):\r   if (len(numbers)<2):\r     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1]"}
{"id": 756, "language": "Python", "requirement": "Write a function that matches a string that has an a followed by zero or one 'b'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e0ec1a`\n   b. Major behaviors: import re\r def text_match_zero_one(text):\r         patterns...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"id": 757, "language": "Python", "requirement": "Write a function to count the pairs of reverse strings in the given string list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5af9c1`\n   b. Major behaviors: def count_reverse_pairs(test_list):\r   res = sum([1 for idx...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"}
{"id": 758, "language": "Python", "requirement": "Write a function to count number of unique lists within a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ffc23a`\n   b. Major behaviors: def unique_sublists(list1):\r     result ={}\r     for l in  l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}
{"id": 759, "language": "Python", "requirement": "Write a function to check a decimal with a precision of 2.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e07fa0`\n   b. Major behaviors: def is_decimal(num):\r     import re\r     dnumre = re.compile...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"}
{"id": 760, "language": "Python", "requirement": "Write a python function to check whether an array contains only one distinct element or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0778ab`\n   b. Major behaviors: def unique_Element(arr,n):\r     s = set(arr)\r     if (len(s)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"}
{"id": 761, "language": "Python", "requirement": "Write a function to caluclate arc length of an angle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c01dbb`\n   b. Major behaviors: def arc_length(d,a):\r     pi=22/7\r     if a >= 360:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"}
{"id": 762, "language": "Python", "requirement": "Write a function to check whether the given month number contains 30 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0d6ddf`\n   b. Major behaviors: def check_monthnumber_number(monthnum3):\r   if(monthnum3==4...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"}
{"id": 763, "language": "Python", "requirement": "Write a python function to find the minimum difference between any two elements in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `61a1b8`\n   b. Major behaviors: def find_Min_Diff(arr,n): \r     arr = sorted(arr) \r     diff...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff"}
{"id": 764, "language": "Python", "requirement": "Write a python function to count numeric values in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8c92e6`\n   b. Major behaviors: def number_ctr(str):\r       number_ctr= 0\r       for i in ra...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"}
{"id": 765, "language": "Python", "requirement": "Write a function to find nth polite number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c8fa5c`\n   b. Major behaviors: import math \r def is_polite(n): \r \tn = n + 1\r \treturn (int)(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2)))"}
{"id": 766, "language": "Python", "requirement": "Write a function to iterate over all pairs of consecutive items in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `65d1d6`\n   b. Major behaviors: def pair_wise(l1):\r     temp = []\r     for i in range(len(l1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"}
{"id": 767, "language": "Python", "requirement": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ed9459`\n   b. Major behaviors: def get_Pairs_Count(arr,n,sum):\r     count = 0  \r     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"}
{"id": 768, "language": "Python", "requirement": "Write a python function to check for odd parity of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ad84c7`\n   b. Major behaviors: def check_Odd_Parity(x): \r     parity = 0\r     while (x != 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"}
{"id": 769, "language": "Python", "requirement": "Write a python function to get the difference between two lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a2fe45`\n   b. Major behaviors: def Diff(li1,li2):\r     return (list(list(set(li1)-set(li2))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))"}
{"id": 770, "language": "Python", "requirement": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0ea754`\n   b. Major behaviors: def odd_Num_Sum(n) : \r     j = 0\r     sm = 0\r     for i in r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm"}
{"id": 771, "language": "Python", "requirement": "Write a function to check if the given expression is balanced or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `02e750`\n   b. Major behaviors: from collections import deque\r def check_expression(exp):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"}
{"id": 772, "language": "Python", "requirement": "Write a function to remove all the words with k length in the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c2d6da`\n   b. Major behaviors: def remove_length(test_str, K):\r   temp = test_str.split()...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res)"}
{"id": 773, "language": "Python", "requirement": "Write a function to find the occurrence and position of the substrings within a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a9aff5`\n   b. Major behaviors: import re\r def occurance_substring(text,pattern):\r  for matc...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"}
{"id": 774, "language": "Python", "requirement": "Write a function to check if the string is a valid email address or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dafe33`\n   b. Major behaviors: import re \r regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\")"}
{"id": 775, "language": "Python", "requirement": "Write a python function to check whether every odd index contains odd numbers of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `428c6c`\n   b. Major behaviors: def odd_position(nums):\r \treturn all(nums[i]%2==i%2 for i in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"}
{"id": 776, "language": "Python", "requirement": "Write a function to count those characters which have vowels as their neighbors in the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0dd66d`\n   b. Major behaviors: def count_vowels(test_str):\r   res = 0\r   vow_list = ['a', '...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res)"}
{"id": 777, "language": "Python", "requirement": "Write a python function to find the sum of non-repeated elements in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `561e7e`\n   b. Major behaviors: def find_Sum(arr,n): \r     arr.sort() \r     sum = arr[0]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"}
{"id": 778, "language": "Python", "requirement": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e18cb6`\n   b. Major behaviors: from itertools import groupby\r def pack_consecutive_duplicat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"}
{"id": 779, "language": "Python", "requirement": "Write a function to count the number of unique lists within a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2b3dc5`\n   b. Major behaviors: def unique_sublists(list1):\r     result ={}\r     for l in li...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"}
{"id": 780, "language": "Python", "requirement": "Write a function to find the combinations of sums with tuples in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6c8f3b`\n   b. Major behaviors: from itertools import combinations \r def find_combinations(t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res)"}
{"id": 781, "language": "Python", "requirement": "Write a python function to check whether the count of divisors is even or odd.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `77639a`\n   b. Major behaviors: import math \r def count_Divisors(n) : \r     count = 0\r     f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\")"}
{"id": 782, "language": "Python", "requirement": "Write a python function to find the sum of all odd length subarrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a64b24`\n   b. Major behaviors: def Odd_Length_Sum(arr):\r     Sum = 0\r     l = len(arr)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"}
{"id": 783, "language": "Python", "requirement": "Write a function to convert rgb color to hsv color.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fefb5f`\n   b. Major behaviors: def rgb_to_hsv(r, g, b):\r     r, g, b = r/255.0, g/255.0, b/...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"}
{"id": 784, "language": "Python", "requirement": "Write a function to find the product of first even and odd number of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c2012a`\n   b. Major behaviors: def mul_even_odd(list1):\r     first_even = next((el for el i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"}
{"id": 785, "language": "Python", "requirement": "Write a function to convert tuple string to integer tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d0cf28`\n   b. Major behaviors: def tuple_str_int(test_str):\r   res = tuple(int(num) for num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res)"}
{"id": 786, "language": "Python", "requirement": "Write a function to locate the right insertion point for a specified value in sorted order.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fd0d84`\n   b. Major behaviors: import bisect\r def right_insertion(a, x):\r     i = bisect.bi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"}
{"id": 787, "language": "Python", "requirement": "Write a function that matches a string that has an a followed by three 'b'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `240c83`\n   b. Major behaviors: import re\r def text_match_three(text):\r         patterns = '...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"id": 788, "language": "Python", "requirement": "Write a function to create a new tuple from the given string and list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4b0886`\n   b. Major behaviors: def new_tuple(test_list, test_str):\r   res = tuple(test_list...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res)"}
{"id": 789, "language": "Python", "requirement": "Write a function to calculate the perimeter of a regular polygon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bfac75`\n   b. Major behaviors: from math import tan, pi\r def perimeter_polygon(s,l):\r   per...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"}
{"id": 790, "language": "Python", "requirement": "Write a python function to check whether every even index contains even numbers of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0360bd`\n   b. Major behaviors: def even_position(nums):\r \treturn all(nums[i]%2==i%2 for i i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"}
{"id": 791, "language": "Python", "requirement": "Write a function to remove the nested record from the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8c33d4`\n   b. Major behaviors: def remove_nested(test_tup):\r   res = tuple()\r   for count,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res)"}
{"id": 792, "language": "Python", "requirement": "Write a python function to count the number of lists in a given number of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `349b4e`\n   b. Major behaviors: def count_list(input_list): \r     return len(input_list)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_list(input_list): \r\n    return len(input_list)"}
{"id": 793, "language": "Python", "requirement": "Write a python function to find the last position of an element in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bea656`\n   b. Major behaviors: def last(arr,x,n):\r     low = 0\r     high = n - 1\r     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"}
{"id": 794, "language": "Python", "requirement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fb8051`\n   b. Major behaviors: import re\r def text_starta_endb(text):\r         patterns = '...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"}
{"id": 795, "language": "Python", "requirement": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cf6de3`\n   b. Major behaviors: import heapq\r def cheap_items(items,n):\r   cheap_items = hea...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"}
{"id": 796, "language": "Python", "requirement": "Write function to find the sum of all items in the given dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6b7b5b`\n   b. Major behaviors: def return_sum(dict):\r   sum = 0\r   for i in dict.values():...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"}
{"id": 797, "language": "Python", "requirement": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a8bfde`\n   b. Major behaviors: def sum_Odd(n): \r     terms = (n + 1)//2\r     sum1 = terms *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"}
{"id": 798, "language": "Python", "requirement": "Write a python function to find the sum of an array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `113f78`\n   b. Major behaviors: def _sum(arr):  \r     sum=0\r     for i in arr: \r         sum...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)"}
{"id": 799, "language": "Python", "requirement": "Write a python function to left rotate the bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `668fd5`\n   b. Major behaviors: INT_BITS = 32\r def left_Rotate(n,d):   \r     return (n << d)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))"}
{"id": 800, "language": "Python", "requirement": "Write a function to remove all whitespaces from a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3c774a`\n   b. Major behaviors: import re\r def remove_all_spaces(text):\r  return (re.sub(r'\\...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"}
{"id": 801, "language": "Python", "requirement": "Write a python function to count the number of equal numbers from three given integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1e0f8e`\n   b. Major behaviors: def test_three_equal(x,y,z):\r   result= set([x,y,z])\r   if l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"}
{"id": 802, "language": "Python", "requirement": "Write a python function to count the number of rotations required to generate a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `19c1bb`\n   b. Major behaviors: def count_Rotation(arr,n):   \r     for i in range (1,n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"}
{"id": 803, "language": "Python", "requirement": "Write a python function to check whether the given number is a perfect square or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b7e03b`\n   b. Major behaviors: def is_Perfect_Square(n) :\r     i = 1\r     while (i * i<= n)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"}
{"id": 804, "language": "Python", "requirement": "Write a python function to check whether the product of numbers is even or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `02d3b1`\n   b. Major behaviors: def is_Product_Even(arr,n): \r     for i in range(0,n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"}
{"id": 805, "language": "Python", "requirement": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b72712`\n   b. Major behaviors: def max_sum_list(lists):\r  return max(lists, key=sum)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sum_list(lists):\r\n return max(lists, key=sum)"}
{"id": 806, "language": "Python", "requirement": "Write a function to find maximum run of uppercase characters in the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7cbba5`\n   b. Major behaviors: def max_run_uppercase(test_str):\r   cnt = 0\r   res = 0\r   fo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"}
{"id": 807, "language": "Python", "requirement": "Write a python function to find the first odd number in a given list of numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a2650d`\n   b. Major behaviors: def first_odd(nums):\r   first_odd = next((el for el in nums...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"}
{"id": 808, "language": "Python", "requirement": "Write a function to check if the given tuples contain the k or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `30b88c`\n   b. Major behaviors: def check_K(test_tup, K):\r   res = False\r   for ele in test_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res)"}
{"id": 809, "language": "Python", "requirement": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b2ed20`\n   b. Major behaviors: def check_smaller(test_tup1, test_tup2):\r   res = all(x > y...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 810, "language": "Python", "requirement": "Write a function to iterate over elements repeating each as many times as its count.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `940c5c`\n   b. Major behaviors: from collections import Counter\r def count_variable(a,b,c,d)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"}
{"id": 811, "language": "Python", "requirement": "Write a function to check if two lists of tuples are identical or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `112889`\n   b. Major behaviors: def check_identical(test_list1, test_list2):\r   res = test_l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res)"}
{"id": 812, "language": "Python", "requirement": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0dc3e8`\n   b. Major behaviors: import re\r def road_rd(street):\r   return (re.sub('Road$', '...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"}
{"id": 813, "language": "Python", "requirement": "Write a function to find length of the string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `51ac15`\n   b. Major behaviors: def string_length(str1):\r     count = 0\r     for char in str...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"}
{"id": 814, "language": "Python", "requirement": "Write a function to find the area of a rombus.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4c9b38`\n   b. Major behaviors: def rombus_area(p,q):\r   area=(p*q)/2\r   return area...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"}
{"id": 815, "language": "Python", "requirement": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `69fe32`\n   b. Major behaviors: def sort_by_dnf(arr, n):\r   low=0\r   mid=0\r   high=n-1\r   wh...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"}
{"id": 816, "language": "Python", "requirement": "Write a function to clear the values of the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `91d5c5`\n   b. Major behaviors: def clear_tuple(test_tup):\r   temp = list(test_tup)\r   temp....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup)"}
{"id": 817, "language": "Python", "requirement": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `49f8f8`\n   b. Major behaviors: def div_of_nums(nums,m,n):\r  result = list(filter(lambda x:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"}
{"id": 818, "language": "Python", "requirement": "Write a python function to count lower case letters in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `575193`\n   b. Major behaviors: def lower_ctr(str):\r       lower_ctr= 0\r       for i in rang...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"}
{"id": 819, "language": "Python", "requirement": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a6aff1`\n   b. Major behaviors: def count_duplic(lists):\r     element = []\r     frequency =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency"}
{"id": 820, "language": "Python", "requirement": "Write a function to check whether the given month number contains 28 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d25d6f`\n   b. Major behaviors: def check_monthnum_number(monthnum1):\r   if monthnum1 == 2:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"}
{"id": 821, "language": "Python", "requirement": "Write a function to merge two dictionaries into a single expression.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `47d992`\n   b. Major behaviors: import collections as ct\r def merge_dictionaries(dict1,dict2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"}
{"id": 822, "language": "Python", "requirement": "Write a function to return true if the password is valid.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb5285`\n   b. Major behaviors: import re\r def pass_validity(p):\r  x = True\r  while x:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"}
{"id": 823, "language": "Python", "requirement": "Write a function to check if the given string starts with a substring using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0739eb`\n   b. Major behaviors: import re \r def check_substring(string, sample) : \r   if (sa...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"}
{"id": 824, "language": "Python", "requirement": "Write a python function to remove even numbers from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d6d0a6`\n   b. Major behaviors: def remove_even(l):\r     for i in l:\r         if i % 2 == 0:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"}
{"id": 825, "language": "Python", "requirement": "Write a python function to access multiple elements of specified index from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3ae12a`\n   b. Major behaviors: def access_elements(nums, list_index):\r     result = [nums[i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"}
{"id": 826, "language": "Python", "requirement": "Write a python function to find the type of triangle from the given sides.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7db7c2`\n   b. Major behaviors: def check_Type_Of_Triangle(a,b,c): \r     sqa = pow(a,2)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\")"}
{"id": 827, "language": "Python", "requirement": "Write a function to sum a specific column of a list in a given list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0bf3ca`\n   b. Major behaviors: def sum_column(list1, C):\r     result = sum(row[C] for row i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"}
{"id": 828, "language": "Python", "requirement": "Write a function to count alphabets,digits and special charactes in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bc3b29`\n   b. Major behaviors: def count_alpha_dig_spl(string):\r   alphabets=digits = speci...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)"}
{"id": 829, "language": "Python", "requirement": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d0163f`\n   b. Major behaviors: from collections import Counter \r \t\r def second_frequent(inp...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key)"}
{"id": 830, "language": "Python", "requirement": "Write a function to round up a number to specific digits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `028624`\n   b. Major behaviors: import math\r def round_up(a, digits):\r     n = 10**-digits...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"}
{"id": 831, "language": "Python", "requirement": "Write a python function to count equal element pairs from the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f950e6`\n   b. Major behaviors: def count_Pairs(arr,n): \r     cnt = 0; \r     for i in range(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt;"}
{"id": 832, "language": "Python", "requirement": "Write a function to extract the maximum numeric value from a string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e09b1d`\n   b. Major behaviors: import re \r def extract_max(input): \r \tnumbers = re.findall(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"}
{"id": 833, "language": "Python", "requirement": "Write a function to get dictionary keys as a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2f93dc`\n   b. Major behaviors: def get_key(dict): \r     list = [] \r     for key in dict.key...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"}
{"id": 834, "language": "Python", "requirement": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f24bc2`\n   b. Major behaviors: def generate_matrix(n):\r         if n<=0:\r             retur...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"}
{"id": 835, "language": "Python", "requirement": "Write a python function to find the slope of a line.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `618f3b`\n   b. Major behaviors: def slope(x1,y1,x2,y2): \r     return (float)(y2-y1)/(x2-x1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)"}
{"id": 836, "language": "Python", "requirement": "Write a function to find length of the subarray having maximum sum.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `697ac4`\n   b. Major behaviors: from sys import maxsize \r def max_sub_array_sum(a,size):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"}
{"id": 837, "language": "Python", "requirement": "Write a python function to find the cube sum of first n odd natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1ec69f`\n   b. Major behaviors: def cube_Sum(n): \r     sum = 0   \r     for i in range(0,n) :...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"}
{"id": 838, "language": "Python", "requirement": "Write a python function to find minimum number swaps required to make two binary strings equal.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dbb604`\n   b. Major behaviors: def min_Swaps(s1,s2) :  \r     c0 = 0; c1 = 0;  \r     for i i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;"}
{"id": 839, "language": "Python", "requirement": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d5d2a6`\n   b. Major behaviors: def sort_tuple(tup): \r \tn = len(tup) \r \tfor i in range(n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"}
{"id": 840, "language": "Python", "requirement": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e005b6`\n   b. Major behaviors: def Check_Solution(a,b,c):  \r     if b == 0:  \r         retu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")"}
{"id": 841, "language": "Python", "requirement": "Write a function to count the number of inversions in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2cb561`\n   b. Major behaviors: def get_inv_count(arr, n): \r \tinv_count = 0\r \tfor i in range...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count"}
{"id": 842, "language": "Python", "requirement": "Write a function to find the number which occurs for odd number of times in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bc2066`\n   b. Major behaviors: def get_odd_occurence(arr, arr_size):\r   for i in range(0, a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"}
{"id": 843, "language": "Python", "requirement": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `35ee91`\n   b. Major behaviors: import heapq\r def nth_super_ugly_number(n, primes):\r     ugl...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"}
{"id": 844, "language": "Python", "requirement": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `859746`\n   b. Major behaviors: def get_Number(n, k): \r     arr = [0] * n; \r     i = 0;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1];"}
{"id": 845, "language": "Python", "requirement": "Write a python function to count the number of digits in factorial of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8d597c`\n   b. Major behaviors: import math \r def find_Digits(n): \r     if (n < 0):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1;"}
{"id": 846, "language": "Python", "requirement": "Write a function to find the minimum number of platforms required for a railway/bus station.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d01e52`\n   b. Major behaviors: def find_platform(arr, dep, n): \r     arr.sort() \r     dep.s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"}
{"id": 847, "language": "Python", "requirement": "Write a python function to copy a list from a singleton tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8ac78e`\n   b. Major behaviors: def lcopy(xs):   return xs[:]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def lcopy(xs):\n  return xs[:]"}
{"id": 848, "language": "Python", "requirement": "Write a function to find the area of a trapezium.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2113d9`\n   b. Major behaviors: def area_trapezium(base1,base2,height):\r  area = 0.5 * (base...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"}
{"id": 849, "language": "Python", "requirement": "Write a python function to find sum of all prime divisors of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `be4d0b`\n   b. Major behaviors: def Sum(N): \r     SumOfPrimeDivisors = [0]*(N + 1)   \r     f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N]"}
{"id": 850, "language": "Python", "requirement": "Write a function to check if a triangle of positive area is possible with the given angles.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `473010`\n   b. Major behaviors: def is_triangleexists(a,b,c): \r     if(a != 0 and b != 0 and...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"}
{"id": 851, "language": "Python", "requirement": "Write a python function to find sum of inverse of divisors.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `74c7e1`\n   b. Major behaviors: def Sum_of_Inverse_Divisors(N,Sum): \r     ans = float(Sum)*1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2);"}
{"id": 852, "language": "Python", "requirement": "Write a python function to remove negative numbers from a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6f4252`\n   b. Major behaviors: def remove_negs(num_list): \r     for item in num_list:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"}
{"id": 853, "language": "Python", "requirement": "Write a python function to find sum of odd factors of a number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e4c3cc`\n   b. Major behaviors: import math\r def sum_of_odd_Factors(n): \r     res = 1\r     w...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res"}
{"id": 854, "language": "Python", "requirement": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9b58b3`\n   b. Major behaviors: import heapq as hq\r def raw_heap(rawheap):\r   hq.heapify(raw...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"}
{"id": 855, "language": "Python", "requirement": "Write a python function to check for even parity of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bbfacb`\n   b. Major behaviors: def check_Even_Parity(x): \r     parity = 0\r     while (x !=...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"}
{"id": 856, "language": "Python", "requirement": "Write a python function to find minimum adjacent swaps required to sort binary array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a7f448`\n   b. Major behaviors: def find_Min_Swaps(arr,n) : \r     noOfZeroes = [0] * n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count"}
{"id": 857, "language": "Python", "requirement": "Write a function to list out the list of given strings individually using map function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a5103c`\n   b. Major behaviors: def listify_list(list1):\r   result = list(map(list,list1))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result"}
{"id": 858, "language": "Python", "requirement": "Write a function to count number of lists in a given list of lists and square the count.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d341e7`\n   b. Major behaviors: def count_list(input_list): \r     return (len(input_list))**...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_list(input_list): \r\n    return (len(input_list))**2"}
{"id": 859, "language": "Python", "requirement": "Write a function to generate all sublists of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9d24e5`\n   b. Major behaviors: from itertools import combinations\r def sub_lists(my_list):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"}
{"id": 860, "language": "Python", "requirement": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `772db6`\n   b. Major behaviors: import re \r regex = '[a-zA-z0-9]$'\r def check_alphanumeric(s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\")"}
{"id": 861, "language": "Python", "requirement": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `385123`\n   b. Major behaviors: from collections import Counter \r def anagram_lambda(texts,s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"}
{"id": 862, "language": "Python", "requirement": "Write a function to find the occurrences of n most common words in a given text.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `42da28`\n   b. Major behaviors: from collections import Counter\r import re\r def n_common_wor...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"}
{"id": 863, "language": "Python", "requirement": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6ab1c4`\n   b. Major behaviors: def find_longest_conseq_subseq(arr, n): \r \tans = 0\r \tcount =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans"}
{"id": 864, "language": "Python", "requirement": "Write a function to find palindromes in a given list of strings using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6a37c8`\n   b. Major behaviors: def palindrome_lambda(texts):\r   result = list(filter(lambda...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"}
{"id": 865, "language": "Python", "requirement": "Write a function to print n-times a list using map function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e6f342`\n   b. Major behaviors: def ntimes_list(nums,n):\r     result = map(lambda x:n*x, num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"}
{"id": 866, "language": "Python", "requirement": "Write a function to check whether the given month name contains 31 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `762d06`\n   b. Major behaviors: def check_monthnumb(monthname2):\r   if(monthname2==\"January\"...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"}
{"id": 867, "language": "Python", "requirement": "Write a python function to add a minimum number such that the sum of array becomes even.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `da6edb`\n   b. Major behaviors: def min_Num(arr,n):  \r     odd = 0\r     for i in range(n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"}
{"id": 868, "language": "Python", "requirement": "Write a python function to find the length of the last word in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4df82e`\n   b. Major behaviors: def length_Of_Last_Word(a): \r     l = 0\r     x = a.strip()...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l"}
{"id": 869, "language": "Python", "requirement": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e8fb42`\n   b. Major behaviors: def remove_list_range(list1, leftrange, rigthrange):\r    res...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"}
{"id": 870, "language": "Python", "requirement": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2857c6`\n   b. Major behaviors: def sum_positivenum(nums):\r   sum_positivenum = list(filter(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"}
{"id": 871, "language": "Python", "requirement": "Write a python function to check whether the given strings are rotations of each other or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb2d3a`\n   b. Major behaviors: def are_Rotations(string1,string2): \r     size1 = len(string...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"}
{"id": 872, "language": "Python", "requirement": "Write a function to check if a nested list is a subset of another nested list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `36d911`\n   b. Major behaviors: def check_subset(list1,list2): \r     return all(map(list1.__...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2))"}
{"id": 873, "language": "Python", "requirement": "Write a function to solve the fibonacci sequence using recursion.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e62573`\n   b. Major behaviors: def fibonacci(n):\r   if n == 1 or n == 2:\r     return 1\r   e...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"}
{"id": 874, "language": "Python", "requirement": "Write a python function to check if the string is a concatenation of another string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `37bd18`\n   b. Major behaviors: def check_Concat(str1,str2):\r     N = len(str1)\r     M = len...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"}
{"id": 875, "language": "Python", "requirement": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d8fabd`\n   b. Major behaviors: def min_difference(test_list):\r   temp = [abs(b - a) for a,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res)"}
{"id": 876, "language": "Python", "requirement": "Write a python function to find lcm of two positive integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d9e1ff`\n   b. Major behaviors: def lcm(x, y):\r    if x > y:\r        z = x\r    else:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"}
{"id": 877, "language": "Python", "requirement": "Write a python function to sort the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `07692c`\n   b. Major behaviors: def sort_String(str) : \r     str = ''.join(sorted(str))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str)"}
{"id": 878, "language": "Python", "requirement": "Write a function to check if the given tuple contains only k elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7d6aa7`\n   b. Major behaviors: def check_tuples(test_tuple, K):\r   res = all(ele in K for e...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res)"}
{"id": 879, "language": "Python", "requirement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `347a3c`\n   b. Major behaviors: import re\r def text_match(text):\r   patterns = 'a.*?b$'\r   i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"}
{"id": 880, "language": "Python", "requirement": "Write a python function to find number of solutions in quadratic equation.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1cbe6a`\n   b. Major behaviors: def Check_Solution(a,b,c) : \r     if ((b*b) - (4*a*c)) > 0 :...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\")"}
{"id": 881, "language": "Python", "requirement": "Write a function to find the sum of first even and odd number of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1c14df`\n   b. Major behaviors: def sum_even_odd(list1):\r     first_even = next((el for el i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"}
{"id": 882, "language": "Python", "requirement": "Write a function to caluclate perimeter of a parallelogram.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1c68a9`\n   b. Major behaviors: def parallelogram_perimeter(b,h):\r   perimeter=2*(b*h)\r   re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"}
{"id": 883, "language": "Python", "requirement": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d11fa8`\n   b. Major behaviors: def div_of_nums(nums,m,n):\r  result = list(filter(lambda x:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"}
{"id": 884, "language": "Python", "requirement": "Write a python function to check whether all the bits are within a given range or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fe3d62`\n   b. Major behaviors: def all_Bits_Set_In_The_Given_Range(n,l,r): \r     num = ((1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"}
{"id": 885, "language": "Python", "requirement": "Write a python function to check whether the two given strings are isomorphic to each other or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ef1b4d`\n   b. Major behaviors: def is_Isomorphic(str1,str2):          \r     dict_str1 = {}...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"}
{"id": 886, "language": "Python", "requirement": "Write a function to add all the numbers in a list and divide it with the length of the list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `69c76e`\n   b. Major behaviors: def sum_num(numbers):\r     total = 0\r     for x in numbers:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers)"}
{"id": 887, "language": "Python", "requirement": "Write a python function to check whether the given number is odd or not using bitwise operator.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8ba9cf`\n   b. Major behaviors: def is_odd(n) : \r     if (n^1 == n-1) :\r         return True...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False;"}
{"id": 888, "language": "Python", "requirement": "Write a function to substract the elements of the given nested tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb9517`\n   b. Major behaviors: def substract_elements(test_tup1, test_tup2):\r   res = tuple...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res)"}
{"id": 889, "language": "Python", "requirement": "Write a function to reverse each list in a given list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f8ad1d`\n   b. Major behaviors: def reverse_list_lists(lists):\r     for l in lists:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists"}
{"id": 890, "language": "Python", "requirement": "Write a python function to find the index of an extra element present in one sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bda728`\n   b. Major behaviors: def find_Extra(arr1,arr2,n) : \r     for i in range(0, n) :...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n"}
{"id": 891, "language": "Python", "requirement": "Write a python function to check whether the given two numbers have same number of digits or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a98c74`\n   b. Major behaviors: def same_Length(A,B): \r     while (A > 0 and B > 0):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False;"}
{"id": 892, "language": "Python", "requirement": "Write a function to remove multiple spaces in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a3a5ed`\n   b. Major behaviors: import re\r def remove_spaces(text):\r  return (re.sub(' +','...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"}
{"id": 893, "language": "Python", "requirement": "Write a python function to get the last element of each sublist.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `78aba4`\n   b. Major behaviors: def Extract(lst): \r     return [item[-1] for item in lst]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Extract(lst): \r\n    return [item[-1] for item in lst]"}
{"id": 894, "language": "Python", "requirement": "Write a function to convert the given string of float type into tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d0d2e9`\n   b. Major behaviors: def float_to_tuple(test_str):\r   res = tuple(map(float, test...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res)"}
{"id": 895, "language": "Python", "requirement": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8598f0`\n   b. Major behaviors: def max_sum_subseq(A):\r     n = len(A)\r     if n == 1:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"}
{"id": 896, "language": "Python", "requirement": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3a6161`\n   b. Major behaviors: def last(n):\r    return n[-1]\r def sort_list_last(tuples):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"}
{"id": 897, "language": "Python", "requirement": "Write a python function to check whether the word is present in a given sentence or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `26b6e9`\n   b. Major behaviors: def is_Word_Present(sentence,word): \r     s = sentence.split...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"}
{"id": 898, "language": "Python", "requirement": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f93bfe`\n   b. Major behaviors: from itertools import groupby \r def extract_elements(numbers...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"}
{"id": 899, "language": "Python", "requirement": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a1383d`\n   b. Major behaviors: def check(arr,n): \r     g = 0 \r     for i in range(1,n):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"}
{"id": 900, "language": "Python", "requirement": "Write a function where a string will start with a specific number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2e6b39`\n   b. Major behaviors: import re\r def match_num(string):\r     text = re.compile(r\"^...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}
{"id": 901, "language": "Python", "requirement": "Write a function to find the smallest multiple of the first n numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `38c55a`\n   b. Major behaviors: def smallest_multiple(n):\r     if (n<=2):\r       return n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"}
{"id": 902, "language": "Python", "requirement": "Write a function to combine two dictionaries by adding values for common keys.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `784e98`\n   b. Major behaviors: from collections import Counter\r def add_dict(d1,d2):\r    ad...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"}
{"id": 903, "language": "Python", "requirement": "Write a python function to count the total unset bits from 1 to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `862700`\n   b. Major behaviors: def count_Unset_Bits(n) :  \r     cnt = 0;  \r     for i in ra...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;"}
{"id": 904, "language": "Python", "requirement": "Write a function to return true if the given number is even else return false.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e17293`\n   b. Major behaviors: def even_num(x):\r   if x%2==0:\r      return True\r   else:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"}
{"id": 905, "language": "Python", "requirement": "Write a python function to find the sum of squares of binomial co-efficients.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `040e00`\n   b. Major behaviors: def factorial(start,end): \r     res = 1 \r     for i in range...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n))"}
{"id": 906, "language": "Python", "requirement": "Write a function to extract year, month and date from a url by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `70d6ff`\n   b. Major behaviors: import re\r def extract_date(url):\r         return re.findall...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"}
{"id": 907, "language": "Python", "requirement": "Write a function to print the first n lucky numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7be7f2`\n   b. Major behaviors: def lucky_num(n):\r  List=range(-1,n*n+9,2)\r  i=2\r  while Lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"}
{"id": 908, "language": "Python", "requirement": "Write a function to find the fixed point in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ef49ce`\n   b. Major behaviors: def find_fixed_point(arr, n): \r \tfor i in range(n): \r \t\tif a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"}
{"id": 909, "language": "Python", "requirement": "Write a function to find the previous palindrome of a specified number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8e6bab`\n   b. Major behaviors: def previous_palindrome(num):\r     for x in range(num-1,0,-1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"}
{"id": 910, "language": "Python", "requirement": "Write a function to validate a gregorian date.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `77f07c`\n   b. Major behaviors: import datetime\r def check_date(m, d, y):\r     try:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"}
{"id": 911, "language": "Python", "requirement": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `720dc1`\n   b. Major behaviors: def maximum_product(nums):\r     import heapq\r     a, b = hea...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"}
{"id": 912, "language": "Python", "requirement": "Write a function to find ln, m lobb number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9bdbbc`\n   b. Major behaviors: def binomial_coeff(n, k): \r \tC = [[0 for j in range(k + 1)]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"}
{"id": 913, "language": "Python", "requirement": "Write a function to check for a number at the end of a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `19a36b`\n   b. Major behaviors: import re\r def end_num(string):\r     text = re.compile(r\".*[...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"}
{"id": 914, "language": "Python", "requirement": "Write a python function to check whether the given string is made up of two alternating characters or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6e2fc8`\n   b. Major behaviors: def is_Two_Alter(s):  \r     for i in range (len( s) - 2) :...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"}
{"id": 915, "language": "Python", "requirement": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `77fb6f`\n   b. Major behaviors: def rearrange_numbs(array_nums):\r   result = sorted(array_nu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result"}
{"id": 916, "language": "Python", "requirement": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `09f499`\n   b. Major behaviors: def find_triplet_array(A, arr_size, sum): \r \tfor i in range(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"}
{"id": 917, "language": "Python", "requirement": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `975918`\n   b. Major behaviors: import re\r def text_uppercase_lowercase(text):\r         patt...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"}
{"id": 918, "language": "Python", "requirement": "Write a function to count coin change.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `70aaf8`\n   b. Major behaviors: def coin_change(S, m, n): \r     table = [[0 for x in range(m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1]"}
{"id": 919, "language": "Python", "requirement": "Write a python function to multiply all items in the list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3abf00`\n   b. Major behaviors: def multiply_list(items):\r     tot = 1\r     for x in items:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"}
{"id": 920, "language": "Python", "requirement": "Write a function to remove all tuples with all none values in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c020e5`\n   b. Major behaviors: def remove_tuple(test_list):\r   res = [sub for sub in test_l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res))"}
{"id": 921, "language": "Python", "requirement": "Write a function to perform chunking of tuples each of size n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2cf382`\n   b. Major behaviors: def chunk_tuples(test_tup, N):\r   res = [test_tup[i : i + N]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res)"}
{"id": 922, "language": "Python", "requirement": "Write a function to find a pair with the highest product from a given array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `24d9d5`\n   b. Major behaviors: def max_product(arr): \r     arr_len = len(arr) \r     if (arr...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y"}
{"id": 923, "language": "Python", "requirement": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `942c22`\n   b. Major behaviors: def super_seq(X, Y, m, n):\r \tif (not m):\r \t\treturn n\r \tif (n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"}
{"id": 924, "language": "Python", "requirement": "Write a function to find maximum of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ba387b`\n   b. Major behaviors: def max_of_two( x, y ):\r     if x > y:\r         return x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"}
{"id": 925, "language": "Python", "requirement": "Write a python function to calculate the product of all the numbers of a given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `49ef43`\n   b. Major behaviors: def mutiple_tuple(nums):\r     temp = list(nums)\r     product...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"}
{"id": 926, "language": "Python", "requirement": "Write a function to find n-th rencontres number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a31a87`\n   b. Major behaviors: def binomial_coeffi(n, k): \r \tif (k == 0 or k == n): \r \t\tret...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"}
{"id": 927, "language": "Python", "requirement": "Write a function to calculate the height of the given binary tree.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3e8b19`\n   b. Major behaviors: class Node: \r \tdef __init__(self, data): \r \t\tself.data = dat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"}
{"id": 928, "language": "Python", "requirement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `86762c`\n   b. Major behaviors: import re\r def change_date_format(dt):\r         return re.su...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"}
{"id": 929, "language": "Python", "requirement": "Write a function to count repeated items of a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `66425f`\n   b. Major behaviors: def count_tuplex(tuplex,value):  \r   count = tuplex.count(va...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"}
{"id": 930, "language": "Python", "requirement": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `56c39e`\n   b. Major behaviors: import re\r def text_match(text):\r         patterns = 'ab*?'...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"}
{"id": 931, "language": "Python", "requirement": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9b7ac1`\n   b. Major behaviors: import math \r def sum_series(number):\r  total = 0\r  total =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"}
{"id": 932, "language": "Python", "requirement": "Write a function to remove duplicate words from a given list of strings.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f2d247`\n   b. Major behaviors: def remove_duplic_list(l):\r     temp = []\r     for x in l:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"}
{"id": 933, "language": "Python", "requirement": "Write a function to convert camel case string to snake case string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b0886c`\n   b. Major behaviors: import re\r def camel_to_snake(text):\r   str1 = re.sub('(.)([...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}
{"id": 934, "language": "Python", "requirement": "Write a function to find the nth delannoy number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `93ccd5`\n   b. Major behaviors: def dealnnoy_num(n, m): \r \tif (m == 0 or n == 0) : \r \t\tretur...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"}
{"id": 935, "language": "Python", "requirement": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c40ba2`\n   b. Major behaviors: def series_sum(number):\r  total = 0\r  total = (number * (num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"}
{"id": 936, "language": "Python", "requirement": "Write a function to re-arrange the given tuples based on the given ordered list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `25973e`\n   b. Major behaviors: def re_arrange_tuples(test_list, ord_list):\r   temp = dict(t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res)"}
{"id": 937, "language": "Python", "requirement": "Write a function to count the most common character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `68bcff`\n   b. Major behaviors: from collections import Counter \r def max_char(str1):\r     t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"}
{"id": 938, "language": "Python", "requirement": "Write a function to find three closest elements from three sorted arrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c4a458`\n   b. Major behaviors: import sys \r \r def find_closet(A, B, C, p, q, r): \r \tdiff =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"}
{"id": 939, "language": "Python", "requirement": "Write a function to sort a list of dictionaries using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d13954`\n   b. Major behaviors: def sorted_models(models):\r  sorted_models = sorted(models,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"}
{"id": 940, "language": "Python", "requirement": "Write a function to sort the given array by using heap sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a54651`\n   b. Major behaviors: def heap_sort(arr):\r     heapify(arr)  \r     end = len(arr)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return"}
{"id": 941, "language": "Python", "requirement": "Write a function to count the elements in a list until an element is a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3c5714`\n   b. Major behaviors: def count_elim(num):\r   count_elim = 0\r   for n in num:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"}
{"id": 942, "language": "Python", "requirement": "Write a function to check if any list element is present in the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f9c913`\n   b. Major behaviors: def check_element(test_tup, check_list):\r   res = False\r   f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res)"}
{"id": 943, "language": "Python", "requirement": "Write a function to combine two given sorted lists using heapq module.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b7c076`\n   b. Major behaviors: from heapq import merge\r def combine_lists(num1,num2):\r   co...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"}
{"id": 944, "language": "Python", "requirement": "Write a function to separate and print the numbers and their position of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `02ffa6`\n   b. Major behaviors: import re\r def num_position(text):\r  for m in re.finditer(\"\\...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"}
{"id": 945, "language": "Python", "requirement": "Write a function to convert the given tuples into set.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cdd5e8`\n   b. Major behaviors: def tuple_to_set(t):\r   s = set(t)\r   return (s)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s)"}
{"id": 946, "language": "Python", "requirement": "Write a function to find the most common elements and their counts of a specified text.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6f9a07`\n   b. Major behaviors: from collections import Counter \r def most_common_elem(s,a):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"}
{"id": 947, "language": "Python", "requirement": "Write a python function to find the length of the shortest word.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c7feb4`\n   b. Major behaviors: def len_log(list1):\r     min=len(list1[0])\r     for i in lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"}
{"id": 948, "language": "Python", "requirement": "Write a function to get an item of a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6a7249`\n   b. Major behaviors: def get_item(tup1,index):\r   item = tup1[index]\r   return it...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"}
{"id": 949, "language": "Python", "requirement": "Write a function to sort the given tuple list basis the total digits in tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2ba5ad`\n   b. Major behaviors: def count_digs(tup):\r   return sum([len(str(ele)) for ele in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"}
{"id": 950, "language": "Python", "requirement": "Write a function to display sign of the chinese zodiac for given year.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `86d1fe`\n   b. Major behaviors: def chinese_zodiac(year):\r  if (year - 2000) % 12 == 0:...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"}
{"id": 951, "language": "Python", "requirement": "Write a function to find the maximum of similar indices in two lists of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `708b05`\n   b. Major behaviors: def max_similar_indices(test_list1, test_list2):\r   res = [(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res)"}
{"id": 952, "language": "Python", "requirement": "Write a function to compute the value of ncr mod p.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `93a997`\n   b. Major behaviors: def nCr_mod_p(n, r, p): \r \tif (r > n- r): \r \t\tr = n - r \r \tC...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r]"}
{"id": 953, "language": "Python", "requirement": "Write a python function to find the minimun number of subsets with distinct elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f78922`\n   b. Major behaviors: def subset(ar, n): \r     res = 0\r     ar.sort() \r     for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res"}
{"id": 954, "language": "Python", "requirement": "Write a function that gives profit amount if the given amount has profit else return none.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cdcb12`\n   b. Major behaviors: def profit_amount(actual_cost,sale_amount): \r  if(actual_cos...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"}
{"id": 955, "language": "Python", "requirement": "Write a function to find out, if the given number is abundant.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `02e8bc`\n   b. Major behaviors: def is_abundant(n):\r     fctrsum = sum([fctr for fctr in ran...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"}
{"id": 956, "language": "Python", "requirement": "Write a function to split the given string at uppercase letters by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d3dde9`\n   b. Major behaviors: import re\r def split_list(text):\r   return (re.findall('[A-Z...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"}
{"id": 957, "language": "Python", "requirement": "Write a python function to get the position of rightmost set bit.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b1cbd5`\n   b. Major behaviors: import math\r def get_First_Set_Bit_Pos(n):\r      return math...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"}
{"id": 958, "language": "Python", "requirement": "Write a function to convert an integer into a roman numeral.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d5efa4`\n   b. Major behaviors: def int_to_roman( num):\r         val = [1000, 900, 500, 400,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"}
{"id": 959, "language": "Python", "requirement": "Write a python function to find the average of a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `054b87`\n   b. Major behaviors: def Average(lst): \r     return sum(lst) / len(lst)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def Average(lst): \r\n    return sum(lst) / len(lst)"}
{"id": 960, "language": "Python", "requirement": "Write a function to solve tiling problem.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6d6dca`\n   b. Major behaviors: def get_noOfways(n):\r     if (n == 0):\r         return 0;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"}
{"id": 961, "language": "Python", "requirement": "Write a function to convert a roman numeral to an integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ea3ef0`\n   b. Major behaviors: def roman_to_int(s):\r         rom_val = {'I': 1, 'V': 5, 'X'...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"}
{"id": 962, "language": "Python", "requirement": "Write a python function to find the sum of all even natural numbers within the range l and r.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ec4a0d`\n   b. Major behaviors: def sum_Natural(n): \r     sum = (n * (n + 1)) \r     return i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)))"}
{"id": 963, "language": "Python", "requirement": "Write a function to calculate the discriminant value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `73176c`\n   b. Major behaviors: def discriminant_value(x,y,z):\r     discriminant = (y**2) -...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"}
{"id": 964, "language": "Python", "requirement": "Write a python function to check whether the length of the word is even or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `15de11`\n   b. Major behaviors: def word_len(s): \r     s = s.split(' ')   \r     for word in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"}
{"id": 965, "language": "Python", "requirement": "Write a function to convert camel case string to snake case string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5d6869`\n   b. Major behaviors: def camel_to_snake(text):\r         import re\r         str1 =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"}
{"id": 966, "language": "Python", "requirement": "Write a function to remove an empty tuple from a list of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1d251e`\n   b. Major behaviors: def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), (...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"}
{"id": 967, "language": "Python", "requirement": "Write a python function to accept the strings which contains all vowels.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b2730b`\n   b. Major behaviors: def check(string): \r   if len(set(string).intersection(\"AEIO...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\")"}
{"id": 968, "language": "Python", "requirement": "Write a python function to find maximum possible value for the given periodic function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9a3a88`\n   b. Major behaviors: def floor_Max(A,B,N):\r     x = min(B - 1,N)\r     return (A*x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"}
{"id": 969, "language": "Python", "requirement": "Write a function to join the tuples if they have similar initial elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8454f5`\n   b. Major behaviors: def join_tuples(test_list):\r   res = []\r   for sub in test_l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res)"}
{"id": 970, "language": "Python", "requirement": "Write a function to find minimum of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b18371`\n   b. Major behaviors: def min_of_two( x, y ):\r     if x < y:\r         return x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"}
{"id": 971, "language": "Python", "requirement": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ebb5f1`\n   b. Major behaviors: def maximum_segments(n, a, b, c) : \r \tdp = [-1] * (n + 10)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"}
{"id": 972, "language": "Python", "requirement": "Write a function to concatenate the given two tuples to a nested tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5498f2`\n   b. Major behaviors: def concatenate_nested(test_tup1, test_tup2):\r   res = test_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res)"}
{"id": 973, "language": "Python", "requirement": "Write a python function to left rotate the string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8df7a8`\n   b. Major behaviors: def left_rotate(s,d):\r     tmp = s[d : ] + s[0 : d]\r     ret...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp"}
{"id": 974, "language": "Python", "requirement": "Write a function to find the minimum total path sum in the given triangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8abd03`\n   b. Major behaviors: def min_sum_path(A): \r \tmemo = [None] * len(A) \r \tn = len(A)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"}

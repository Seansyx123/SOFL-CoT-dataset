{"id": "1_java", "language": "Java", "requirement": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8dbab7`\n   b. Major behaviors: R = 3 C = 3 public static int min_cost(int cost, int m, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "R = 3\nC = 3\npublic static int min_cost(int cost, int m, int n) {\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    // [manual conversion needed for loop]: for i in range(1, m+1):\n    tc[i][0] = tc[i-1][0] + cost[i][0]\n    // [manual conversion needed for loop]: for j in range(1, n+1):\n    tc[0][j] = tc[0][j-1] + cost[0][j]\n    // [manual conversion needed for loop]: for i in range(1, m+1):\n    // [manual conversion needed for loop]: for j in range(1, n+1):\n    tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n];\n}"}
{"id": "2_java", "language": "Java", "requirement": "Write a function to find the similar elements from the given two tuple lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6167f9`\n   b. Major behaviors: public static int similar_elements(int test_tup1, int test_t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int similar_elements(int test_tup1, int test_tup2) {\n    res = tuple(set(test_tup1) & set(test_tup2))\n    return (res);\n}"}
{"id": "3_java", "language": "Java", "requirement": "Write a python function to identify non-prime numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `55f03f`\n   b. Major behaviors: import math public static int is_not_prime(int n) {     resu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int is_not_prime(int n) {\n    result = False\n    // [manual conversion needed for loop]: for i in range(2,int(math.sqrt(n)) + 1):\n    if (n % i == 0) {\n        result = True\n        return result;\n    }\n}"}
{"id": "4_java", "language": "Java", "requirement": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `be17c3`\n   b. Major behaviors: import heapq as hq public static int heap_queue_largest(int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\npublic static int heap_queue_largest(int nums, int n) {\n    largest_nums = hq.nlargest(n, nums)\n    return largest_nums;\n}"}
{"id": "5_java", "language": "Java", "requirement": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4c68ae`\n   b. Major behaviors: public static int count_ways(int n) {     A = [0] * (n + 1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_ways(int n) {\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    // [manual conversion needed for loop]: for i in range(2, n+1):\n    A[i] = A[i - 2] + 2 * B[i - 1]\n    B[i] = A[i - 1] + B[i - 2]\n    return A[n];\n}"}
{"id": "6_java", "language": "Java", "requirement": "Write a python function to check whether the two numbers differ at one bit position only or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `262831`\n   b. Major behaviors: public static int is_Power_Of_Two(int x) {     return x and...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Power_Of_Two(int x) {\n    return x and (not(x & (x - 1)));\n    public static int differ_At_One_Bit_Pos(int a, int b) {\n        return is_Power_Of_Two(a ^ b);\n    }\n}"}
{"id": "7_java", "language": "Java", "requirement": "Write a function to find all words which are at least 4 characters long in a string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `644e10`\n   b. Major behaviors: import re public static int find_char_long(int text) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int find_char_long(int text) {\n    return (re.findall(r\"\\b\\w{4,}\\b\", text));\n}"}
{"id": "8_java", "language": "Java", "requirement": "Write a function to find squares of individual elements in a list using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `53c55d`\n   b. Major behaviors: public static int square_nums(int nums) {     square_nums =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int square_nums(int nums) {\n    square_nums = list(map(lambda x: x ** 2, nums))\n    return square_nums;\n}"}
{"id": "9_java", "language": "Java", "requirement": "Write a python function to find the minimum number of rotations required to get the same string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `36ead0`\n   b. Major behaviors: public static int find_Rotations(int str) {     tmp = str +...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Rotations(int str) {\n    tmp = str + str\n    n = len(str)\n    // [manual conversion needed for loop]: for i in range(1,n + 1):\n    substring = tmp[i: i+n]\n    if ((str == substring)) {\n        return i;\n        return n;\n    }\n}"}
{"id": "10_java", "language": "Java", "requirement": "Write a function to get the n smallest items from a dataset.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e623f3`\n   b. Major behaviors: import heapq public static int small_nnum(int list1, int n)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\npublic static int small_nnum(int list1, int n) {\n    smallest=heapq.nsmallest(n,list1)\n    return smallest;\n}"}
{"id": "11_java", "language": "Java", "requirement": "Write a python function to remove first and last occurrence of a given character from the string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `221795`\n   b. Major behaviors: public static int remove_Occ(int s, int ch) {     // [manual...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_Occ(int s, int ch) {\n    // [manual conversion needed for loop]: for i in range(len(s)):\n    if ((s[i] == ch)) {\n        s = s[0 : i] + s[i + 1:]\n        break\n        // [manual conversion needed for loop]: for i in range(len(s) - 1,-1,-1):\n        if ((s[i] == ch)) {\n            s = s[0 : i] + s[i + 1:]\n            break\n            return s;\n        }\n    }\n}"}
{"id": "12_java", "language": "Java", "requirement": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4d49b9`\n   b. Major behaviors: public static int sort_matrix(int M) {     result = sorted(M...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_matrix(int M) {\n    result = sorted(M, key=sum)\n    return result;\n}"}
{"id": "13_java", "language": "Java", "requirement": "Write a function to count the most common words in a dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ce7bd3`\n   b. Major behaviors: from collections import Counter public static int count_comm...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\npublic static int count_common(int words) {\n    word_counts = Counter(words)\n    top_four = word_counts.most_common(4)\n    return (top_four);\n}"}
{"id": "14_java", "language": "Java", "requirement": "Write a python function to find the volume of a triangular prism.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0274cc`\n   b. Major behaviors: public static int find_Volume(int l, int b, int h)) {     re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Volume(int l, int b, int h)) {\n    return ((l * b * h) / 2);\n}"}
{"id": "15_java", "language": "Java", "requirement": "Write a function to split a string at lowercase letters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `be90f1`\n   b. Major behaviors: import re public static int split_lowerstring(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int split_lowerstring(int text) {\n    return (re.findall('[a-z][^a-z]*', text));\n}"}
{"id": "16_java", "language": "Java", "requirement": "Write a function to find sequences of lowercase letters joined with an underscore.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c27884`\n   b. Major behaviors: import re public static int text_lowercase_underscore(int te...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_lowercase_underscore(int text) {\n    patterns = '^[a-z]+_[a-z]+$'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return('Not matched!')\n    }\n}"}
{"id": "17_java", "language": "Java", "requirement": "Write a function to find the perimeter of a square.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `734ebd`\n   b. Major behaviors: public static int square_perimeter(int a) {     perimeter=4*...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int square_perimeter(int a) {\n    perimeter=4*a\n    return perimeter;\n}"}
{"id": "18_java", "language": "Java", "requirement": "Write a function to remove characters from the first string which are present in the second string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1bf016`\n   b. Major behaviors: NO_OF_CHARS = 256 public static int str_to_list(int string)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "NO_OF_CHARS = 256\npublic static int str_to_list(int string) {\n    temp = []\n    // [manual conversion needed for loop]: for x in string:\n    temp.append(x)\n    return temp;\n    public static int lst_to_string(int List) {\n        return ''.join(List);\n        public static int get_char_count_array(int string) {\n            count = [0] * NO_OF_CHARS\n            // [manual conversion needed for loop]: for i in string:\n            count[ord(i)] += 1\n            return count;\n            public static int remove_dirty_chars(int string, int second_string) {\n                count = get_char_count_array(second_string)\n                ip_ind = 0\n                res_ind = 0\n                temp = ''\n                str_list = str_to_list(string)\n                // [manual conversion needed for while loop]: while ip_ind != len(str_list):\n                temp = str_list[ip_ind]\n                if (count[ord(temp)] == 0) {\n                    str_list[res_ind] = str_list[ip_ind]\n                    res_ind += 1\n                    ip_ind+=1\n                    return lst_to_string(str_list[0:res_ind]);\n                }\n            }\n        }\n    }\n}"}
{"id": "19_java", "language": "Java", "requirement": "Write a function to find whether a given array of integers contains any duplicate element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a570ac`\n   b. Major behaviors: public static int test_duplicate(int arraynums) {     nums_s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int test_duplicate(int arraynums) {\n    nums_set = set(arraynums)\n    return len(arraynums) != len(nums_set);\n}"}
{"id": "20_java", "language": "Java", "requirement": "Write a function to check if the given number is woodball or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `703969`\n   b. Major behaviors: public static int is_woodall(int x) {     if ((x % 2 == 0))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_woodall(int x) {\n    if ((x % 2 == 0)) {\n        return False;\n        if ((x == 1)) {\n            return True;\n            x = x + 1\n            p = 0\n            // [manual conversion needed for while loop]: while (x % 2 == 0):\n            x = x/2\n            p = p + 1\n            if ((p == x)) {\n                return True;\n                return False;\n            }\n        }\n    }\n}"}
{"id": "21_java", "language": "Java", "requirement": "Write a function to find m number of multiples of n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `93d049`\n   b. Major behaviors: public static int multiples_of_num(int m, int n) {     multi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int multiples_of_num(int m, int n) {\n    multiples_of_num= list(range(n,(m+1)*n, n))\n    return list(multiples_of_num);\n}"}
{"id": "22_java", "language": "Java", "requirement": "Write a function to find the first duplicate element in a given array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6f22ff`\n   b. Major behaviors: public static int find_first_duplicate(int nums) {     num_s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_first_duplicate(int nums) {\n    num_set = set()\n    no_duplicate = -1\n\n    // [manual conversion needed for loop]: for i in range(len(nums)):\n\n    if (nums[i] in num_set) {\n        return nums[i];\n        } else {\n        num_set.add(nums[i])\n\n        return no_duplicate;\n    }\n}"}
{"id": "23_java", "language": "Java", "requirement": "Write a python function to find the maximum sum of elements of list in a list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2520a1`\n   b. Major behaviors: public static int maximum_Sum(int list1) {     maxi = -10000...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int maximum_Sum(int list1) {\n    maxi = -100000\n    // [manual conversion needed for loop]: for x in list1:\n    sum = 0\n    // [manual conversion needed for loop]: for y in x:\n    sum+= y\n    maxi = max(sum,maxi)\n    return maxi;\n}"}
{"id": "24_java", "language": "Java", "requirement": "Write a function to convert the given binary number to its decimal equivalent.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `edf457`\n   b. Major behaviors: public static int binary_to_decimal(int binary) {     binary...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int binary_to_decimal(int binary) {\n    binary1 = binary\n    decimal, i, n = 0, 0, 0\n    while(binary != 0):\n    dec = binary % 10\n    decimal = decimal + dec * pow(2, i)\n    binary = binary//10\n    i += 1\n    return (decimal);\n}"}
{"id": "25_java", "language": "Java", "requirement": "Write a python function to find the product of non-repeated elements in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5a8c5a`\n   b. Major behaviors: public static int find_Product(int arr, int n) {     arr.sor...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Product(int arr, int n) {\n    arr.sort()\n    prod = 1\n    // [manual conversion needed for loop]: for i in range(0,n,1):\n    if ((arr[i - 1] != arr[i])) {\n        prod = prod * arr[i]\n        return prod;;\n    }\n}"}
{"id": "26_java", "language": "Java", "requirement": "Write a function to check if the given tuple list has all k elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `963224`\n   b. Major behaviors: public static int check_k_elements(int test_list, int K) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_k_elements(int test_list, int K) {\n    res = True\n    // [manual conversion needed for loop]: for tup in test_list:\n    // [manual conversion needed for loop]: for ele in tup:\n    if (ele != K) {\n        res = False\n        return (res);\n    }\n}"}
{"id": "27_java", "language": "Java", "requirement": "Write a python function to remove all digits from a list of strings.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `56ec59`\n   b. Major behaviors: import re public static int remove(int list) {     pattern =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove(int list) {\n    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list]\n    return list;\n}"}
{"id": "28_java", "language": "Java", "requirement": "Write a python function to find binomial co-efficient.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `af592c`\n   b. Major behaviors: public static int binomial_Coeff(int n, int k) {     if (k >...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int binomial_Coeff(int n, int k) {\n    if (k > n ) {\n        return 0;\n        if (k==0 or k ==n ) {\n            return 1;\n            return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k);\n        }\n    }\n}"}
{"id": "29_java", "language": "Java", "requirement": "Write a python function to find the element occurring odd number of times.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `afd853`\n   b. Major behaviors: public static int get_Odd_Occurrence(int arr, int arr_size)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_Odd_Occurrence(int arr, int arr_size) {\n    // [manual conversion needed for loop]: for i in range(0,arr_size):\n    count = 0\n    // [manual conversion needed for loop]: for j in range(0,arr_size):\n    if (arr[i] == arr[j]) {\n        count+=1\n        if ((count % 2 != 0)) {\n            return arr[i];\n            return -1;\n        }\n    }\n}"}
{"id": "30_java", "language": "Java", "requirement": "Write a python function to count all the substrings starting and ending with same characters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ca961b`\n   b. Major behaviors: public static int check_Equality(int s) {     return (ord(s[...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_Equality(int s) {\n    return (ord(s[0]) == ord(s[len(s) - 1]));;\n    public static int count_Substring_With_Equal_Ends(int s) {\n        result = 0;\n        n = len(s);\n        // [manual conversion needed for loop]: for i in range(n):\n        // [manual conversion needed for loop]: for j in range(1,n-i+1):\n        if ((check_Equality(s[i:i+j]))) {\n            result+=1;\n            return result;;\n        }\n    }\n}"}
{"id": "31_java", "language": "Java", "requirement": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `686487`\n   b. Major behaviors: public static int func(int nums, int k) {     import collect...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int func(int nums, int k) {\n    import collections\n    d = collections.defaultdict(int)\n    // [manual conversion needed for loop]: for row in nums:\n    // [manual conversion needed for loop]: for i in row:\n    d[i] += 1\n    temp = []\n    import heapq\n    // [manual conversion needed for loop]: for key, v in d.items():\n    if (len(temp) < k) {\n        temp.append((v, key))\n        if (len(temp) == k) {\n            heapq.heapify(temp)\n            } else {\n            if (v > temp[0][0]) {\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n                result = []\n                // [manual conversion needed for while loop]: while temp:\n                v, key = heapq.heappop(temp)\n                result.append(key)\n                return result;\n            }\n        }\n    }\n}"}
{"id": "32_java", "language": "Java", "requirement": "Write a python function to find the largest prime factor of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `59b53f`\n   b. Major behaviors: import math public static int max_Prime_Factors(int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int max_Prime_Factors(int n) {\n    maxPrime = -1\n    // [manual conversion needed for while loop]: while n%2 == 0:\n    maxPrime = 2\n    n >>= 1\n    // [manual conversion needed for loop]: for i in range(3,int(math.sqrt(n))+1,2):\n    // [manual conversion needed for while loop]: while n % i == 0:\n    maxPrime = i\n    n = n / i\n    if (n > 2) {\n        maxPrime = n\n        return int(maxPrime);\n    }\n}"}
{"id": "33_java", "language": "Java", "requirement": "Write a python function to convert a decimal number to binary number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b002de`\n   b. Major behaviors: public static int decimal_To_Binary(int N) {     B_Number =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int decimal_To_Binary(int N) {\n    B_Number = 0\n    cnt = 0\n    // [manual conversion needed for while loop]: while (N != 0):\n    rem = N % 2\n    c = pow(10,cnt)\n    B_Number += rem*c\n    N //= 2\n    cnt += 1\n    return B_Number;\n}"}
{"id": "34_java", "language": "Java", "requirement": "Write a python function to find the missing number in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dac0e7`\n   b. Major behaviors: public static int find_missing(int ar, int N) {     l = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_missing(int ar, int N) {\n    l = 0\n    r = N - 1\n    // [manual conversion needed for while loop]: while (l <= r):\n    mid = (l + r) / 2\n    mid= int (mid)\n    if ((ar[mid] != mid + 1 and ar[mid - 1] == mid)) {\n        return (mid + 1);\n        } else if ((ar[mid] != mid + 1)) {\n        r = mid - 1\n        } else {\n        l = mid + 1\n        return (-1);\n    }\n}"}
{"id": "35_java", "language": "Java", "requirement": "Write a function to find the n-th rectangular number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fa2482`\n   b. Major behaviors: public static int find_rect_num(int n) {     return n*(n + 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_rect_num(int n) {\n    return n*(n + 1);\n}"}
{"id": "36_java", "language": "Java", "requirement": "Write a python function to find the nth digit in the proper fraction of two given numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1d41d0`\n   b. Major behaviors: public static int find_Nth_Digit(int p, int q, int N)) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Nth_Digit(int p, int q, int N)) {\n    // [manual conversion needed for while loop]: while (N > 0) :\n    N -= 1;\n    p *= 10;\n    res = p // q;\n    p %= q;\n    return res;;\n}"}
{"id": "37_java", "language": "Java", "requirement": "Write a function to sort a given mixed list of integers and strings.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fe0c30`\n   b. Major behaviors: public static int sort_mixed_list(int mixed_list) {     int_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_mixed_list(int mixed_list) {\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part;\n}"}
{"id": "38_java", "language": "Java", "requirement": "Write a function to find the division of first even and odd number of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `772563`\n   b. Major behaviors: public static int div_even_odd(int list1) {     first_even =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int div_even_odd(int list1) {\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even/first_odd);\n}"}
{"id": "39_java", "language": "Java", "requirement": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `944647`\n   b. Major behaviors: import heapq from collections import Counter public static i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\nfrom collections import Counter\npublic static int rearange_string(int S) {\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if ((-heap[0][0]) * 2 > len(S) + 1) {\n        return \"\";\n        ans = []\n        // [manual conversion needed for while loop]: while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if (nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))) {\n            if (nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))) {\n                return \"\".join(ans) + (heap[0][1] if heap else \"\");\n            }\n        }\n    }\n}"}
{"id": "40_java", "language": "Java", "requirement": "Write a function to find frequency of the elements in a given list of lists using collections module.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7c7bfa`\n   b. Major behaviors: from collections import Counter from itertools import chain...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\nfrom itertools import chain\npublic static int freq_element(int nums) {\n    result = Counter(chain.from_iterable(nums))\n    return result;\n}"}
{"id": "41_java", "language": "Java", "requirement": "Write a function to filter even numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3bb42d`\n   b. Major behaviors: public static int filter_evennumbers(int nums) {     even_nu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int filter_evennumbers(int nums) {\n    even_nums = list(filter(lambda x: x%2 == 0, nums))\n    return even_nums;\n}"}
{"id": "42_java", "language": "Java", "requirement": "Write a python function to find the sum of repeated elements in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b712d1`\n   b. Major behaviors: public static int find_Sum(int arr, int n) {     return sum(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Sum(int arr, int n) {\n    return sum([x for x in arr if arr.count(x) > 1]);\n}"}
{"id": "43_java", "language": "Java", "requirement": "Write a function to find sequences of lowercase letters joined with an underscore using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7e8214`\n   b. Major behaviors: import re public static int text_match(int text) {     patte...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match(int text) {\n    patterns = '^[a-z]+_[a-z]+$'\n    if (re.search(patterns,  text)) {\n        return ('Found a match!');\n        } else {\n        return ('Not matched!');\n    }\n}"}
{"id": "44_java", "language": "Java", "requirement": "Write a function that matches a word at the beginning of a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4522f1`\n   b. Major behaviors: import re public static int text_match_string(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match_string(int text) {\n    patterns = '^\\w+'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return 'Not matched!';\n    }\n}"}
{"id": "45_java", "language": "Java", "requirement": "Write a function to find the gcd of the given array elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b2e2e7`\n   b. Major behaviors: public static int find_gcd(int x, int y) {     while(y):...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_gcd(int x, int y) {\n    while(y):\n    x, y = y, x % y\n    return x;\n    public static int get_gcd(int l) {\n        num1 = l[0]\n        num2 = l[1]\n        gcd = find_gcd(num1, num2)\n        // [manual conversion needed for loop]: for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n        return gcd;\n    }\n}"}
{"id": "46_java", "language": "Java", "requirement": "Write a python function to determine whether all the numbers are different from each other are not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `63a08f`\n   b. Major behaviors: public static int test_distinct(int data) {     if (len(data...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int test_distinct(int data) {\n    if (len(data) == len(set(data))) {\n        return True;\n        } else {\n        return False;;\n    }\n}"}
{"id": "47_java", "language": "Java", "requirement": "Write a python function to find the last digit when factorial of a divides factorial of b.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fdc256`\n   b. Major behaviors: public static int compute_Last_Digit(int A, int B) {     var...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int compute_Last_Digit(int A, int B) {\n    variable = 1\n    if ((A == B)) {\n        return 1;\n        } else if (((B - A) >= 5)) {\n        return 0;\n        } else {\n        // [manual conversion needed for loop]: for i in range(A + 1,B + 1):\n        variable = (variable * (i % 10)) % 10\n        return variable % 10;\n    }\n}"}
{"id": "48_java", "language": "Java", "requirement": "Write a python function to set all odd bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5f4bab`\n   b. Major behaviors: public static int odd_bit_set_number(int n) {     count = 0;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int odd_bit_set_number(int n) {\n    count = 0;res = 0;temp = n\n    // [manual conversion needed for while loop]: while temp > 0:\n    if (count % 2 == 0) {\n        res |= (1 << count)\n        count += 1\n        temp >>= 1\n        return (n | res);\n    }\n}"}
{"id": "49_java", "language": "Java", "requirement": "Write a function to extract every first or specified element from a given two-dimensional list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4c92bc`\n   b. Major behaviors: public static int specified_element(int nums, int N) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int specified_element(int nums, int N) {\n    result = [i[N] for i in nums]\n    return result;\n}"}
{"id": "50_java", "language": "Java", "requirement": "Write a function to find the list with minimum length using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f700ba`\n   b. Major behaviors: public static int min_length_list(int input_list) {     min_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_length_list(int input_list) {\n    min_length = min(len(x) for x in input_list )\n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)\n}"}
{"id": "51_java", "language": "Java", "requirement": "Write a function to print check if the triangle is equilateral or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `37e38e`\n   b. Major behaviors: public static int check_equilateral(int x, int y, int z) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_equilateral(int x, int y, int z) {\n    if (x == y == z) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "52_java", "language": "Java", "requirement": "Write a function to caluclate area of a parallelogram.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cf23d5`\n   b. Major behaviors: public static int parallelogram_area(int b, int h) {     are...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int parallelogram_area(int b, int h) {\n    area=b*h\n    return area;\n}"}
{"id": "53_java", "language": "Java", "requirement": "Write a python function to check whether the first and last characters of a given string are equal or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `73f1d7`\n   b. Major behaviors: public static int check_Equality(int str) {     if ((str[0]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_Equality(int str) {\n    if ((str[0] == str[-1])) {\n        return (\"Equal\");\n        } else {\n        return (\"Not Equal\");\n    }\n}"}
{"id": "54_java", "language": "Java", "requirement": "Write a function to sort the given array by using counting sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2f2e2d`\n   b. Major behaviors: public static int counting_sort(int my_list) {     max_value...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int counting_sort(int my_list) {\n    max_value = 0\n    // [manual conversion needed for loop]: for i in range(len(my_list)):\n    if (my_list[i] > max_value) {\n        max_value = my_list[i]\n        buckets = [0] * (max_value + 1)\n        // [manual conversion needed for loop]: for i in my_list:\n        buckets[i] += 1\n        i = 0\n        // [manual conversion needed for loop]: for j in range(max_value + 1):\n        // [manual conversion needed for loop]: for a in range(buckets[j]):\n        my_list[i] = j\n        i += 1\n        return my_list;\n    }\n}"}
{"id": "55_java", "language": "Java", "requirement": "Write a function to find t-nth term of geometric series.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `059d00`\n   b. Major behaviors: import math public static int tn_gp(int a, int n, int r) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int tn_gp(int a, int n, int r) {\n    tn = a * (math.pow(r, n - 1))\n    return tn;\n}"}
{"id": "56_java", "language": "Java", "requirement": "Write a python function to check if a given number is one less than twice its reverse.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8764f6`\n   b. Major behaviors: public static int rev(int num) {     rev_num = 0     // [man...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rev(int num) {\n    rev_num = 0\n    // [manual conversion needed for while loop]: while (num > 0):\n    rev_num = (rev_num * 10 + num % 10)\n    num = num // 10\n    return rev_num;\n    public static int check(int n) {\n        return (2 * rev(n) == n + 1);\n    }\n}"}
{"id": "57_java", "language": "Java", "requirement": "Write a python function to find the largest number that can be formed with the given digits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c87dba`\n   b. Major behaviors: public static int find_Max_Num(int arr, int n)) {     arr.so...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Max_Num(int arr, int n)) {\n    arr.sort(reverse = True)\n    num = arr[0]\n    // [manual conversion needed for loop]: for i in range(1,n) :\n    num = num * 10 + arr[i]\n    return num;\n}"}
{"id": "58_java", "language": "Java", "requirement": "Write a python function to check whether the given two integers have opposite sign or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4d324d`\n   b. Major behaviors: public static int opposite_Signs(int x, int y) {     return...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int opposite_Signs(int x, int y) {\n    return ((x ^ y) < 0);;\n}"}
{"id": "59_java", "language": "Java", "requirement": "Write a function to find the nth octagonal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fb22f7`\n   b. Major behaviors: public static int is_octagonal(int n) {     return 3 * n * n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_octagonal(int n) {\n    return 3 * n * n - 2 * n;\n}"}
{"id": "60_java", "language": "Java", "requirement": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a86b21`\n   b. Major behaviors: public static int max_len_sub(int arr, int n) {     mls=[]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_len_sub(int arr, int n) {\n    mls=[]\n    max = 0\n    // [manual conversion needed for loop]: for i in range(n):\n    mls.append(1)\n    // [manual conversion needed for loop]: for i in range(n):\n    // [manual conversion needed for loop]: for j in range(i):\n    if ((abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1)) {\n        mls[i] = mls[j] + 1\n        // [manual conversion needed for loop]: for i in range(n):\n        if ((max < mls[i])) {\n            max = mls[i]\n            return max;\n        }\n    }\n}"}
{"id": "61_java", "language": "Java", "requirement": "Write a python function to count number of substrings with the sum of digits equal to their length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `de78d2`\n   b. Major behaviors: from collections import defaultdict public static int count_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\npublic static int count_Substrings(int s, int n) {\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    // [manual conversion needed for loop]: for i in range(n):\n    sum += ord(s[i]) - ord('0')\n    count += mp[sum - (i + 1)]\n    mp[sum - (i + 1)] += 1\n    return count;\n}"}
{"id": "62_java", "language": "Java", "requirement": "Write a python function to find smallest number in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9dc3bc`\n   b. Major behaviors: public static int smallest_num(int xs) {     return min(xs);...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int smallest_num(int xs) {\n    return min(xs);\n}"}
{"id": "63_java", "language": "Java", "requirement": "Write a function to find the maximum difference between available pairs in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5b3b97`\n   b. Major behaviors: public static int max_difference(int test_list) {     temp =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_difference(int test_list) {\n    temp = [abs(b - a) for a, b in test_list]\n    res = max(temp)\n    return (res);\n}"}
{"id": "64_java", "language": "Java", "requirement": "Write a function to sort a list of tuples using lambda.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `de4024`\n   b. Major behaviors: public static int subject_marks(int subjectmarks) {     #sub...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int subject_marks(int subjectmarks) {\n    #subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks;\n}"}
{"id": "65_java", "language": "Java", "requirement": "Write a function of recursion list sum.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ccaab2`\n   b. Major behaviors: public static int recursive_list_sum(int data_list) {     to...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int recursive_list_sum(int data_list) {\n    total = 0\n    // [manual conversion needed for loop]: for element in data_list:\n    if (type(element) == type([])) {\n        total = total + recursive_list_sum(element)\n        } else {\n        total = total + element\n        return total;\n    }\n}"}
{"id": "66_java", "language": "Java", "requirement": "Write a python function to count positive numbers in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7a4f8d`\n   b. Major behaviors: public static int pos_count(int list) {     pos_count= 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int pos_count(int list) {\n    pos_count= 0\n    // [manual conversion needed for loop]: for num in list:\n    if (num >= 0) {\n        pos_count += 1\n        return pos_count;\n    }\n}"}
{"id": "67_java", "language": "Java", "requirement": "Write a function to find the number of ways to partition a set of bell numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `aed6cd`\n   b. Major behaviors: public static int bell_number(int n) {     bell = [[0 for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int bell_number(int n) {\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    // [manual conversion needed for loop]: for i in range(1, n+1):\n    bell[i][0] = bell[i-1][i-1]\n    // [manual conversion needed for loop]: for j in range(1, i+1):\n    bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0];\n}"}
{"id": "68_java", "language": "Java", "requirement": "Write a python function to check whether the given array is monotonic or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e2ae0f`\n   b. Major behaviors: public static int is_Monotonic(int A) {     return (all(A[i]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Monotonic(int A) {\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or;\n    all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n}"}
{"id": "69_java", "language": "Java", "requirement": "Write a function to check whether a list contains the given sublist or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bbe45d`\n   b. Major behaviors: public static int is_sublist(int l, int s) {     sub_set = F...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_sublist(int l, int s) {\n    sub_set = False\n    if (s == []) {\n        sub_set = True\n        } else if (s == l) {\n        sub_set = True\n        } else if (len(s) > len(l)) {\n        sub_set = False\n        } else {\n        // [manual conversion needed for loop]: for i in range(len(l)):\n        if (l[i] == s[0]) {\n            n = 1\n            // [manual conversion needed for while loop]: while (n < len(s)) and (l[i+n] == s[n]):\n            n += 1\n            if (n == len(s)) {\n                sub_set = True\n                return sub_set;\n            }\n        }\n    }\n}"}
{"id": "70_java", "language": "Java", "requirement": "Write a function to find whether all the given tuples have equal length or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `210181`\n   b. Major behaviors: public static int find_equal_tuple(int Input, int k) {     f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_equal_tuple(int Input, int k) {\n    flag = 1\n    // [manual conversion needed for loop]: for tuple in Input:\n    if (len(tuple) != k) {\n        flag = 0\n        break\n        return flag;\n        public static int get_equal(int Input, int k) {\n            if (find_equal_tuple(Input, k) == 1) {\n                return (\"All tuples have same length\");\n                } else {\n                return (\"All tuples do not have same length\");\n            }\n        }\n    }\n}"}
{"id": "71_java", "language": "Java", "requirement": "Write a function to sort a list of elements using comb sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `224333`\n   b. Major behaviors: public static int comb_sort(int nums) {     shrink_fact = 1....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int comb_sort(int nums) {\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    // [manual conversion needed for while loop]: while gaps > 1 or swapped:\n    gaps = int(float(gaps) / shrink_fact)\n    swapped = False\n    i = 0\n    // [manual conversion needed for while loop]: while gaps + i < len(nums):\n    if (nums[i] > nums[i+gaps]) {\n        nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n        swapped = True\n        i += 1\n        return nums;\n    }\n}"}
{"id": "72_java", "language": "Java", "requirement": "Write a python function to check whether the given number can be represented as difference of two squares or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `02272e`\n   b. Major behaviors: public static int dif_Square(int n) {     if ((n % 4 != 2))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int dif_Square(int n) {\n    if ((n % 4 != 2)) {\n        return True;\n        return False;\n    }\n}"}
{"id": "73_java", "language": "Java", "requirement": "Write a function to split the given string with multiple delimiters by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a3bafb`\n   b. Major behaviors: import re public static int multiple_split(int text) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int multiple_split(int text) {\n    return (re.split('; |, |\\*|\\n',text));\n}"}
{"id": "74_java", "language": "Java", "requirement": "Write a function to check whether it follows the sequence given in the patterns array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `714c50`\n   b. Major behaviors: public static int is_samepatterns(int colors, int patterns)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_samepatterns(int colors, int patterns) {\n    if (len(colors) != len(patterns)) {\n        return False;\n        sdict = {}\n        pset = set()\n        sset = set()\n        // [manual conversion needed for loop]: for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if (patterns[i] not in sdict.keys()) {\n            sdict[patterns[i]] = []\n\n            keys = sdict[patterns[i]]\n            keys.append(colors[i])\n            sdict[patterns[i]] = keys\n\n            if (len(pset) != len(sset)) {\n                return False;\n\n                // [manual conversion needed for loop]: for values in sdict.values():\n\n                // [manual conversion needed for loop]: for i in range(len(values) - 1):\n                if (values[i] != values[i+1]) {\n                    return False;\n\n                    return True;\n                }\n            }\n        }\n    }\n}"}
{"id": "75_java", "language": "Java", "requirement": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1702b6`\n   b. Major behaviors: public static int find_tuples(int test_list, int K) {     re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_tuples(int test_list, int K) {\n    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return (str(res));\n}"}
{"id": "76_java", "language": "Java", "requirement": "Write a python function to count the number of squares in a rectangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `954e1f`\n   b. Major behaviors: public static int count_Squares(int m, int n) {     if(n < m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Squares(int m, int n) {\n    if(n < m):\n    temp = m\n    m = n\n    n = temp\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2));\n}"}
{"id": "77_java", "language": "Java", "requirement": "Write a python function to find the difference between sum of even and odd digits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `54064b`\n   b. Major behaviors: public static int is_Diff(int n) {     return (n % 11 == 0);...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Diff(int n) {\n    return (n % 11 == 0);\n}"}
{"id": "78_java", "language": "Java", "requirement": "Write a python function to find number of integers with odd number of set bits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ee1fbb`\n   b. Major behaviors: public static int count_With_Odd_SetBits(int n) {     if ((n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_With_Odd_SetBits(int n) {\n    if ((n % 2 != 0)) {\n        return (n + 1) / 2;\n        count = bin(n).count('1')\n        ans = n / 2\n        if ((count % 2 != 0)) {\n            ans += 1\n            return ans;\n        }\n    }\n}"}
{"id": "79_java", "language": "Java", "requirement": "Write a python function to check whether the length of the word is odd or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `27a770`\n   b. Major behaviors: public static int word_len(int s) {     s = s.split(' ')...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int word_len(int s) {\n    s = s.split(' ')\n    // [manual conversion needed for loop]: for word in s:\n    if (len(word)%2!=0) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "80_java", "language": "Java", "requirement": "Write a function to find the nth tetrahedral number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e930b0`\n   b. Major behaviors: public static int tetrahedral_number(int n) {     return (n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tetrahedral_number(int n) {\n    return (n * (n + 1) * (n + 2)) / 6;\n}"}
{"id": "81_java", "language": "Java", "requirement": "Write a function to zip the two given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e5767`\n   b. Major behaviors: public static int zip_tuples(int test_tup1, int test_tup2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int zip_tuples(int test_tup1, int test_tup2) {\n    res = []\n    // [manual conversion needed for loop]: for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)]))\n    return (res);\n}"}
{"id": "82_java", "language": "Java", "requirement": "Write a function to find the volume of a sphere.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4a491f`\n   b. Major behaviors: import math public static int volume_sphere(int r) {     vol...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int volume_sphere(int r) {\n    volume=(4/3)*math.pi*r*r*r\n    return volume;\n}"}
{"id": "83_java", "language": "Java", "requirement": "Write a python function to find the character made by adding all the characters of the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cdceee`\n   b. Major behaviors: public static int get_Char(int strr) {     summ = 0     // [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_Char(int strr) {\n    summ = 0\n    // [manual conversion needed for loop]: for i in range(len(strr)):\n    summ += (ord(strr[i]) - ord('a') + 1)\n    if ((summ % 26 == 0)) {\n        return ord('z');\n        } else {\n        summ = summ % 26\n        return chr(ord('a') + summ - 1);\n    }\n}"}
{"id": "84_java", "language": "Java", "requirement": "Write a function to find the n-th number in newman conway sequence.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f21f60`\n   b. Major behaviors: public static int sequence(int n) {     if (n == 1 or n == 2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sequence(int n) {\n    if (n == 1 or n == 2) {\n        return 1;\n        } else {\n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1));\n    }\n}"}
{"id": "85_java", "language": "Java", "requirement": "Write a function to find the surface area of a sphere.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2af728`\n   b. Major behaviors: import math public static int surfacearea_sphere(int r) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int surfacearea_sphere(int r) {\n    surfacearea=4*math.pi*r*r\n    return surfacearea;\n}"}
{"id": "86_java", "language": "Java", "requirement": "Write a function to find nth centered hexagonal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `74fe9b`\n   b. Major behaviors: public static int centered_hexagonal_number(int n) {     ret...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int centered_hexagonal_number(int n) {\n    return 3 * n * (n - 1) + 1;\n}"}
{"id": "87_java", "language": "Java", "requirement": "Write a function to merge three dictionaries into a single expression.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a29c19`\n   b. Major behaviors: import collections as ct public static int merge_dictionarie...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import collections as ct\npublic static int merge_dictionaries_three(int dict1, int dict2, int dict3) {\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict;\n}"}
{"id": "88_java", "language": "Java", "requirement": "Write a function to get the frequency of the elements in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb2728`\n   b. Major behaviors: import collections public static int freq_count(int list1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import collections\npublic static int freq_count(int list1) {\n    freq_count= collections.Counter(list1)\n    return freq_count;\n}"}
{"id": "89_java", "language": "Java", "requirement": "Write a function to find the closest smaller number than n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `555ba4`\n   b. Major behaviors: public static int closest_num(int N) {     return (N - 1); }...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int closest_num(int N) {\n    return (N - 1);\n}"}
{"id": "90_java", "language": "Java", "requirement": "Write a python function to find the length of the longest word.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `47e5be`\n   b. Major behaviors: public static int len_log(int list1) {     max=len(list1[0])...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int len_log(int list1) {\n    max=len(list1[0])\n    // [manual conversion needed for loop]: for i in list1:\n    if (len(i)>max) {\n        max=len(i)\n        return max;\n    }\n}"}
{"id": "91_java", "language": "Java", "requirement": "Write a function to check if a substring is present in a given list of string values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `599fb2`\n   b. Major behaviors: public static int find_substring(int str1, int sub_str) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_substring(int str1, int sub_str) {\n    if (any(sub_str in s for s in str1)) {\n        return True;\n        return False;\n    }\n}"}
{"id": "92_java", "language": "Java", "requirement": "Write a function to check whether the given number is undulating or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6485bf`\n   b. Major behaviors: public static int is_undulating(int n) {     if ((len(n) <=...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_undulating(int n) {\n    if ((len(n) <= 2)) {\n        return False;\n        // [manual conversion needed for loop]: for i in range(2, len(n)):\n        if ((n[i - 2] != n[i])) {\n            return False;\n            return True;\n        }\n    }\n}"}
{"id": "93_java", "language": "Java", "requirement": "Write a function to calculate the value of 'a' to the power 'b'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9794b5`\n   b. Major behaviors: public static int power(int a, int b) {     if (b==0) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int power(int a, int b) {\n    if (b==0) {\n        return 1;\n        } else if (a==0) {\n        return 0;\n        } else if (b==1) {\n        return a;\n        } else {\n        return a*power(a,b-1);\n    }\n}"}
{"id": "94_java", "language": "Java", "requirement": "Write a function to extract the index minimum value record from the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3a5f7d`\n   b. Major behaviors: from operator import itemgetter public static int index_mini...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from operator import itemgetter\npublic static int index_minimum(int test_list) {\n    res = min(test_list, key = itemgetter(1))[0]\n    return (res);\n}"}
{"id": "95_java", "language": "Java", "requirement": "Write a python function to find the minimum length of sublist.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3c2fcd`\n   b. Major behaviors: public static int Find_Min_Length(int lst) {     minLength =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Find_Min_Length(int lst) {\n    minLength = min(len(x) for x in lst )\n    return minLength;\n}"}
{"id": "96_java", "language": "Java", "requirement": "Write a python function to find the number of divisors of a given integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0426c6`\n   b. Major behaviors: public static int divisor(int n) {     // [manual conversion...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int divisor(int n) {\n    // [manual conversion needed for loop]: for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n    return x;\n}"}
{"id": "97_java", "language": "Java", "requirement": "Write a function to find frequency count of list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `075c82`\n   b. Major behaviors: public static int frequency_lists(int list1) {     list1 = [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int frequency_lists(int list1) {\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    // [manual conversion needed for loop]: for num in list1:\n    if (num in dic_data.keys()) {\n        dic_data[num] += 1\n        } else {\n        key = num\n        value = 1\n        dic_data[key] = value\n        return dic_data;\n    }\n}"}
{"id": "98_java", "language": "Java", "requirement": "Write a function to multiply all the numbers in a list and divide with the length of the list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0e1543`\n   b. Major behaviors: public static int multiply_num(int numbers) {     total = 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int multiply_num(int numbers) {\n    total = 1\n    // [manual conversion needed for loop]: for x in numbers:\n    total *= x\n    return total/len(numbers);\n}"}
{"id": "99_java", "language": "Java", "requirement": "Write a function to convert the given decimal number to its binary equivalent.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `58c5a7`\n   b. Major behaviors: public static int decimal_to_binary(int n) {     return bin(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int decimal_to_binary(int n) {\n    return bin(n).replace(\"0b\",\"\");\n}"}
{"id": "100_java", "language": "Java", "requirement": "Write a function to find the next smallest palindrome of a specified number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1a533f`\n   b. Major behaviors: import sys public static int next_smallest_palindrome(int nu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys\npublic static int next_smallest_palindrome(int num) {\n    numstr = str(num)\n    // [manual conversion needed for loop]: for i in range(num+1,sys.maxsize):\n    if (str(i) == str(i)[::-1]) {\n        return i;\n    }\n}"}
{"id": "101_java", "language": "Java", "requirement": "Write a function to find the kth element in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0c0b33`\n   b. Major behaviors: public static int kth_element(int arr, int n, int k) {     /...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int kth_element(int arr, int n, int k) {\n    // [manual conversion needed for loop]: for i in range(n):\n    // [manual conversion needed for loop]: for j in range(0, n-i-1):\n    if (arr[j] > arr[j+1]) {\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n        return arr[k-1];\n    }\n}"}
{"id": "102_java", "language": "Java", "requirement": "Write a function to convert snake case string to camel case string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d7d544`\n   b. Major behaviors: public static int snake_to_camel(int word) {     import re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int snake_to_camel(int word) {\n    import re\n    return ''.join(x.capitalize() or '_' for x in word.split('_'));\n}"}
{"id": "103_java", "language": "Java", "requirement": "Write a function to find eulerian number a(n, m).", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc43e0`\n   b. Major behaviors: public static int eulerian_num(int n, int m) {     if ((m >=...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int eulerian_num(int n, int m) {\n    if ((m >= n or n == 0)) {\n        return 0;\n        if ((m == 0)) {\n            return 1;\n            return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m));\n        }\n    }\n}"}
{"id": "104_java", "language": "Java", "requirement": "Write a function to sort each sublist of strings in a given list of lists using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `01e4ed`\n   b. Major behaviors: public static int sort_sublists(int input_list) {     result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_sublists(int input_list) {\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list]\n    return result;\n}"}
{"id": "105_java", "language": "Java", "requirement": "Write a python function to count true booleans in the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0d5889`\n   b. Major behaviors: public static int count(int lst) {     return sum(lst); }...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count(int lst) {\n    return sum(lst);\n}"}
{"id": "106_java", "language": "Java", "requirement": "Write a function to add the given list to the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0285ae`\n   b. Major behaviors: public static int add_lists(int test_list, int test_tup) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int add_lists(int test_list, int test_tup) {\n    res = tuple(list(test_tup) + test_list)\n    return (res);\n}"}
{"id": "107_java", "language": "Java", "requirement": "Write a python function to count hexadecimal numbers for a given range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `38d547`\n   b. Major behaviors: public static int count_Hexadecimal(int L, int R)) {     cou...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Hexadecimal(int L, int R)) {\n    count = 0;\n    // [manual conversion needed for loop]: for i in range(L,R + 1) :\n    if ((i >= 10 and i <= 15) ) {\n        count += 1;\n        } else if ((i > 15) ) {\n        k = i;\n        // [manual conversion needed for while loop]: while (k != 0) :\n        if ((k % 16 >= 10) ) {\n            count += 1;\n            k = k // 16;\n            return count;;\n        }\n    }\n}"}
{"id": "108_java", "language": "Java", "requirement": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c87519`\n   b. Major behaviors: import heapq public static int merge_sorted_list(int num1, i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\npublic static int merge_sorted_list(int num1, int num2, int num3) {\n    num1=sorted(num1)\n    num2=sorted(num2)\n    num3=sorted(num3)\n    result = heapq.merge(num1,num2,num3)\n    return list(result);\n}"}
{"id": "109_java", "language": "Java", "requirement": "Write a python function to find the count of rotations of a binary string with odd value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8ab10f`\n   b. Major behaviors: public static int odd_Equivalent(int s, int n) {     count=0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int odd_Equivalent(int s, int n) {\n    count=0\n    // [manual conversion needed for loop]: for i in range(0,n):\n    if ((s[i] == '1')) {\n        count = count + 1\n        return count;\n    }\n}"}
{"id": "110_java", "language": "Java", "requirement": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `44d0d5`\n   b. Major behaviors: public static int extract_missing(int test_list, int strt_va...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_missing(int test_list, int strt_val, int stop_val) {\n    res = []\n    // [manual conversion needed for loop]: for sub in test_list:\n    if (sub[0] > strt_val) {\n        res.append((strt_val, sub[0]))\n        strt_val = sub[1]\n        if (strt_val < stop_val) {\n            res.append((strt_val, stop_val))\n            return (res);\n        }\n    }\n}"}
{"id": "111_java", "language": "Java", "requirement": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8f1fb5`\n   b. Major behaviors: public static int common_in_nested_lists(int nestedlist) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int common_in_nested_lists(int nestedlist) {\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result;\n}"}
{"id": "112_java", "language": "Java", "requirement": "Write a python function to find the perimeter of a cylinder.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7faff0`\n   b. Major behaviors: public static int perimeter(int diameter, int height)) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int perimeter(int diameter, int height)) {\n    return 2*(diameter+height);\n}"}
{"id": "113_java", "language": "Java", "requirement": "Write a function to check if a string represents an integer or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3f927f`\n   b. Major behaviors: public static int check_integer(int text) {     text = text....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_integer(int text) {\n    text = text.strip()\n    if (len(text) < 1) {\n        return None;\n        } else {\n        if (all(text[i] in \"0123456789\" for i in range(len(text)))) {\n            return True;\n            } else if ((text[0] in \"+-\") and \\) {\n            all(text[i] in \"0123456789\" for i in range(1,len(text))):\n            return True;\n            } else {\n            return False;\n        }\n    }\n}"}
{"id": "114_java", "language": "Java", "requirement": "Write a function to assign frequency to each tuple in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f39f91`\n   b. Major behaviors: from collections import Counter public static int assign_fre...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\npublic static int assign_freq(int test_list) {\n    res = [(*key, val) for key, val in Counter(test_list).items()]\n    return (str(res));\n}"}
{"id": "115_java", "language": "Java", "requirement": "Write a function to check whether all dictionaries in a list are empty or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0df032`\n   b. Major behaviors: public static int empty_dit(int list1) {     empty_dit=all(n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int empty_dit(int list1) {\n    empty_dit=all(not d for d in list1)\n    return empty_dit;\n}"}
{"id": "116_java", "language": "Java", "requirement": "Write a function to convert a given tuple of positive integers into an integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `57de7a`\n   b. Major behaviors: public static int tuple_to_int(int nums) {     result = int(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tuple_to_int(int nums) {\n    result = int(''.join(map(str,nums)))\n    return result;\n}"}
{"id": "117_java", "language": "Java", "requirement": "Write a function to convert all possible convertible elements in the list to float.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6db4c2`\n   b. Major behaviors: public static int list_to_float(int test_list) {     res = [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int list_to_float(int test_list) {\n    res = []\n    // [manual conversion needed for loop]: for tup in test_list:\n    temp = []\n    // [manual conversion needed for loop]: for ele in tup:\n    if (ele.isalpha()) {\n        temp.append(ele)\n        } else {\n        temp.append(float(ele))\n        res.append((temp[0],temp[1]))\n        return (str(res));\n    }\n}"}
{"id": "118_java", "language": "Java", "requirement": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6b209d`\n   b. Major behaviors: public static int string_to_list(int string) {     lst = lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int string_to_list(int string) {\n    lst = list(string.split(\" \"))\n    return lst;\n}"}
{"id": "119_java", "language": "Java", "requirement": "Write a python function to find the element that appears only once in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `05acea`\n   b. Major behaviors: public static int search(int arr, int n)) {     XOR = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int search(int arr, int n)) {\n    XOR = 0\n    // [manual conversion needed for loop]: for i in range(n) :\n    XOR = XOR ^ arr[i]\n    return (XOR);\n}"}
{"id": "120_java", "language": "Java", "requirement": "Write a function to find the maximum product from the pairs of tuples within a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `69b0de`\n   b. Major behaviors: public static int max_product_tuple(int list1) {     result_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_product_tuple(int list1) {\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max;\n}"}
{"id": "121_java", "language": "Java", "requirement": "Write a function to find the triplet with sum of the given array", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `684e7a`\n   b. Major behaviors: public static int check_triplet(int A, int n, int sum, int c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_triplet(int A, int n, int sum, int count) {\n    if (count == 3 and sum == 0) {\n        return True;\n        if (count == 3 or n == 0 or sum < 0) {\n            return False;\n            return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\;\n            check_triplet(A, n - 1, sum, count)\n        }\n    }\n}"}
{"id": "122_java", "language": "Java", "requirement": "Write a function to find n\u2019th smart number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc12a7`\n   b. Major behaviors: MAX = 3000 public static int smartNumber(int n) {     primes...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "MAX = 3000\npublic static int smartNumber(int n) {\n    primes = [0] * MAX\n    result = []\n    // [manual conversion needed for loop]: for i in range(2, MAX):\n    if ((primes[i] == 0)) {\n        primes[i] = 1\n        j = i * 2\n        // [manual conversion needed for while loop]: while (j < MAX):\n        primes[j] -= 1\n        if (( (primes[j] + 3) == 0)) {\n            result.append(j)\n            j = j + i\n            result.sort()\n            return result[n - 1];\n        }\n    }\n}"}
{"id": "123_java", "language": "Java", "requirement": "Write a function to sum all amicable numbers from 1 to a specified number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7271e3`\n   b. Major behaviors: public static int amicable_numbers_sum(int limit) {     if (...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int amicable_numbers_sum(int limit) {\n    if (not isinstance(limit, int)) {\n        return \"Input is not an integer!\";\n        if (limit < 1) {\n            return \"Input must be bigger than 0!\";\n            amicables = set()\n            // [manual conversion needed for loop]: for num in range(2, limit+1):\n            if (num in amicables) {\n                continue\n                sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n                sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n                if (num == sum_fact2 and num != sum_fact) {\n                    amicables.add(num)\n                    amicables.add(sum_fact2)\n                    return sum(amicables);\n                }\n            }\n        }\n    }\n}"}
{"id": "124_java", "language": "Java", "requirement": "Write a function to get the angle of a complex number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4ca586`\n   b. Major behaviors: import cmath public static int angle_complex(int a, int b) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import cmath\npublic static int angle_complex(int a, int b) {\n    cn=complex(a,b)\n    angle=cmath.phase(a+b)\n    return angle;\n}"}
{"id": "125_java", "language": "Java", "requirement": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fb13e5`\n   b. Major behaviors: public static int find_length(int string, int n) {     curre...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_length(int string, int n) {\n    current_sum = 0\n    max_sum = 0\n    // [manual conversion needed for loop]: for i in range(n):\n    current_sum += (1 if string[i] == '0' else -1)\n    if (current_sum < 0) {\n        current_sum = 0\n        max_sum = max(current_sum, max_sum)\n        return max_sum if max_sum else 0;\n    }\n}"}
{"id": "126_java", "language": "Java", "requirement": "Write a python function to find the sum of common divisors of two given numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `463ab9`\n   b. Major behaviors: public static int sum(int a, int b) {     sum = 0     // [ma...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum(int a, int b) {\n    sum = 0\n    // [manual conversion needed for loop]: for i in range (1,min(a,b)):\n    if ((a % i == 0 and b % i == 0)) {\n        sum += i\n        return sum;\n    }\n}"}
{"id": "127_java", "language": "Java", "requirement": "Write a function to multiply two integers without using the * operator in python.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e9944f`\n   b. Major behaviors: public static int multiply_int(int x, int y) {     if (y < 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n        } else if (y == 0) {\n        return 0;\n        } else if (y == 1) {\n        return x;\n        } else {\n        return x + multiply_int(x, y - 1);\n    }\n}"}
{"id": "128_java", "language": "Java", "requirement": "Write a function to shortlist words that are longer than n from a given list of words.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1aeb45`\n   b. Major behaviors: public static int long_words(int n, int str) {     word_len...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int long_words(int n, int str) {\n    word_len = []\n    txt = str.split(\" \")\n    // [manual conversion needed for loop]: for x in txt:\n    if (len(x) > n) {\n        word_len.append(x)\n        return word_len;\n    }\n}"}
{"id": "129_java", "language": "Java", "requirement": "Write a function to calculate magic square.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a0dc59`\n   b. Major behaviors: public static int magic_square_test(int my_matrix) {     iSi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int magic_square_test(int my_matrix) {\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])\n    // [manual conversion needed for loop]: for col in range(iSize):\n    sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    // [manual conversion needed for loop]: for i in range(0,iSize):\n    result1 +=my_matrix[i][i]\n    sum_list.append(result1)\n    result2 = 0\n    // [manual conversion needed for loop]: for i in range(iSize-1,-1,-1):\n    result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if (len(set(sum_list))>1) {\n        return False;\n        return True;\n    }\n}"}
{"id": "130_java", "language": "Java", "requirement": "Write a function to find the item with maximum frequency in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `596bf9`\n   b. Major behaviors: from collections import defaultdict public static int max_oc...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\npublic static int max_occurrences(int nums) {\n    dict = defaultdict(int)\n    // [manual conversion needed for loop]: for i in nums:\n    dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result;\n}"}
{"id": "131_java", "language": "Java", "requirement": "Write a python function to reverse only the vowels of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b09490`\n   b. Major behaviors: public static int reverse_vowels(int str1) {     vowels = \"\"...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int reverse_vowels(int str1) {\n    vowels = \"\"\n    // [manual conversion needed for loop]: for char in str1:\n    if (char in \"aeiouAEIOU\") {\n        vowels += char\n        result_string = \"\"\n        // [manual conversion needed for loop]: for char in str1:\n        if (char in \"aeiouAEIOU\") {\n            result_string += vowels[-1]\n            vowels = vowels[:-1]\n            } else {\n            result_string += char\n            return result_string;\n        }\n    }\n}"}
{"id": "132_java", "language": "Java", "requirement": "Write a function to convert tuple to a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `13f181`\n   b. Major behaviors: public static int tup_string(int tup1) {     str =  ''.join(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tup_string(int tup1) {\n    str =  ''.join(tup1)\n    return str;\n}"}
{"id": "133_java", "language": "Java", "requirement": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e27330`\n   b. Major behaviors: public static int sum_negativenum(int nums) {     sum_negati...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_negativenum(int nums) {\n    sum_negativenum = list(filter(lambda nums:nums<0,nums))\n    return sum(sum_negativenum);\n}"}
{"id": "134_java", "language": "Java", "requirement": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `68f830`\n   b. Major behaviors: public static int check_last(int arr, int n, int p) {     _s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_last(int arr, int n, int p) {\n    _sum = 0\n    // [manual conversion needed for loop]: for i in range(n):\n    _sum = _sum + arr[i]\n    if (p == 1) {\n        if (_sum % 2 == 0) {\n            return \"ODD\";\n            } else {\n            return \"EVEN\";\n            return \"EVEN\";\n        }\n    }\n}"}
{"id": "135_java", "language": "Java", "requirement": "Write a function to find the nth hexagonal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `847d68`\n   b. Major behaviors: public static int hexagonal_num(int n) {     return n*(2*n -...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int hexagonal_num(int n) {\n    return n*(2*n - 1);\n}"}
{"id": "136_java", "language": "Java", "requirement": "Write a function to calculate electricity bill.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d5c07a`\n   b. Major behaviors: public static int cal_electbill(int units) {     if(units <...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int cal_electbill(int units) {\n    if(units < 50):\n    amount = units * 2.60\n    surcharge = 25\n    elif(units <= 100):\n    amount = 130 + ((units - 50) * 3.25)\n    surcharge = 35\n    elif(units <= 200):\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n    surcharge = 45\n    } else {\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n    surcharge = 75\n    total = amount + surcharge\n    return total;\n}"}
{"id": "137_java", "language": "Java", "requirement": "Write a function to find the ration of zeroes in an array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fa5361`\n   b. Major behaviors: from array import array public static int zero_count(int num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from array import array\npublic static int zero_count(int nums) {\n    n = len(nums)\n    n1 = 0\n    // [manual conversion needed for loop]: for x in nums:\n    if (x == 0) {\n        n1 += 1\n        } else {\n        None\n        return round(n1/n,2);\n    }\n}"}
{"id": "138_java", "language": "Java", "requirement": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d1733c`\n   b. Major behaviors: public static int is_Sum_Of_Powers_Of_Two(int n) {     if ((...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Sum_Of_Powers_Of_Two(int n) {\n    if ((n % 2 == 1)) {\n        return False;\n        } else {\n        return True;\n    }\n}"}
{"id": "139_java", "language": "Java", "requirement": "Write a function to find the circumference of a circle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `052d13`\n   b. Major behaviors: public static int circle_circumference(int r) {     perimete...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int circle_circumference(int r) {\n    perimeter=2*3.1415*r\n    return perimeter;\n}"}
{"id": "140_java", "language": "Java", "requirement": "Write a function to extract elements that occur singly in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1e4cac`\n   b. Major behaviors: public static int extract_singly(int test_list) {     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_singly(int test_list) {\n    res = []\n    temp = set()\n    // [manual conversion needed for loop]: for inner in test_list:\n    // [manual conversion needed for loop]: for ele in inner:\n    if (not ele in temp) {\n        temp.add(ele)\n        res.append(ele)\n        return (res);\n    }\n}"}
{"id": "141_java", "language": "Java", "requirement": "Write a function to sort a list of elements using pancake sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `018b2d`\n   b. Major behaviors: public static int pancake_sort(int nums) {     arr_len = len...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int pancake_sort(int nums) {\n    arr_len = len(nums)\n    // [manual conversion needed for while loop]: while arr_len > 1:\n    mi = nums.index(max(nums[0:arr_len]))\n    nums = nums[mi::-1] + nums[mi+1:len(nums)]\n    nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n    arr_len -= 1\n    return nums;\n}"}
{"id": "142_java", "language": "Java", "requirement": "Write a function to count the same pair in three given lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `41f6a9`\n   b. Major behaviors: public static int count_samepair(int list1, int list2, int l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_samepair(int list1, int list2, int list3) {\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result;\n}"}
{"id": "143_java", "language": "Java", "requirement": "Write a function to find number of lists present in the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `59e0db`\n   b. Major behaviors: public static int find_lists(int Input) {     if (isinstance...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_lists(int Input) {\n    if (isinstance(Input, list)) {\n        return 1;\n        } else {\n        return len(Input);\n    }\n}"}
{"id": "144_java", "language": "Java", "requirement": "Write a python function to find the sum of absolute differences in all pairs of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `501563`\n   b. Major behaviors: public static int sum_Pairs(int arr, int n) {     sum = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_Pairs(int arr, int n) {\n    sum = 0\n    // [manual conversion needed for loop]: for i in range(n - 1,-1,-1):\n    sum += i*arr[i] - (n-1-i) * arr[i]\n    return sum;\n}"}
{"id": "145_java", "language": "Java", "requirement": "Write a python function to find the maximum difference between any two elements in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8bedb7`\n   b. Major behaviors: public static int max_Abs_Diff(int arr, int n) {     minEle...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_Abs_Diff(int arr, int n) {\n    minEle = arr[0]\n    maxEle = arr[0]\n    // [manual conversion needed for loop]: for i in range(1, n):\n    minEle = min(minEle,arr[i])\n    maxEle = max(maxEle,arr[i])\n    return (maxEle - minEle);\n}"}
{"id": "146_java", "language": "Java", "requirement": "Write a function to find the ascii value of total characters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d1e06f`\n   b. Major behaviors: public static int ascii_value_string(int str1) {     // [man...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int ascii_value_string(int str1) {\n    // [manual conversion needed for loop]: for i in range(len(str1)):\n    return ord(str1[i]);\n}"}
{"id": "147_java", "language": "Java", "requirement": "Write a function to find the maximum total path sum in the given triangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4dae14`\n   b. Major behaviors: public static int max_path_sum(int tri, int m, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_path_sum(int tri, int m, int n) {\n    // [manual conversion needed for loop]: for i in range(m-1, -1, -1):\n    // [manual conversion needed for loop]: for j in range(i+1):\n    if ((tri[i+1][j] > tri[i+1][j+1])) {\n        tri[i][j] += tri[i+1][j]\n        } else {\n        tri[i][j] += tri[i+1][j+1]\n        return tri[0][0];\n    }\n}"}
{"id": "148_java", "language": "Java", "requirement": "Write a function to divide a number into two parts such that the sum of digits is maximum.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6eb321`\n   b. Major behaviors: public static int sum_digits_single(int x)) {     ans = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_digits_single(int x)) {\n    ans = 0\n    // [manual conversion needed for while loop]: while x :\n    ans += x % 10\n    x //= 10\n    return ans;\n    public static int closest(int x)) {\n        ans = 0\n        // [manual conversion needed for while loop]: while (ans * 10 + 9 <= x) :\n        ans = ans * 10 + 9\n        return ans;\n        public static int sum_digits_twoparts(int N)) {\n            A = closest(N)\n            return sum_digits_single(A) + sum_digits_single(N - A);\n        }\n    }\n}"}
{"id": "149_java", "language": "Java", "requirement": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c569fc`\n   b. Major behaviors: public static int longest_subseq_with_diff_one(int arr, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int longest_subseq_with_diff_one(int arr, int n) {\n    dp = [1 for i in range(n)]\n    // [manual conversion needed for loop]: for i in range(n):\n    // [manual conversion needed for loop]: for j in range(i):\n    if (((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1))) {\n        dp[i] = max(dp[i], dp[j]+1)\n        result = 1\n        // [manual conversion needed for loop]: for i in range(n):\n        if ((result < dp[i])) {\n            result = dp[i]\n            return result;\n        }\n    }\n}"}
{"id": "150_java", "language": "Java", "requirement": "Write a python function to find whether the given number is present in the infinite sequence or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb10cb`\n   b. Major behaviors: public static int does_Contain_B(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int does_Contain_B(int a, int b, int c) {\n    if ((a == b)) {\n        return True;\n        if (((b - a) * c > 0 and (b - a) % c == 0)) {\n            return True;\n            return False;\n        }\n    }\n}"}
{"id": "151_java", "language": "Java", "requirement": "Write a python function to check whether the given number is co-prime or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `27f969`\n   b. Major behaviors: public static int gcd(int p, int q) {     // [manual convers...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int gcd(int p, int q) {\n    // [manual conversion needed for while loop]: while q != 0:\n    p, q = q,p%q\n    return p;\n    public static int is_coprime(int x, int y) {\n        return gcd(x,y) == 1;\n    }\n}"}
{"id": "152_java", "language": "Java", "requirement": "Write a function to sort the given array by using merge sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fd3ca6`\n   b. Major behaviors: public static int merge(int a, int b) {     c = []     // [m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int merge(int a, int b) {\n    c = []\n    // [manual conversion needed for while loop]: while len(a) != 0 and len(b) != 0:\n    if (a[0] < b[0]) {\n        c.append(a[0])\n        a.remove(a[0])\n        } else {\n        c.append(b[0])\n        b.remove(b[0])\n        if (len(a) == 0) {\n            c += b\n            } else {\n            c += a\n            return c;\n            public static int merge_sort(int x) {\n                if (len(x) == 0 or len(x) == 1) {\n                    return x;\n                    } else {\n                    middle = len(x)//2\n                    a = merge_sort(x[:middle])\n                    b = merge_sort(x[middle:])\n                    return merge(a,b);\n                }\n            }\n        }\n    }\n}"}
{"id": "153_java", "language": "Java", "requirement": "Write a function to find the vertex of a parabola.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0f66a8`\n   b. Major behaviors: public static int parabola_vertex(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int parabola_vertex(int a, int b, int c) {\n    vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n    return vertex;\n}"}
{"id": "154_java", "language": "Java", "requirement": "Write a function to extract every specified element from a given two dimensional list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4c92bc`\n   b. Major behaviors: public static int specified_element(int nums, int N) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int specified_element(int nums, int N) {\n    result = [i[N] for i in nums]\n    return result;\n}"}
{"id": "155_java", "language": "Java", "requirement": "Write a python function to toggle all even bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a47976`\n   b. Major behaviors: public static int even_bit_toggle_number(int n)) {     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int even_bit_toggle_number(int n)) {\n    res = 0; count = 0; temp = n\n    // [manual conversion needed for while loop]: while (temp > 0) :\n    if ((count % 2 == 1) ) {\n        res = res | (1 << count)\n        count = count + 1\n        temp >>= 1\n        return n ^ res;\n    }\n}"}
{"id": "156_java", "language": "Java", "requirement": "Write a function to convert a tuple of string values to a tuple of integer values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7090c9`\n   b. Major behaviors: public static int tuple_int_str(int tuple_str) {     result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tuple_int_str(int tuple_str) {\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result;\n}"}
{"id": "157_java", "language": "Java", "requirement": "Write a function to reflect the run-length encoding from a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a697bd`\n   b. Major behaviors: from itertools import groupby public static int encode_list(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby\npublic static int encode_list(int list1) {\n    return [[len(list(group)), key] for key, group in groupby(list1)];\n}"}
{"id": "158_java", "language": "Java", "requirement": "Write a python function to find k number of operations required to make all elements equal.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e16931`\n   b. Major behaviors: public static int min_Ops(int arr, int n, int k) {     max1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_Ops(int arr, int n, int k) {\n    max1 = max(arr)\n    res = 0\n    // [manual conversion needed for loop]: for i in range(0,n):\n    if (((max1 - arr[i]) % k != 0)) {\n        return -1;\n        } else {\n        res += (max1 - arr[i]) / k\n        return int(res);\n    }\n}"}
{"id": "159_java", "language": "Java", "requirement": "Write a function to print the season for the given month and day.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ce9c0f`\n   b. Major behaviors: public static int month_season(int month, int days) {     if...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int month_season(int month, int days) {\n    if (month in ('January', 'February', 'March')) {\n        season = 'winter'\n        } else if (month in ('April', 'May', 'June')) {\n        season = 'spring'\n        } else if (month in ('July', 'August', 'September')) {\n        season = 'summer'\n        } else {\n        season = 'autumn'\n        if ((month == 'March') and (days > 19)) {\n            season = 'spring'\n            } else if ((month == 'June') and (days > 20)) {\n            season = 'summer'\n            } else if ((month == 'September') and (days > 21)) {\n            season = 'autumn'\n            } else if ((month == 'October') and (days > 21)) {\n            season = 'autumn'\n            } else if ((month == 'November') and (days > 21)) {\n            season = 'autumn'\n            } else if ((month == 'December') and (days > 20)) {\n            season = 'winter'\n            return season;\n        }\n    }\n}"}
{"id": "160_java", "language": "Java", "requirement": "Write a function to find x and y that satisfies ax + by = n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `871292`\n   b. Major behaviors: public static int solution(int a, int b, int n) {     i = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int solution(int a, int b, int n) {\n    i = 0\n    // [manual conversion needed for while loop]: while i * a <= n:\n    if ((n - (i * a)) % b == 0) {\n        return (\"x = \",i ,\", y = \",;\n        int((n - (i * a)) / b))\n        return 0;\n        i = i + 1\n        return (\"No solution\");\n    }\n}"}
{"id": "161_java", "language": "Java", "requirement": "Write a function to remove all elements from a given list present in another list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ac6484`\n   b. Major behaviors: public static int remove_elements(int list1, int list2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_elements(int list1, int list2) {\n    result = [x for x in list1 if x not in list2]\n    return result;\n}"}
{"id": "162_java", "language": "Java", "requirement": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8026bc`\n   b. Major behaviors: public static int sum_series(int n) {     if (n < 1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_series(int n) {\n    if (n < 1) {\n        return 0;\n        } else {\n        return n + sum_series(n - 2);\n    }\n}"}
{"id": "163_java", "language": "Java", "requirement": "Write a function to calculate the area of a regular polygon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `536eda`\n   b. Major behaviors: from math import tan, pi public static int area_polygon(int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from math import tan, pi\npublic static int area_polygon(int s, int l) {\n    area = s * (l ** 2) / (4 * tan(pi / s))\n    return area;\n}"}
{"id": "164_java", "language": "Java", "requirement": "Write a python function to check whether the sum of divisors are same or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `13fc98`\n   b. Major behaviors: import math public static int divSum(int n) {     sum = 1;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int divSum(int n) {\n    sum = 1;\n    i = 2;\n    while(i * i <= n):\n    if ((n % i == 0)) {\n        sum = (sum + i +math.floor(n / i));\n        i += 1;\n        return sum;;\n        public static int areEquivalent(int num1, int num2) {\n            return divSum(num1) == divSum(num2);;\n        }\n    }\n}"}
{"id": "165_java", "language": "Java", "requirement": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d20c0c`\n   b. Major behaviors: public static int count_char_position(int str1) {     count_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_char_position(int str1) {\n    count_chars = 0\n    // [manual conversion needed for loop]: for i in range(len(str1)):\n    if (((i == ord(str1[i]) - ord('A')) or) {\n        (i == ord(str1[i]) - ord('a'))):\n        count_chars += 1\n        return count_chars;\n    }\n}"}
{"id": "166_java", "language": "Java", "requirement": "Write a python function to count the pairs with xor as an even number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a9ea97`\n   b. Major behaviors: public static int find_even_Pair(int A, int N) {     evenPai...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_even_Pair(int A, int N) {\n    evenPair = 0\n    // [manual conversion needed for loop]: for i in range(0,N):\n    // [manual conversion needed for loop]: for j in range(i+1,N):\n    if (((A[i] ^ A[j]) % 2 == 0)) {\n        evenPair+=1\n        return evenPair;;\n    }\n}"}
{"id": "167_java", "language": "Java", "requirement": "Write a python function to find smallest power of 2 greater than or equal to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d1fd2c`\n   b. Major behaviors: public static int next_Power_Of_2(int n) {     count = 0;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int next_Power_Of_2(int n) {\n    count = 0;\n    if ((n and not(n & (n - 1)))) {\n        return n;\n        while( n != 0):\n        n >>= 1\n        count += 1\n        return 1 << count;;\n    }\n}"}
{"id": "168_java", "language": "Java", "requirement": "Write a python function to find the frequency of a number in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `80a07f`\n   b. Major behaviors: public static int frequency(int a, int x) {     count = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int frequency(int a, int x) {\n    count = 0\n    // [manual conversion needed for loop]: for i in a:\n    if (i == x: count += 1) {\n        return count;\n    }\n}"}
{"id": "169_java", "language": "Java", "requirement": "Write a function to calculate the nth pell number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d011ea`\n   b. Major behaviors: public static int get_pell(int n) {     if ((n <= 2)) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_pell(int n) {\n    if ((n <= 2)) {\n        return n;\n        a = 1\n        b = 2\n        // [manual conversion needed for loop]: for i in range(3, n+1):\n        c = 2 * b + a\n        a = b\n        b = c\n        return b;\n    }\n}"}
{"id": "170_java", "language": "Java", "requirement": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8e3b08`\n   b. Major behaviors: public static int sum_range_list(int list1, int m, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_range_list(int list1, int m, int n) {\n    sum_range = 0\n    // [manual conversion needed for loop]: for i in range(m, n+1, 1):\n    sum_range += list1[i]\n    return sum_range;\n}"}
{"id": "171_java", "language": "Java", "requirement": "Write a function to find the perimeter of a pentagon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3aad38`\n   b. Major behaviors: import math public static int perimeter_pentagon(int a) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int perimeter_pentagon(int a) {\n    perimeter=(5*a)\n    return perimeter;\n}"}
{"id": "172_java", "language": "Java", "requirement": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8dc73a`\n   b. Major behaviors: public static int count_occurance(int s) {     count=0     /...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_occurance(int s) {\n    count=0\n    // [manual conversion needed for loop]: for i in range(len(s)):\n    if ((s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd')) {\n        count = count + 1\n        return count;\n    }\n}"}
{"id": "173_java", "language": "Java", "requirement": "Write a function to remove everything except alphanumeric characters from a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5738fb`\n   b. Major behaviors: import re public static int remove_splchar(int text) {     p...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_splchar(int text) {\n    pattern = re.compile('[\\W_]+')\n    return (pattern.sub('', text));\n}"}
{"id": "174_java", "language": "Java", "requirement": "Write a function to group a sequence of key-value pairs into a dictionary of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `478ca4`\n   b. Major behaviors: public static int group_keyvalue(int l) {     result = {}...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int group_keyvalue(int l) {\n    result = {}\n    // [manual conversion needed for loop]: for k, v in l:\n    result.setdefault(k, []).append(v)\n    return result;\n}"}
{"id": "175_java", "language": "Java", "requirement": "Write a function to verify validity of a string of parentheses.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `be4bfe`\n   b. Major behaviors: public static int is_valid_parenthese(int str1) {     stack,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_valid_parenthese(int str1) {\n    stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    // [manual conversion needed for loop]: for parenthese in str1:\n    if (parenthese in pchar) {\n        stack.append(parenthese)\n        } else if (len(stack) == 0 or pchar[stack.pop()] != parenthese) {\n        return False;\n        return len(stack) == 0;\n    }\n}"}
{"id": "176_java", "language": "Java", "requirement": "Write a function to find the perimeter of a triangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `01cd6b`\n   b. Major behaviors: public static int perimeter_triangle(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int perimeter_triangle(int a, int b, int c) {\n    perimeter=a+b+c\n    return perimeter;\n}"}
{"id": "177_java", "language": "Java", "requirement": "Write a python function to find two distinct numbers such that their lcm lies within the given range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9e4e56`\n   b. Major behaviors: public static int answer(int L, int R) {     if ((2 * L <= R...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int answer(int L, int R) {\n    if ((2 * L <= R)) {\n        return (L ,2*L);\n        } else {\n        return (-1);\n    }\n}"}
{"id": "178_java", "language": "Java", "requirement": "Write a function to search some literals strings in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `265534`\n   b. Major behaviors: import re public static int string_literals(int patterns, in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int string_literals(int patterns, int text) {\n    // [manual conversion needed for loop]: for pattern in patterns:\n    if (re.search(pattern,  text)) {\n        return ('Matched!');\n        } else {\n        return ('Not Matched!');\n    }\n}"}
{"id": "179_java", "language": "Java", "requirement": "Write a function to find if the given number is a keith number or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `82aca6`\n   b. Major behaviors: public static int is_num_keith(int x) {     terms = []     t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_num_keith(int x) {\n    terms = []\n    temp = x\n    n = 0\n    // [manual conversion needed for while loop]: while (temp > 0):\n    terms.append(temp % 10)\n    temp = int(temp / 10)\n    n+=1\n    terms.reverse()\n    next_term = 0\n    i = n\n    // [manual conversion needed for while loop]: while (next_term < x):\n    next_term = 0\n    // [manual conversion needed for loop]: for j in range(1,n+1):\n    next_term += terms[i - j]\n    terms.append(next_term)\n    i+=1\n    return (next_term == x);\n}"}
{"id": "180_java", "language": "Java", "requirement": "Write a function to calculate distance between two points using latitude and longitude.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2a55d7`\n   b. Major behaviors: from math import radians, sin, cos, acos public static int d...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from math import radians, sin, cos, acos\npublic static int distance_lat_long(int slat, int slon, int elat, int elon) {\n    dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n    return dist;\n}"}
{"id": "181_java", "language": "Java", "requirement": "Write a function to find the longest common prefix in the given set of strings.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d73813`\n   b. Major behaviors: public static int common_prefix_util(int str1, int str2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int common_prefix_util(int str1, int str2) {\n    result = \"\";\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    // [manual conversion needed for while loop]: while i <= n1 - 1 and j <= n2 - 1:\n    if ((str1[i] != str2[j])) {\n        break\n        result += str1[i]\n        i += 1\n        j += 1\n        return (result);\n        public static int common_prefix(int arr, int n) {\n            prefix = arr[0]\n            // [manual conversion needed for loop]: for i in range (1, n):\n            prefix = common_prefix_util(prefix, arr[i])\n            return (prefix);\n        }\n    }\n}"}
{"id": "182_java", "language": "Java", "requirement": "Write a function to find uppercase, lowercase, special character and numeric values using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `557b2c`\n   b. Major behaviors: import re public static int find_character(int string) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int find_character(int string) {\n    uppercase_characters = re.findall(r\"[A-Z]\", string)\n    lowercase_characters = re.findall(r\"[a-z]\", string)\n    numerical_characters = re.findall(r\"[0-9]\", string)\n    special_characters = re.findall(r\"[, .!?]\", string)\n    return uppercase_characters, lowercase_characters, numerical_characters, special_characters;\n}"}
{"id": "183_java", "language": "Java", "requirement": "Write a function to count all the distinct pairs having a difference of k in any array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a4f6f2`\n   b. Major behaviors: public static int count_pairs(int arr, int n, int k) {     c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_pairs(int arr, int n, int k) {\n    count=0;\n    // [manual conversion needed for loop]: for i in range(0,n):\n    // [manual conversion needed for loop]: for j in range(i+1, n):\n    if (arr[i] - arr[j] == k or arr[j] - arr[i] == k) {\n        count += 1\n        return count;\n    }\n}"}
{"id": "184_java", "language": "Java", "requirement": "Write a function to find all the values in a list that are greater than a specified number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8bc5cf`\n   b. Major behaviors: public static int greater_specificnum(int list, int num) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int greater_specificnum(int list, int num) {\n    greater_specificnum=all(x >= num for x in list)\n    return greater_specificnum;\n}"}
{"id": "185_java", "language": "Java", "requirement": "Write a function to find the focus of a parabola.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f3f95f`\n   b. Major behaviors: public static int parabola_focus(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int parabola_focus(int a, int b, int c) {\n    focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n    return focus;\n}"}
{"id": "186_java", "language": "Java", "requirement": "Write a function to search some literals strings in a string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6370bc`\n   b. Major behaviors: import re public static int check_literals(int text, int pat...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int check_literals(int text, int patterns) {\n    // [manual conversion needed for loop]: for pattern in patterns:\n    if (re.search(pattern,  text)) {\n        return ('Matched!');\n        } else {\n        return ('Not Matched!');\n    }\n}"}
{"id": "187_java", "language": "Java", "requirement": "Write a function to find the longest common subsequence for the given two sequences.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7a91cc`\n   b. Major behaviors: public static int longest_common_subsequence(int X, int Y, i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int longest_common_subsequence(int X, int Y, int m, int n) {\n    if (m == 0 or n == 0) {\n        return 0;\n        } else if (X[m-1] == Y[n-1]) {\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1);\n        } else {\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n));\n    }\n}"}
{"id": "188_java", "language": "Java", "requirement": "Write a python function to check whether the given number can be represented by product of two squares or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `37d904`\n   b. Major behaviors: public static int prod_Square(int n) {     // [manual conver...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int prod_Square(int n) {\n    // [manual conversion needed for loop]: for i in range(2,(n) + 1):\n    if ((i*i < (n+1))) {\n        // [manual conversion needed for loop]: for j in range(2,n + 1):\n        if (((i*i*j*j) == n)) {\n            return True;;\n            return False;;\n        }\n    }\n}"}
{"id": "189_java", "language": "Java", "requirement": "Write a python function to find the first missing positive number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c09ee0`\n   b. Major behaviors: public static int first_Missing_Positive(int arr, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first_Missing_Positive(int arr, int n) {\n    ptr = 0\n    // [manual conversion needed for loop]: for i in range(n):\n    if (arr[i] == 1) {\n        ptr = 1\n        break\n        if (ptr == 0) {\n            return(1)\n            // [manual conversion needed for loop]: for i in range(n):\n            if (arr[i] <= 0 or arr[i] > n) {\n                arr[i] = 1\n                // [manual conversion needed for loop]: for i in range(n):\n                arr[(arr[i] - 1) % n] += n\n                // [manual conversion needed for loop]: for i in range(n):\n                if (arr[i] <= n) {\n                    return(i + 1)\n                    return(n + 1)\n                }\n            }\n        }\n    }\n}"}
{"id": "190_java", "language": "Java", "requirement": "Write a python function to count the number of integral co-ordinates that lie inside a square.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9718a9`\n   b. Major behaviors: public static int count_Intgral_Points(int x1, int y1, int x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Intgral_Points(int x1, int y1, int x2, int y2) {\n    return ((y2 - y1 - 1) * (x2 - x1 - 1));\n}"}
{"id": "191_java", "language": "Java", "requirement": "Write a function to check whether the given month name contains 30 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2d5de3`\n   b. Major behaviors: public static int check_monthnumber(int monthname3) {     if...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_monthnumber(int monthname3) {\n    if (monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\") {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "192_java", "language": "Java", "requirement": "Write a python function to check whether a string has atleast one letter and one number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a1cf18`\n   b. Major behaviors: public static int check_String(int str) {     flag_l = False...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_String(int str) {\n    flag_l = False\n    flag_n = False\n    // [manual conversion needed for loop]: for i in str:\n    if (i.isalpha()) {\n        flag_l = True\n        if (i.isdigit()) {\n            flag_n = True\n            return flag_l and flag_n;\n        }\n    }\n}"}
{"id": "193_java", "language": "Java", "requirement": "Write a function to remove the duplicates from the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `793023`\n   b. Major behaviors: public static int remove_tuple(int test_tup) {     res = tup...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_tuple(int test_tup) {\n    res = tuple(set(test_tup))\n    return (res);\n}"}
{"id": "194_java", "language": "Java", "requirement": "Write a python function to convert octal number to decimal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fa0218`\n   b. Major behaviors: public static int octal_To_Decimal(int n) {     num = n;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int octal_To_Decimal(int n) {\n    num = n;\n    dec_value = 0;\n    base = 1;\n    temp = num;\n    // [manual conversion needed for while loop]: while (temp):\n    last_digit = temp % 10;\n    temp = int(temp / 10);\n    dec_value += last_digit*base;\n    base = base * 8;\n    return dec_value;;\n}"}
{"id": "195_java", "language": "Java", "requirement": "Write a python function to find the first position of an element in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `541c46`\n   b. Major behaviors: public static int first(int arr, int x, int n) {     low = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first(int arr, int x, int n) {\n    low = 0\n    high = n - 1\n    res = -1\n    // [manual conversion needed for while loop]: while (low <= high):\n    mid = (low + high) // 2\n    if (arr[mid] > x) {\n        high = mid - 1\n        } else if (arr[mid] < x) {\n        low = mid + 1\n        } else {\n        res = mid\n        high = mid - 1\n        return res;\n    }\n}"}
{"id": "196_java", "language": "Java", "requirement": "Write a function to remove all the tuples with length k.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2d6298`\n   b. Major behaviors: public static int remove_tuples(int test_list, int K) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_tuples(int test_list, int K) {\n    res = [ele for ele in test_list if len(ele) != K]\n    return (res);\n}"}
{"id": "197_java", "language": "Java", "requirement": "Write a function to perform the exponentiation of the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ce4030`\n   b. Major behaviors: public static int find_exponentio(int test_tup1, int test_tu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_exponentio(int test_tup1, int test_tup2) {\n    res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "198_java", "language": "Java", "requirement": "Write a function to find the largest triangle that can be inscribed in an ellipse.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `16173e`\n   b. Major behaviors: import math public static int largest_triangle(int a, int b)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int largest_triangle(int a, int b) {\n    if ((a < 0 or b < 0)) {\n        return -1;\n        area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);\n        return area;\n    }\n}"}
{"id": "199_java", "language": "Java", "requirement": "Write a python function to find highest power of 2 less than or equal to given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9a6b31`\n   b. Major behaviors: public static int highest_Power_of_2(int n) {     res = 0;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int highest_Power_of_2(int n) {\n    res = 0;\n    // [manual conversion needed for loop]: for i in range(n, 0, -1):\n    if (((i & (i - 1)) == 0)) {\n        res = i;\n        break;\n        return res;;\n    }\n}"}
{"id": "200_java", "language": "Java", "requirement": "Write a function to find all index positions of the maximum values in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `331040`\n   b. Major behaviors: public static int position_max(int list1) {     max_val = ma...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int position_max(int list1) {\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result;\n}"}
{"id": "201_java", "language": "Java", "requirement": "Write a python function to check whether the elements in a list are same or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `53a1e5`\n   b. Major behaviors: public static int chkList(int lst) {     return len(set(lst)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int chkList(int lst) {\n    return len(set(lst)) == 1;\n}"}
{"id": "202_java", "language": "Java", "requirement": "Write a function to remove even characters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `beb04b`\n   b. Major behaviors: public static int remove_even(int str1) {     str2 = ''...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_even(int str1) {\n    str2 = ''\n    // [manual conversion needed for loop]: for i in range(1, len(str1) + 1):\n    if(i % 2 != 0):\n    str2 = str2 + str1[i - 1]\n    return str2;\n}"}
{"id": "203_java", "language": "Java", "requirement": "Write a python function to find the hamming distance between given two integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `441161`\n   b. Major behaviors: public static int hamming_Distance(int n1, int n2)) {     x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int hamming_Distance(int n1, int n2)) {\n    x = n1 ^ n2\n    setBits = 0\n    // [manual conversion needed for while loop]: while (x > 0) :\n    setBits += x & 1\n    x >>= 1\n    return setBits;\n}"}
{"id": "204_java", "language": "Java", "requirement": "Write a python function to count the occurrence of a given character in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a2df89`\n   b. Major behaviors: public static int count(int s, int c)) {     res = 0     //...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count(int s, int c)) {\n    res = 0\n    // [manual conversion needed for loop]: for i in range(len(s)) :\n    if ((s[i] == c)) {\n        res = res + 1\n        return res;\n    }\n}"}
{"id": "205_java", "language": "Java", "requirement": "Write a function to find the inversions of tuple elements in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f5d5cf`\n   b. Major behaviors: public static int inversion_elements(int test_tup) {     res...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int inversion_elements(int test_tup) {\n    res = tuple(list(map(lambda x: ~x, list(test_tup))))\n    return (res);\n}"}
{"id": "206_java", "language": "Java", "requirement": "Write a function to perform the adjacent element concatenation in the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `60eea1`\n   b. Major behaviors: public static int concatenate_elements(int test_tup) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int concatenate_elements(int test_tup) {\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return (res);\n}"}
{"id": "207_java", "language": "Java", "requirement": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f65e44`\n   b. Major behaviors: public static int find_longest_repeating_subseq(int str) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_longest_repeating_subseq(int str) {\n    n = len(str)\n    dp = [[0 for k in range(n+1)] for l in range(n+1)]\n    // [manual conversion needed for loop]: for i in range(1, n+1):\n    // [manual conversion needed for loop]: for j in range(1, n+1):\n    if ((str[i-1] == str[j-1] and i != j)) {\n        dp[i][j] = 1 + dp[i-1][j-1]\n        } else {\n        dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n        return dp[n][n];\n    }\n}"}
{"id": "208_java", "language": "Java", "requirement": "Write a function to check the given decimal with a precision of 2 by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a376ec`\n   b. Major behaviors: import re public static int is_decimal(int num) {     num_fe...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int is_decimal(int num) {\n    num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = num_fetch.search(num)\n    return bool(result);\n}"}
{"id": "209_java", "language": "Java", "requirement": "Write a function to delete the smallest element from the given heap and then insert a new item.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c566e0`\n   b. Major behaviors: import heapq as hq public static int heap_replace(int heap,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\npublic static int heap_replace(int heap, int a) {\n    hq.heapify(heap)\n    hq.heapreplace(heap, a)\n    return heap;\n}"}
{"id": "210_java", "language": "Java", "requirement": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6d6864`\n   b. Major behaviors: import re public static int is_allowed_specific_char(int str...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int is_allowed_specific_char(int string) {\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string);\n}"}
{"id": "211_java", "language": "Java", "requirement": "Write a python function to count numbers whose oth and nth bits are set.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ef68ec`\n   b. Major behaviors: public static int count_Num(int n) {     if ((n == 1)) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Num(int n) {\n    if ((n == 1)) {\n        return 1;\n        count = pow(2,n - 2)\n        return count;\n    }\n}"}
{"id": "212_java", "language": "Java", "requirement": "Write a python function to find the sum of fourth power of n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7276ee`\n   b. Major behaviors: import math public static int fourth_Power_Sum(int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int fourth_Power_Sum(int n) {\n    sum = 0\n    // [manual conversion needed for loop]: for i in range(1,n+1) :\n    sum = sum + (i*i*i*i)\n    return sum;\n}"}
{"id": "213_java", "language": "Java", "requirement": "Write a function to perform the concatenation of two string tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `90ae6a`\n   b. Major behaviors: public static int concatenate_strings(int test_tup1, int tes...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int concatenate_strings(int test_tup1, int test_tup2) {\n    res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "214_java", "language": "Java", "requirement": "Write a function to convert radians to degrees.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0782ab`\n   b. Major behaviors: import math public static int degree_radian(int radian) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int degree_radian(int radian) {\n    degree = radian*(180/math.pi)\n    return degree;\n}"}
{"id": "215_java", "language": "Java", "requirement": "Write a function to decode a run-length encoded given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `77cc21`\n   b. Major behaviors: public static int decode_list(int alist) {     public static...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int decode_list(int alist) {\n    public static int aux(int g) {\n        if (isinstance(g, list)) {\n            return [(g[1], range(g[0]))];\n            } else {\n            return [(g, [0])];\n            return [x for g in alist for x, R in aux(g) for i in R];\n        }\n    }\n}"}
{"id": "216_java", "language": "Java", "requirement": "Write a function to check if a nested list is a subset of another nested list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c4931a`\n   b. Major behaviors: public static int check_subset_list(int list1, int list2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_subset_list(int list1, int list2) {\n    l1, l2 = list1[0], list2[0]\n    exist = True\n    // [manual conversion needed for loop]: for i in list2:\n    if (i not in list1) {\n        exist = False\n        return exist;\n    }\n}"}
{"id": "217_java", "language": "Java", "requirement": "Write a python function to find the first repeated character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9480cc`\n   b. Major behaviors: public static int first_Repeated_Char(int str) {     h = {}...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first_Repeated_Char(int str) {\n    h = {}\n    // [manual conversion needed for loop]: for ch in str:\n    if (ch in h) {\n        return ch;;\n        } else {\n        h[ch] = 0\n        return '\\0';\n    }\n}"}
{"id": "218_java", "language": "Java", "requirement": "Write a python function to find the minimum operations required to make two numbers equal.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0bb329`\n   b. Major behaviors: import math public static int min_Operations(int A, int B) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int min_Operations(int A, int B) {\n    if ((A > B)) {\n        swap(A,B)\n        B = B // math.gcd(A,B);\n        return B - 1;\n    }\n}"}
{"id": "219_java", "language": "Java", "requirement": "Write a function to extract maximum and minimum k elements in the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c6dd48`\n   b. Major behaviors: public static int extract_min_max(int test_tup, int K) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_min_max(int test_tup, int K) {\n    res = []\n    test_tup = list(test_tup)\n    temp = sorted(test_tup)\n    // [manual conversion needed for loop]: for idx, val in enumerate(temp):\n    if (idx < K or idx >= len(temp) - K) {\n        res.append(val)\n        res = tuple(res)\n        return (res);\n    }\n}"}
{"id": "220_java", "language": "Java", "requirement": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1bbdb6`\n   b. Major behaviors: import re public static int replace_max_specialchar(int text...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int replace_max_specialchar(int text, int n) {\n    return (re.sub(\"[ ,.]\", \":\", text, n));\n}"}
{"id": "221_java", "language": "Java", "requirement": "Write a python function to find the first even number in a given list of numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5d58b3`\n   b. Major behaviors: public static int first_even(int nums) {     first_even = ne...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first_even(int nums) {\n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even;\n}"}
{"id": "222_java", "language": "Java", "requirement": "Write a function to check if all the elements in tuple have same data type or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `02b733`\n   b. Major behaviors: public static int check_type(int test_tuple) {     res = Tru...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_type(int test_tuple) {\n    res = True\n    // [manual conversion needed for loop]: for ele in test_tuple:\n    if (not isinstance(ele, type(test_tuple[0]))) {\n        res = False\n        break\n        return (res);\n    }\n}"}
{"id": "223_java", "language": "Java", "requirement": "Write a function to check for majority element in the given sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0aa094`\n   b. Major behaviors: public static int is_majority(int arr, int n, int x) {     i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_majority(int arr, int n, int x) {\n    i = binary_search(arr, 0, n-1, x)\n    if (i == -1) {\n        return False;\n        if (((i + n//2) <= (n -1)) and arr[i + n//2] == x) {\n            return True;\n            } else {\n            return False;\n            public static int binary_search(int arr, int low, int high, int x) {\n                if (high >= low) {\n                    mid = (low + high)//2\n                    if ((mid == 0 or x > arr[mid-1]) and (arr[mid] == x)) {\n                        return mid;\n                        } else if (x > arr[mid]) {\n                        return binary_search(arr, (mid + 1), high, x);\n                        } else {\n                        return binary_search(arr, low, (mid -1), x);\n                        return -1;\n                    }\n                }\n            }\n        }\n    }\n}"}
{"id": "224_java", "language": "Java", "requirement": "Write a python function to count set bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f15642`\n   b. Major behaviors: public static int count_Set_Bits(int n) {     count = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Set_Bits(int n) {\n    count = 0\n    // [manual conversion needed for while loop]: while (n):\n    count += n & 1\n    n >>= 1\n    return count;\n}"}
{"id": "225_java", "language": "Java", "requirement": "Write a python function to find the minimum element in a sorted and rotated array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e784d9`\n   b. Major behaviors: public static int find_Min(int arr, int low, int high) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Min(int arr, int low, int high) {\n    // [manual conversion needed for while loop]: while (low < high):\n    mid = low + (high - low) // 2;\n    if ((arr[mid] == arr[high])) {\n        high -= 1;\n        } else if ((arr[mid] > arr[high])) {\n        low = mid + 1;\n        } else {\n        high = mid;\n        return arr[high];;\n    }\n}"}
{"id": "226_java", "language": "Java", "requirement": "Write a python function to remove the characters which have odd index values of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `77f760`\n   b. Major behaviors: public static int odd_values_string(int str) {     result =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int odd_values_string(int str) {\n    result = \"\"\n    // [manual conversion needed for loop]: for i in range(len(str)):\n    if (i % 2 == 0) {\n        result = result + str[i]\n        return result;\n    }\n}"}
{"id": "227_java", "language": "Java", "requirement": "Write a function to find minimum of three numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1b4f53`\n   b. Major behaviors: public static int min_of_three(int a, int b, int c) {     if...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_of_three(int a, int b, int c) {\n    if ((a <= b) and (a <= c)) {\n        smallest = a\n        } else if ((b <= a) and (b <= c)) {\n        smallest = b\n        } else {\n        smallest = c\n        return smallest;\n    }\n}"}
{"id": "228_java", "language": "Java", "requirement": "Write a python function to check whether all the bits are unset in the given range or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `92850a`\n   b. Major behaviors: public static int all_Bits_Set_In_The_Given_Range(int n, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int all_Bits_Set_In_The_Given_Range(int n, int l, int r) {\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    if ((new_num == 0)) {\n        return True;\n        return False;\n    }\n}"}
{"id": "229_java", "language": "Java", "requirement": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d4cc6b`\n   b. Major behaviors: public static int re_arrange_array(int arr, int n) {     j=0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int re_arrange_array(int arr, int n) {\n    j=0\n    // [manual conversion needed for loop]: for i in range(0, n):\n    if ((arr[i] < 0)) {\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n        j = j + 1\n        return arr;\n    }\n}"}
{"id": "230_java", "language": "Java", "requirement": "Write a function to replace blank spaces with any character in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `49808f`\n   b. Major behaviors: public static int replace_blank(int str1, int char) {     st...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int replace_blank(int str1, int char) {\n    str2 = str1.replace(' ', char)\n    return str2;\n}"}
{"id": "231_java", "language": "Java", "requirement": "Write a function to find the maximum sum in the given right triangle of numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `27bd56`\n   b. Major behaviors: public static int max_sum(int tri, int n) {     if (n > 1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sum(int tri, int n) {\n    if (n > 1) {\n        tri[1][1] = tri[1][1]+tri[0][0]\n        tri[1][0] = tri[1][0]+tri[0][0]\n        // [manual conversion needed for loop]: for i in range(2, n):\n        tri[i][0] = tri[i][0] + tri[i-1][0]\n        tri[i][i] = tri[i][i] + tri[i-1][i-1]\n        // [manual conversion needed for loop]: for j in range(1, i):\n        if (tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]) {\n            tri[i][j] = tri[i][j] + tri[i-1][j-1]\n            } else {\n            tri[i][j] = tri[i][j]+tri[i-1][j]\n            return (max(tri[n-1]));\n        }\n    }\n}"}
{"id": "232_java", "language": "Java", "requirement": "Write a function to get the n largest items from a dataset.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d9216f`\n   b. Major behaviors: import heapq public static int larg_nnum(int list1, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\npublic static int larg_nnum(int list1, int n) {\n    largest=heapq.nlargest(n,list1)\n    return largest;\n}"}
{"id": "233_java", "language": "Java", "requirement": "Write a function to find the lateral surface area of a cylinder.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e50a2e`\n   b. Major behaviors: public static int lateralsuface_cylinder(int r, int h) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int lateralsuface_cylinder(int r, int h) {\n    lateralsurface= 2*3.1415*r*h\n    return lateralsurface;\n}"}
{"id": "234_java", "language": "Java", "requirement": "Write a function to find the volume of a cube.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `083644`\n   b. Major behaviors: public static int volume_cube(int l) {     volume = l * l *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int volume_cube(int l) {\n    volume = l * l * l\n    return volume;\n}"}
{"id": "235_java", "language": "Java", "requirement": "Write a python function to set all even bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c0f3d4`\n   b. Major behaviors: public static int even_bit_set_number(int n) {     count = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int even_bit_set_number(int n) {\n    count = 0;res = 0;temp = n\n    while(temp > 0):\n    if ((count % 2 == 1)) {\n        res |= (1 << count)\n        count+=1\n        temp >>= 1\n        return (n | res);\n    }\n}"}
{"id": "236_java", "language": "Java", "requirement": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9011df`\n   b. Major behaviors: public static int No_of_Triangle(int N, int K) {     if ((N...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int No_of_Triangle(int N, int K) {\n    if ((N < K)) {\n        return -1;;\n        } else {\n        Tri_up = 0;\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\n        Tri_down = 0;\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\n        return Tri_up + Tri_down;;\n    }\n}"}
{"id": "237_java", "language": "Java", "requirement": "Write a function to check the occurrences of records which occur similar times in the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ee14eb`\n   b. Major behaviors: from collections import Counter public static int check_occu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\npublic static int check_occurences(int test_list) {\n    res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n    return  (res);\n}"}
{"id": "238_java", "language": "Java", "requirement": "Write a python function to count number of non-empty substrings of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `253267`\n   b. Major behaviors: public static int number_of_substrings(int str) {     str_le...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int number_of_substrings(int str) {\n    str_len = len(str);\n    return int(str_len * (str_len + 1) / 2);;\n}"}
{"id": "239_java", "language": "Java", "requirement": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `21e99d`\n   b. Major behaviors: public static int get_total_number_of_sequences(int m, int n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_total_number_of_sequences(int m, int n) {\n    T=[[0 for i in range(n+1)] for i in range(m+1)]\n    // [manual conversion needed for loop]: for i in range(m+1):\n    // [manual conversion needed for loop]: for j in range(n+1):\n    if (i==0 or j==0) {\n        T[i][j]=0\n        } else if (i<j) {\n        T[i][j]=0\n        } else if (j==1) {\n        T[i][j]=i\n        } else {\n        T[i][j]=T[i-1][j]+T[i//2][j-1]\n        return T[m][n];\n    }\n}"}
{"id": "240_java", "language": "Java", "requirement": "Write a function to replace the last element of the list with another list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5b593a`\n   b. Major behaviors: public static int replace_list(int list1, int list2) {     l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int replace_list(int list1, int list2) {\n    list1[-1:] = list2\n    replace_list=list1\n    return replace_list;\n}"}
{"id": "241_java", "language": "Java", "requirement": "Write a function to generate a 3d array having each element as '*'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7219b1`\n   b. Major behaviors: public static int array_3d(int m, int n, int o) {     array_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int array_3d(int m, int n, int o) {\n    array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n    return array_3d;\n}"}
{"id": "242_java", "language": "Java", "requirement": "Write a function to count total characters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `705773`\n   b. Major behaviors: public static int count_charac(int str1) {     total = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_charac(int str1) {\n    total = 0\n    // [manual conversion needed for loop]: for i in str1:\n    total = total + 1\n    return total;\n}"}
{"id": "243_java", "language": "Java", "requirement": "Write a function to sort the given list based on the occurrence of first element of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `652769`\n   b. Major behaviors: public static int sort_on_occurence(int lst) {     dct = {}...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_on_occurence(int lst) {\n    dct = {}\n    // [manual conversion needed for loop]: for i, j in lst:\n    dct.setdefault(i, []).append(j)\n    return ([(i, *dict.fromkeys(j), len(j));\n    // [manual conversion needed for loop]: for i, j in dct.items()])\n}"}
{"id": "244_java", "language": "Java", "requirement": "Write a python function to find the next perfect square greater than a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c646f8`\n   b. Major behaviors: import math public static int next_Perfect_Square(int N) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int next_Perfect_Square(int N) {\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN;\n}"}
{"id": "245_java", "language": "Java", "requirement": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `33fe0c`\n   b. Major behaviors: public static int max_sum(int arr, int n) {     MSIBS = arr[...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sum(int arr, int n) {\n    MSIBS = arr[:]\n    // [manual conversion needed for loop]: for i in range(n):\n    // [manual conversion needed for loop]: for j in range(0, i):\n    if (arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]) {\n        MSIBS[i] = MSIBS[j] + arr[i]\n        MSDBS = arr[:]\n        // [manual conversion needed for loop]: for i in range(1, n + 1):\n        // [manual conversion needed for loop]: for j in range(1, i):\n        if (arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]) {\n            MSDBS[-i] = MSDBS[-j] + arr[-i]\n            max_sum = float(\"-Inf\")\n            // [manual conversion needed for loop]: for i, j, k in zip(MSIBS, MSDBS, arr):\n            max_sum = max(max_sum, i + j - k)\n            return max_sum;\n        }\n    }\n}"}
{"id": "246_java", "language": "Java", "requirement": "Write a function for computing square roots using the babylonian method.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `14b42e`\n   b. Major behaviors: public static int babylonian_squareroot(int number) {     if...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int babylonian_squareroot(int number) {\n    if(number == 0):\n    return 0;;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n    n = number/ g;\n    g2 = g;\n    g = (g + n)/2;\n    return g;;\n}"}
{"id": "247_java", "language": "Java", "requirement": "Write a function to find the longest palindromic subsequence in the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `50860c`\n   b. Major behaviors: public static int lps(int str) {     n = len(str)     L = [[...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int lps(int str) {\n    n = len(str)\n    L = [[0 for x in range(n)] for x in range(n)]\n    // [manual conversion needed for loop]: for i in range(n):\n    L[i][i] = 1\n    // [manual conversion needed for loop]: for cl in range(2, n+1):\n    // [manual conversion needed for loop]: for i in range(n-cl+1):\n    j = i+cl-1\n    if (str[i] == str[j] and cl == 2) {\n        L[i][j] = 2\n        } else if (str[i] == str[j]) {\n        L[i][j] = L[i+1][j-1] + 2\n        } else {\n        L[i][j] = max(L[i][j-1], L[i+1][j]);\n        return L[0][n-1];\n    }\n}"}
{"id": "248_java", "language": "Java", "requirement": "Write a function to calculate the harmonic sum of n-1.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `42d292`\n   b. Major behaviors: public static int harmonic_sum(int n) {     if (n < 2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int harmonic_sum(int n) {\n    if (n < 2) {\n        return 1;\n        } else {\n        return 1 / n + (harmonic_sum(n - 1));\n    }\n}"}
{"id": "249_java", "language": "Java", "requirement": "Write a function to find the intersection of two arrays using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `67249a`\n   b. Major behaviors: public static int intersection_array(int array_nums1, int ar...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int intersection_array(int array_nums1, int array_nums2) {\n    result = list(filter(lambda x: x in array_nums1, array_nums2))\n    return result;\n}"}
{"id": "250_java", "language": "Java", "requirement": "Write a python function to count the occcurences of an element in a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b5516c`\n   b. Major behaviors: public static int count_X(int tup, int x) {     count = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_X(int tup, int x) {\n    count = 0\n    // [manual conversion needed for loop]: for ele in tup:\n    if ((ele == x)) {\n        count = count + 1\n        return count;\n    }\n}"}
{"id": "251_java", "language": "Java", "requirement": "Write a function to insert an element before each element of a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `834703`\n   b. Major behaviors: public static int insert_element(int list, int element) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int insert_element(int list, int element) {\n    list = [v for elt in list for v in (element, elt)]\n    return list;\n}"}
{"id": "252_java", "language": "Java", "requirement": "Write a python function to convert complex numbers to polar coordinates.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f44476`\n   b. Major behaviors: import cmath public static int convert(int numbers) {     nu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import cmath\npublic static int convert(int numbers) {\n    num = cmath.polar(numbers)\n    return (num);\n}"}
{"id": "253_java", "language": "Java", "requirement": "Write a python function to count integers from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `52565e`\n   b. Major behaviors: public static int count_integer(int list1) {     ctr = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_integer(int list1) {\n    ctr = 0\n    // [manual conversion needed for loop]: for i in list1:\n    if (isinstance(i, int)) {\n        ctr = ctr + 1\n        return ctr;\n    }\n}"}
{"id": "254_java", "language": "Java", "requirement": "Write a function to find all words starting with 'a' or 'e' in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `97b1ef`\n   b. Major behaviors: import re public static int words_ae(int text) {     list =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int words_ae(int text) {\n    list = re.findall(\"[ae]\\w+\", text)\n    return list;\n}"}
{"id": "255_java", "language": "Java", "requirement": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b882f6`\n   b. Major behaviors: from itertools import combinations_with_replacement public s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import combinations_with_replacement\npublic static int combinations_colors(int l, int n) {\n    return list(combinations_with_replacement(l,n));\n}"}
{"id": "256_java", "language": "Java", "requirement": "Write a python function to count the number of prime numbers less than a given non-negative number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `610443`\n   b. Major behaviors: public static int count_Primes_nums(int n) {     ctr = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Primes_nums(int n) {\n    ctr = 0\n    // [manual conversion needed for loop]: for num in range(n):\n    if (num <= 1) {\n        continue\n        // [manual conversion needed for loop]: for i in range(2,num):\n        if ((num % i) == 0) {\n            break\n            } else {\n            ctr += 1\n            return ctr;\n        }\n    }\n}"}
{"id": "257_java", "language": "Java", "requirement": "Write a function to swap two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `37127f`\n   b. Major behaviors: public static int swap_numbers(int a, int b) {     temp = a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int swap_numbers(int a, int b) {\n    temp = a\n    a = b\n    b = temp\n    return (a,b);\n}"}
{"id": "258_java", "language": "Java", "requirement": "Write a function to find number of odd elements in the given list using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `227cb7`\n   b. Major behaviors: public static int count_odd(int array_nums) {     count_odd...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_odd(int array_nums) {\n    count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n    return count_odd;\n}"}
{"id": "259_java", "language": "Java", "requirement": "Write a function to maximize the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `109a2c`\n   b. Major behaviors: public static int maximize_elements(int test_tup1, int test_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int maximize_elements(int test_tup1, int test_tup2) {\n    res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n    // [manual conversion needed for loop]: for tup1, tup2 in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "260_java", "language": "Java", "requirement": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `553d6c`\n   b. Major behaviors: public static int newman_prime(int n) {     if (n == 0 or n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int newman_prime(int n) {\n    if (n == 0 or n == 1) {\n        return 1;\n        return 2 * newman_prime(n - 1) + newman_prime(n - 2);\n    }\n}"}
{"id": "261_java", "language": "Java", "requirement": "Write a function to perform mathematical division operation across the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `31c32b`\n   b. Major behaviors: public static int division_elements(int test_tup1, int test_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int division_elements(int test_tup1, int test_tup2) {\n    res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "262_java", "language": "Java", "requirement": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c751a0`\n   b. Major behaviors: public static int split_two_parts(int list1, int L) {     re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int split_two_parts(int list1, int L) {\n    return list1[:L], list1[L:];\n}"}
{"id": "263_java", "language": "Java", "requirement": "Write a function to merge two dictionaries.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c49172`\n   b. Major behaviors: public static int merge_dict(int d1, int d2) {     d = d1.co...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int merge_dict(int d1, int d2) {\n    d = d1.copy()\n    d.update(d2)\n    return d;\n}"}
{"id": "264_java", "language": "Java", "requirement": "Write a function to calculate a dog's age in dog's years.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4e1069`\n   b. Major behaviors: public static int dog_age(int h_age) {     if (h_age < 0) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int dog_age(int h_age) {\n    if (h_age < 0) {\n        exit()\n        } else if (h_age <= 2) {\n        d_age = h_age * 10.5\n        } else {\n        d_age = 21 + (h_age - 2)*4\n        return d_age;\n    }\n}"}
{"id": "265_java", "language": "Java", "requirement": "Write a function to split a list for every nth element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f37533`\n   b. Major behaviors: public static int list_split(int S, int step) {     return [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int list_split(int S, int step) {\n    return [S[i::step] for i in range(step)];\n}"}
{"id": "266_java", "language": "Java", "requirement": "Write a function to find the lateral surface area of a cube.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a1a7c7`\n   b. Major behaviors: public static int lateralsurface_cube(int l) {     LSA = 4 *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int lateralsurface_cube(int l) {\n    LSA = 4 * (l * l)\n    return LSA;\n}"}
{"id": "267_java", "language": "Java", "requirement": "Write a python function to find the sum of squares of first n odd natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `39867f`\n   b. Major behaviors: public static int square_Sum(int n) {     return int(n*(4*n*...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int square_Sum(int n) {\n    return int(n*(4*n*n-1)/3);\n}"}
{"id": "268_java", "language": "Java", "requirement": "Write a function to find the n'th star number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d54bfb`\n   b. Major behaviors: public static int find_star_num(int n) {     return (6 * n *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_star_num(int n) {\n    return (6 * n * (n - 1) + 1);\n}"}
{"id": "269_java", "language": "Java", "requirement": "Write a function to find the ascii value of a character.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `56995e`\n   b. Major behaviors: public static int ascii_value(int k) {     ch=k     return o...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int ascii_value(int k) {\n    ch=k\n    return ord(ch);\n}"}
{"id": "270_java", "language": "Java", "requirement": "Write a python function to find the sum of even numbers at even positions.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `80623e`\n   b. Major behaviors: public static int sum_even_and_even_index(int arr, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_even_and_even_index(int arr, int n) {\n    i = 0\n    sum = 0\n    // [manual conversion needed for loop]: for i in range(0,n,2):\n    if ((arr[i] % 2 == 0) ) {\n        sum += arr[i]\n        return sum;\n    }\n}"}
{"id": "271_java", "language": "Java", "requirement": "Write a python function to find the sum of fifth power of first n even natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a93efb`\n   b. Major behaviors: public static int even_Power_Sum(int n) {     sum = 0;     /...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int even_Power_Sum(int n) {\n    sum = 0;\n    // [manual conversion needed for loop]: for i in range(1,n+1):\n    j = 2*i;\n    sum = sum + (j*j*j*j*j);\n    return sum;;\n}"}
{"id": "272_java", "language": "Java", "requirement": "Write a function to perfom the rear element extraction from list of tuples records.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e9e76`\n   b. Major behaviors: public static int rear_extract(int test_list) {     res = [l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rear_extract(int test_list) {\n    res = [lis[-1] for lis in test_list]\n    return (res);\n}"}
{"id": "273_java", "language": "Java", "requirement": "Write a function to substract the contents of one tuple with corresponding index of other tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `914df4`\n   b. Major behaviors: public static int substract_elements(int test_tup1, int test...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int substract_elements(int test_tup1, int test_tup2) {\n    res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "274_java", "language": "Java", "requirement": "Write a python function to find sum of even index binomial coefficients.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb8af6`\n   b. Major behaviors: import math public static int even_binomial_Coeff_Sum(int n)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int even_binomial_Coeff_Sum(int n) {\n    return (1 << (n - 1));\n}"}
{"id": "275_java", "language": "Java", "requirement": "Write a python function to find the position of the last removed element from the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a6bc7d`\n   b. Major behaviors: import math as mt public static int get_Position(int a, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math as mt\npublic static int get_Position(int a, int n, int m) {\n    // [manual conversion needed for loop]: for i in range(n):\n    a[i] = (a[i] // m + (a[i] % m != 0))\n    result,maxx = -1,-1\n    // [manual conversion needed for loop]: for i in range(n - 1,-1,-1):\n    if ((maxx < a[i])) {\n        maxx = a[i]\n        result = i\n        return result + 1;\n    }\n}"}
{"id": "276_java", "language": "Java", "requirement": "Write a function to find the volume of a cylinder.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e9c6e5`\n   b. Major behaviors: public static int volume_cylinder(int r, int h) {     volume...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int volume_cylinder(int r, int h) {\n    volume=3.1415*r*r*h\n    return volume;\n}"}
{"id": "277_java", "language": "Java", "requirement": "Write a function to filter a dictionary based on values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `34fc9e`\n   b. Major behaviors: public static int dict_filter(int dict, int n) {     result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int dict_filter(int dict, int n) {\n    result = {key:value for (key, value) in dict.items() if value >=n}\n    return result;\n}"}
{"id": "278_java", "language": "Java", "requirement": "Write a function to find the element count that occurs before the record in the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1d16e4`\n   b. Major behaviors: public static int count_first_elements(int test_tup) {     /...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_first_elements(int test_tup) {\n    // [manual conversion needed for loop]: for count, ele in enumerate(test_tup):\n    if (isinstance(ele, tuple)) {\n        break\n        return (count);\n    }\n}"}
{"id": "279_java", "language": "Java", "requirement": "Write a function to find the nth decagonal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5fc469`\n   b. Major behaviors: public static int is_num_decagonal(int n) {     return 4 * n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_num_decagonal(int n) {\n    return 4 * n * n - 3 * n;\n}"}
{"id": "280_java", "language": "Java", "requirement": "Write a function to search an element in the given array by using sequential search.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `65fd22`\n   b. Major behaviors: public static int sequential_search(int dlist, int item) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sequential_search(int dlist, int item) {\n    pos = 0\n    found = False\n    // [manual conversion needed for while loop]: while pos < len(dlist) and not found:\n    if (dlist[pos] == item) {\n        found = True\n        } else {\n        pos = pos + 1\n        return found, pos;\n    }\n}"}
{"id": "281_java", "language": "Java", "requirement": "Write a python function to check if the elements of a given list are unique or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb4074`\n   b. Major behaviors: public static int all_unique(int test_list) {     if (len(te...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int all_unique(int test_list) {\n    if (len(test_list) > len(set(test_list))) {\n        return False;\n        return True;\n    }\n}"}
{"id": "282_java", "language": "Java", "requirement": "Write a function to substaract two lists using map and lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5dcf46`\n   b. Major behaviors: public static int sub_list(int nums1, int nums2) {     resul...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sub_list(int nums1, int nums2) {\n    result = map(lambda x, y: x - y, nums1, nums2)\n    return list(result);\n}"}
{"id": "283_java", "language": "Java", "requirement": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6085af`\n   b. Major behaviors: public static int validate(int n) {     // [manual conversio...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int validate(int n) {\n    // [manual conversion needed for loop]: for i in range(10):\n    temp = n;\n    count = 0;\n    // [manual conversion needed for while loop]: while (temp):\n    if ((temp % 10 == i)) {\n        count+=1;\n        if ((count > i)) {\n            return False;\n            temp //= 10;\n            return True;\n        }\n    }\n}"}
{"id": "284_java", "language": "Java", "requirement": "Write a function to check whether all items of a list are equal to a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7640ca`\n   b. Major behaviors: public static int check_element(int list, int element) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_element(int list, int element) {\n    check_element=all(v== element for v in list)\n    return check_element;\n}"}
{"id": "285_java", "language": "Java", "requirement": "Write a function that matches a string that has an a followed by two to three 'b'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ce4da4`\n   b. Major behaviors: import re public static int text_match_two_three(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match_two_three(int text) {\n    patterns = 'ab{2,3}'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return('Not matched!')\n    }\n}"}
{"id": "286_java", "language": "Java", "requirement": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6bf7d2`\n   b. Major behaviors: public static int max_sub_array_sum_repeated(int a, int n, i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sub_array_sum_repeated(int a, int n, int k) {\n    max_so_far = -2147483648\n    max_ending_here = 0\n    // [manual conversion needed for loop]: for i in range(n*k):\n    max_ending_here = max_ending_here + a[i%n]\n    if ((max_so_far < max_ending_here)) {\n        max_so_far = max_ending_here\n        if ((max_ending_here < 0)) {\n            max_ending_here = 0\n            return max_so_far;\n        }\n    }\n}"}
{"id": "287_java", "language": "Java", "requirement": "Write a python function to find the sum of squares of first n even natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `50b460`\n   b. Major behaviors: public static int square_Sum(int n) {     return int(2*n*(n+...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int square_Sum(int n) {\n    return int(2*n*(n+1)*(2*n+1)/3);\n}"}
{"id": "288_java", "language": "Java", "requirement": "Write a function to count array elements having modular inverse under given prime number p equal to itself.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `729304`\n   b. Major behaviors: public static int modular_inverse(int arr, int N, int P) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int modular_inverse(int arr, int N, int P) {\n    current_element = 0\n    // [manual conversion needed for loop]: for i in range(0, N):\n    if (((arr[i] * arr[i]) % P == 1)) {\n        current_element = current_element + 1\n        return current_element;\n    }\n}"}
{"id": "289_java", "language": "Java", "requirement": "Write a python function to calculate the number of odd days in a given year.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f1c0c4`\n   b. Major behaviors: public static int odd_Days(int N) {     hund1 = N // 100...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int odd_Days(int N) {\n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap\n    if ((hund1)) {\n        ordd += hund1\n        leap -= hund1\n        if ((hund4)) {\n            ordd -= hund4\n            leap += hund4\n            days = ordd + leap * 2\n            odd = days % 7\n            return odd;\n        }\n    }\n}"}
{"id": "290_java", "language": "Java", "requirement": "Write a function to find the list of lists with maximum length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c62de7`\n   b. Major behaviors: public static int max_length(int list1) {     max_length = m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_length(int list1) {\n    max_length = max(len(x) for x in  list1 )\n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)\n}"}
{"id": "291_java", "language": "Java", "requirement": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3def25`\n   b. Major behaviors: public static int count_no_of_ways(int n, int k) {     dp =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_no_of_ways(int n, int k) {\n    dp = [0] * (n + 1)\n    total = k\n    mod = 1000000007\n    dp[1] = k\n    dp[2] = k * k\n    // [manual conversion needed for loop]: for i in range(3,n+1):\n    dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod\n    return dp[n];\n}"}
{"id": "292_java", "language": "Java", "requirement": "Write a python function to find quotient of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b9e879`\n   b. Major behaviors: public static int find(int n, int m) {     q = n//m     retu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find(int n, int m) {\n    q = n//m\n    return (q);\n}"}
{"id": "293_java", "language": "Java", "requirement": "Write a function to find the third side of a right angled triangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `048c2d`\n   b. Major behaviors: import math public static int otherside_rightangle(int w, in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int otherside_rightangle(int w, int h) {\n    s=math.sqrt((w*w)+(h*h))\n    return s;\n}"}
{"id": "294_java", "language": "Java", "requirement": "Write a function to find the maximum value in a given heterogeneous list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `59dee6`\n   b. Major behaviors: public static int max_val(int listval) {     max_val = max(i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_val(int listval) {\n    max_val = max(i for i in listval if isinstance(i, int))\n    return(max_val)\n}"}
{"id": "295_java", "language": "Java", "requirement": "Write a function to return the sum of all divisors of a number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6996ef`\n   b. Major behaviors: public static int sum_div(int number) {     divisors = [1]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_div(int number) {\n    divisors = [1]\n    // [manual conversion needed for loop]: for i in range(2, number):\n    if ((number % i)==0) {\n        divisors.append(i)\n        return sum(divisors);\n    }\n}"}
{"id": "296_java", "language": "Java", "requirement": "Write a python function to count inversions in an array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8d275e`\n   b. Major behaviors: public static int get_Inv_Count(int arr, int n) {     inv_co...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_Inv_Count(int arr, int n) {\n    inv_count = 0\n    // [manual conversion needed for loop]: for i in range(n):\n    // [manual conversion needed for loop]: for j in range(i + 1,n):\n    if ((arr[i] > arr[j])) {\n        inv_count += 1\n        return inv_count;\n    }\n}"}
{"id": "297_java", "language": "Java", "requirement": "Write a function to flatten a given nested list structure.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `361ce7`\n   b. Major behaviors: public static int flatten_list(int list1) {     result_list...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int flatten_list(int list1) {\n    result_list = []\n    if (not list1: return result_list) {\n        stack = [list(list1)]\n        // [manual conversion needed for while loop]: while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if (c_num: stack.append(c_num)) {\n            if (isinstance(next, list)) {\n                if (next: stack.append(list(next))) {\n                    } else {\n                    result_list.reverse()\n                    return result_list;\n                }\n            }\n        }\n    }\n}"}
{"id": "298_java", "language": "Java", "requirement": "Write a function to find the nested list elements which are present in another list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8c8031`\n   b. Major behaviors: public static int intersection_nested_lists(int l1, int l2)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int intersection_nested_lists(int l1, int l2) {\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result;\n}"}
{"id": "299_java", "language": "Java", "requirement": "Write a function to calculate the maximum aggregate from the list of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ffdab5`\n   b. Major behaviors: from collections import defaultdict public static int max_ag...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\npublic static int max_aggregate(int stdata) {\n    temp = defaultdict(int)\n    // [manual conversion needed for loop]: for name, marks in stdata:\n    temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1]);\n}"}
{"id": "300_java", "language": "Java", "requirement": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `970fda`\n   b. Major behaviors: public static int count_binary_seq(int n) {     nCr = 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_binary_seq(int n) {\n    nCr = 1\n    res = 1\n    // [manual conversion needed for loop]: for r in range(1, n + 1):\n    nCr = (nCr * (n + 1 - r)) / r\n    res += nCr * nCr\n    return res;\n}"}
{"id": "301_java", "language": "Java", "requirement": "Write a function to find the depth of a dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `daa948`\n   b. Major behaviors: public static int dict_depth(int d) {     if (isinstance(d,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int dict_depth(int d) {\n    if (isinstance(d, dict)) {\n        return 1 + (max(map(dict_depth, d.values())) if d else 0);\n        return 0;\n    }\n}"}
{"id": "302_java", "language": "Java", "requirement": "Write a python function to find the most significant bit number which is also a set bit.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4c36bd`\n   b. Major behaviors: public static int set_Bit_Number(int n) {     if ((n == 0))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int set_Bit_Number(int n) {\n    if ((n == 0)) {\n        return 0;;\n        msb = 0;\n        n = int(n / 2);\n        // [manual conversion needed for while loop]: while (n > 0):\n        n = int(n / 2);\n        msb += 1;\n        return (1 << msb);\n    }\n}"}
{"id": "303_java", "language": "Java", "requirement": "Write a python function to check whether the count of inversion of two types are same or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1e9a30`\n   b. Major behaviors: import sys public static int solve(int a, int n) {     mx =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys\npublic static int solve(int a, int n) {\n    mx = -sys.maxsize - 1\n    // [manual conversion needed for loop]: for j in range(1,n):\n    if ((mx > a[j])) {\n        return False;\n        mx = max(mx,a[j - 1])\n        return True;\n    }\n}"}
{"id": "304_java", "language": "Java", "requirement": "Write a python function to find element at a given index after number of rotations.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8d43e7`\n   b. Major behaviors: public static int find_Element(int arr, int ranges, int rota...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Element(int arr, int ranges, int rotations, int index)) {\n    // [manual conversion needed for loop]: for i in range(rotations - 1,-1,-1 ) :\n    left = ranges[i][0]\n    right = ranges[i][1]\n    if ((left <= index and right >= index) ) {\n        if ((index == left) ) {\n            index = right\n            } else {\n            index = index - 1\n            return arr[index];\n        }\n    }\n}"}
{"id": "305_java", "language": "Java", "requirement": "Write a function to match two words from a list of words starting with letter 'p'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `631d41`\n   b. Major behaviors: import re public static int start_withp(int words) {     //...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int start_withp(int words) {\n    // [manual conversion needed for loop]: for w in words:\n    m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n    if (m) {\n        return m.groups();\n    }\n}"}
{"id": "306_java", "language": "Java", "requirement": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f93f44`\n   b. Major behaviors: public static int max_sum_increasing_subseq(int a, int n, in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sum_increasing_subseq(int a, int n, int index, int k) {\n    dp = [[0 for i in range(n)]\n    // [manual conversion needed for loop]: for i in range(n)]\n    // [manual conversion needed for loop]: for i in range(n):\n    if (a[i] > a[0]) {\n        dp[0][i] = a[i] + a[0]\n        } else {\n        dp[0][i] = a[i]\n        // [manual conversion needed for loop]: for i in range(1, n):\n        // [manual conversion needed for loop]: for j in range(n):\n        if (a[j] > a[i] and j > i) {\n            if (dp[i - 1][i] + a[j] > dp[i - 1][j]) {\n                dp[i][j] = dp[i - 1][i] + a[j]\n                } else {\n                dp[i][j] = dp[i - 1][j]\n                } else {\n                dp[i][j] = dp[i - 1][j]\n                return dp[index][k];\n            }\n        }\n    }\n}"}
{"id": "307_java", "language": "Java", "requirement": "Write a function to get a colon of a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8ae9cf`\n   b. Major behaviors: from copy import deepcopy public static int colon_tuplex(int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from copy import deepcopy\npublic static int colon_tuplex(int tuplex, int m, int n) {\n    tuplex_colon = deepcopy(tuplex)\n    tuplex_colon[m].append(n)\n    return tuplex_colon;\n}"}
{"id": "308_java", "language": "Java", "requirement": "Write a function to find the specified number of largest products from two given lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2f0c84`\n   b. Major behaviors: public static int large_product(int nums1, int nums2, int N)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int large_product(int nums1, int nums2, int N) {\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result;\n}"}
{"id": "309_java", "language": "Java", "requirement": "Write a python function to find the maximum of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `78af6e`\n   b. Major behaviors: public static int maximum(int a, int b) {     if (a >= b) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int maximum(int a, int b) {\n    if (a >= b) {\n        return a;\n        } else {\n        return b;\n    }\n}"}
{"id": "310_java", "language": "Java", "requirement": "Write a function to convert a given string to a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f0893c`\n   b. Major behaviors: public static int string_to_tuple(int str1) {     result = t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int string_to_tuple(int str1) {\n    result = tuple(x for x in str1 if not x.isspace())\n    return result;\n}"}
{"id": "311_java", "language": "Java", "requirement": "Write a python function to set the left most unset bit.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4ed645`\n   b. Major behaviors: public static int set_left_most_unset_bit(int n) {     if (n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int set_left_most_unset_bit(int n) {\n    if (not (n & (n + 1))) {\n        return n;\n        pos, temp, count = 0, n, 0\n        // [manual conversion needed for while loop]: while temp:\n        if (not (temp & 1)) {\n            pos = count\n            count += 1; temp>>=1\n            return (n | (1 << (pos)));\n        }\n    }\n}"}
{"id": "312_java", "language": "Java", "requirement": "Write a function to find the volume of a cone.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0a21ab`\n   b. Major behaviors: import math public static int volume_cone(int r, int h) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int volume_cone(int r, int h) {\n    volume = (1.0/3) * math.pi * r * r * h\n    return volume;\n}"}
{"id": "313_java", "language": "Java", "requirement": "Write a python function to print positive numbers in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c93b95`\n   b. Major behaviors: public static int pos_nos(int list1) {     // [manual conver...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int pos_nos(int list1) {\n    // [manual conversion needed for loop]: for num in list1:\n    if (num >= 0) {\n        return num;\n    }\n}"}
{"id": "314_java", "language": "Java", "requirement": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0ff8ab`\n   b. Major behaviors: public static int max_sum_rectangular_grid(int grid, int n))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sum_rectangular_grid(int grid, int n)) {\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    // [manual conversion needed for loop]: for i in range(1, n) :\n    excl_new = max(excl, incl)\n    incl = excl + max(grid[0][i], grid[1][i])\n    excl = excl_new\n    return max(excl, incl);\n}"}
{"id": "315_java", "language": "Java", "requirement": "Write a python function to find the first maximum length of even word.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e0433`\n   b. Major behaviors: public static int find_Max_Len_Even(int str) {     n = len(s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Max_Len_Even(int str) {\n    n = len(str)\n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    // [manual conversion needed for while loop]: while (i < n):\n    if ((str[i] == ' ')) {\n        if ((currlen % 2 == 0)) {\n            if ((maxlen < currlen)) {\n                maxlen = currlen\n                st = i - currlen\n                currlen = 0\n                } else {\n                currlen += 1\n                i += 1\n                if ((currlen % 2 == 0)) {\n                    if ((maxlen < currlen)) {\n                        maxlen = currlen\n                        st = i - currlen\n                        if ((st == -1)) {\n                            return \"-1\";\n                            return str[st: st + maxlen];\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"id": "316_java", "language": "Java", "requirement": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ad9239`\n   b. Major behaviors: public static int find_last_occurrence(int A, int x) {     (...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_last_occurrence(int A, int x) {\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    // [manual conversion needed for while loop]: while left <= right:\n    mid = (left + right) // 2\n    if (x == A[mid]) {\n        result = mid\n        left = mid + 1\n        } else if (x < A[mid]) {\n        right = mid - 1\n        } else {\n        left = mid + 1\n        return result;\n    }\n}"}
{"id": "317_java", "language": "Java", "requirement": "Write a function to reflect the modified run-length encoding from a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0986de`\n   b. Major behaviors: from itertools import groupby public static int modified_enc...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby\npublic static int modified_encode(int alist) {\n    public static int ctr_ele(int el) {\n        if (len(el)>1: return [len(el), el[0]]) {\n            } else {\n            return [ctr_ele(list(group)) for key, group in groupby(alist)];\n        }\n    }\n}"}
{"id": "318_java", "language": "Java", "requirement": "Write a python function to find the maximum volume of a cuboid with given sum of sides.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7935cf`\n   b. Major behaviors: public static int max_volume(int s) {     maxvalue = 0     i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_volume(int s) {\n    maxvalue = 0\n    i = 1\n    // [manual conversion needed for loop]: for i in range(s - 1):\n    j = 1\n    // [manual conversion needed for loop]: for j in range(s):\n    k = s - i - j\n    maxvalue = max(maxvalue, i * j * k)\n    return maxvalue;\n}"}
{"id": "319_java", "language": "Java", "requirement": "Write a function to find all five characters long word in the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `75dac6`\n   b. Major behaviors: import re public static int find_long_word(int text) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int find_long_word(int text) {\n    return (re.findall(r\"\\b\\w{5}\\b\", text));\n}"}
{"id": "320_java", "language": "Java", "requirement": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e03e1f`\n   b. Major behaviors: public static int sum_difference(int n) {     sumofsquares =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_difference(int n) {\n    sumofsquares = 0\n    squareofsum = 0\n    // [manual conversion needed for loop]: for num in range(1, n+1):\n    sumofsquares += num * num\n    squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares;\n}"}
{"id": "321_java", "language": "Java", "requirement": "Write a function to find the demlo number for the given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `17f3d9`\n   b. Major behaviors: public static int find_demlo(int s) {     l = len(s)     res...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_demlo(int s) {\n    l = len(s)\n    res = \"\"\n    // [manual conversion needed for loop]: for i in range(1,l+1):\n    res = res + str(i)\n    // [manual conversion needed for loop]: for i in range(l-1,0,-1):\n    res = res + str(i)\n    return res;\n}"}
{"id": "322_java", "language": "Java", "requirement": "Write a function to find all index positions of the minimum values in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `492d91`\n   b. Major behaviors: public static int position_min(int list1) {     min_val = mi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int position_min(int list1) {\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result;\n}"}
{"id": "323_java", "language": "Java", "requirement": "Write a function to re-arrange the given array in alternating positive and negative items.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2c1ec0`\n   b. Major behaviors: public static int right_rotate(int arr, int n, int out_of_pl...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int right_rotate(int arr, int n, int out_of_place, int cur) {\n    temp = arr[cur]\n    // [manual conversion needed for loop]: for i in range(cur, out_of_place, -1):\n    arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr;\n    public static int re_arrange(int arr, int n) {\n        out_of_place = -1\n        // [manual conversion needed for loop]: for index in range(n):\n        if ((out_of_place >= 0)) {\n            if (((arr[index] >= 0 and arr[out_of_place] < 0) or) {\n                (arr[index] < 0 and arr[out_of_place] >= 0)):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if ((index-out_of_place > 2)) {\n                    out_of_place += 2\n                    } else {\n                    out_of_place = - 1\n                    if ((out_of_place == -1)) {\n                        if (((arr[index] >= 0 and index % 2 == 0) or) {\n                            (arr[index] < 0 and index % 2 == 1)):\n                            out_of_place = index\n                            return arr;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"}
{"id": "324_java", "language": "Java", "requirement": "Write a function to extract the sum of alternate chains of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `36ea47`\n   b. Major behaviors: public static int sum_of_alternates(int test_tuple) {     su...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_of_alternates(int test_tuple) {\n    sum1 = 0\n    sum2 = 0\n    // [manual conversion needed for loop]: for idx, ele in enumerate(test_tuple):\n    if (idx % 2) {\n        sum1 += ele\n        } else {\n        sum2 += ele\n        return ((sum1),(sum2));\n    }\n}"}
{"id": "325_java", "language": "Java", "requirement": "Write a python function to find the minimum number of squares whose sum is equal to a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `24033b`\n   b. Major behaviors: public static int get_Min_Squares(int n) {     if (n <= 3) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_Min_Squares(int n) {\n    if (n <= 3) {\n        return n;;\n        res = n\n        // [manual conversion needed for loop]: for x in range(1,n + 1):\n        temp = x * x;\n        if (temp > n) {\n            break\n            } else {\n            res = min(res,1 + get_Min_Squares(n  - temp))\n            return res;;\n        }\n    }\n}"}
{"id": "326_java", "language": "Java", "requirement": "Write a function to get the word with most number of occurrences in the given strings list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b2d5c1`\n   b. Major behaviors: from collections import defaultdict  public static int most_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\n\npublic static int most_occurrences(int test_list) {\n    temp = defaultdict(int)\n    // [manual conversion needed for loop]: for sub in test_list:\n    // [manual conversion needed for loop]: for wrd in sub.split():\n    temp[wrd] += 1\n    res = max(temp, key=temp.get)\n    return (str(res));\n}"}
{"id": "327_java", "language": "Java", "requirement": "Write a function to print check if the triangle is isosceles or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c1a837`\n   b. Major behaviors: public static int check_isosceles(int x, int y, int z) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_isosceles(int x, int y, int z) {\n    if (x==y or y==z or z==x) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "328_java", "language": "Java", "requirement": "Write a function to rotate a given list by specified number of items to the left direction.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `148260`\n   b. Major behaviors: public static int rotate_left(int list1, int m, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rotate_left(int list1, int m, int n) {\n    result =  list1[m:]+list1[:n]\n    return result;\n}"}
{"id": "329_java", "language": "Java", "requirement": "Write a python function to count negative numbers in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5ebaa0`\n   b. Major behaviors: public static int neg_count(int list) {     neg_count= 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int neg_count(int list) {\n    neg_count= 0\n    // [manual conversion needed for loop]: for num in list:\n    if (num <= 0) {\n        neg_count += 1\n        return neg_count;\n    }\n}"}
{"id": "330_java", "language": "Java", "requirement": "Write a function to find all three, four, five characters long words in the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2b79af`\n   b. Major behaviors: import re public static int find_char(int text) {     return...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int find_char(int text) {\n    return (re.findall(r\"\\b\\w{3,5}\\b\", text));\n}"}
{"id": "331_java", "language": "Java", "requirement": "Write a python function to count unset bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cbbb63`\n   b. Major behaviors: public static int count_unset_bits(int n) {     count = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_unset_bits(int n) {\n    count = 0\n    x = 1\n    while(x < n + 1):\n    if (((x & n) == 0)) {\n        count += 1\n        x = x << 1\n        return count;\n    }\n}"}
{"id": "332_java", "language": "Java", "requirement": "Write a function to count character frequency of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `de50ce`\n   b. Major behaviors: public static int char_frequency(int str1) {     dict = {}...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int char_frequency(int str1) {\n    dict = {}\n    // [manual conversion needed for loop]: for n in str1:\n    keys = dict.keys()\n    if (n in keys) {\n        dict[n] += 1\n        } else {\n        dict[n] = 1\n        return dict;\n    }\n}"}
{"id": "333_java", "language": "Java", "requirement": "Write a python function to sort a list according to the second element in sublist.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `12c3fc`\n   b. Major behaviors: public static int Sort(int sub_li) {     sub_li.sort(key = l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Sort(int sub_li) {\n    sub_li.sort(key = lambda x: x[1])\n    return sub_li;\n}"}
{"id": "334_java", "language": "Java", "requirement": "Write a python function to check whether the triangle is valid or not if sides are given.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `52a9e4`\n   b. Major behaviors: public static int check_Validity(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_Validity(int a, int b, int c) {\n    if ((a + b <= c) or (a + c <= b) or (b + c <= a) ) {\n        return False;\n        } else {\n        return True;\n    }\n}"}
{"id": "335_java", "language": "Java", "requirement": "Write a function to find the sum of arithmetic progression.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5b962c`\n   b. Major behaviors: public static int ap_sum(int a, int n, int d) {     total =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int ap_sum(int a, int n, int d) {\n    total = (n * (2 * a + (n - 1) * d)) / 2\n    return total;\n}"}
{"id": "336_java", "language": "Java", "requirement": "Write a function to check whether the given month name contains 28 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `110181`\n   b. Major behaviors: public static int check_monthnum(int monthname1) {     if (m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_monthnum(int monthname1) {\n    if (monthname1 == \"February\") {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "337_java", "language": "Java", "requirement": "Write a function that matches a word at the end of a string, with optional punctuation.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f6c89c`\n   b. Major behaviors: import re public static int text_match_word(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match_word(int text) {\n    patterns = '\\w+\\S*$'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return 'Not matched!';\n    }\n}"}
{"id": "338_java", "language": "Java", "requirement": "Write a python function to count the number of substrings with same first and last characters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ca961b`\n   b. Major behaviors: public static int check_Equality(int s) {     return (ord(s[...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_Equality(int s) {\n    return (ord(s[0]) == ord(s[len(s) - 1]));;\n    public static int count_Substring_With_Equal_Ends(int s) {\n        result = 0;\n        n = len(s);\n        // [manual conversion needed for loop]: for i in range(n):\n        // [manual conversion needed for loop]: for j in range(1,n-i+1):\n        if ((check_Equality(s[i:i+j]))) {\n            result+=1;\n            return result;;\n        }\n    }\n}"}
{"id": "339_java", "language": "Java", "requirement": "Write a python function to find the maximum occuring divisor in an interval.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `39e0e4`\n   b. Major behaviors: public static int find_Divisor(int x, int y) {     if ((x==y...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Divisor(int x, int y) {\n    if ((x==y)) {\n        return y;\n        return 2;\n    }\n}"}
{"id": "340_java", "language": "Java", "requirement": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `61ed3c`\n   b. Major behaviors: public static int sum_three_smallest_nums(int lst) {     ret...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_three_smallest_nums(int lst) {\n    return sum(sorted([x for x in lst if x > 0])[:3]);\n}"}
{"id": "341_java", "language": "Java", "requirement": "Write a function to convert the given set into ordered tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `685f08`\n   b. Major behaviors: public static int set_to_tuple(int s) {     t = tuple(sorted...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int set_to_tuple(int s) {\n    t = tuple(sorted(s))\n    return (t);\n}"}
{"id": "342_java", "language": "Java", "requirement": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `60dd2f`\n   b. Major behaviors: from heapq import heappop, heappush class Node: public stati...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from heapq import heappop, heappush\nclass Node:\npublic static int __init__(int self, int value, int list_num, int index) {\n    self.value = value\n    self.list_num = list_num\n    self.index = index\n    public static int __lt__(int self, int other) {\n        return self.value < other.value;\n        public static int find_minimum_range(int list) {\n            high = float('-inf')\n            p = (0, float('inf'))\n            pq = []\n            // [manual conversion needed for loop]: for i in range(len(list)):\n            heappush(pq, Node(list[i][0], i, 0))\n            high = max(high, list[i][0])\n            // [manual conversion needed for while loop]: while True:\n            top = heappop(pq)\n            low = top.value\n            i = top.list_num\n            j = top.index\n            if (high - low < p[1] - p[0]) {\n                p = (low, high)\n                if (j == len(list[i]) - 1) {\n                    return p;\n                    heappush(pq, Node(list[i][j + 1], i, j + 1))\n                    high = max(high, list[i][j + 1])\n                }\n            }\n        }\n    }\n}"}
{"id": "343_java", "language": "Java", "requirement": "Write a function to calculate the number of digits and letters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c29c7e`\n   b. Major behaviors: public static int dig_let(int s) {     d=l=0     // [manual...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int dig_let(int s) {\n    d=l=0\n    // [manual conversion needed for loop]: for c in s:\n    if (c.isdigit()) {\n        d=d+1\n        } else if (c.isalpha()) {\n        l=l+1\n        } else {\n        pass\n        return (l,d);\n    }\n}"}
{"id": "344_java", "language": "Java", "requirement": "Write a python function to find number of elements with odd factors in a given range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e514dd`\n   b. Major behaviors: public static int count_Odd_Squares(int n, int m) {     retu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Odd_Squares(int n, int m) {\n    return int(m**0.5) - int((n-1)**0.5);\n}"}
{"id": "345_java", "language": "Java", "requirement": "Write a function to find the difference between two consecutive numbers in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `394ae2`\n   b. Major behaviors: public static int diff_consecutivenums(int nums) {     resul...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int diff_consecutivenums(int nums) {\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result;\n}"}
{"id": "346_java", "language": "Java", "requirement": "Write a function to find entringer number e(n, k).", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `71a9e0`\n   b. Major behaviors: public static int zigzag(int n, int k) {     if ((n == 0 and...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int zigzag(int n, int k) {\n    if ((n == 0 and k == 0)) {\n        return 1;\n        if ((k == 0)) {\n            return 0;\n            return zigzag(n, k - 1) + zigzag(n - 1, n - k);\n        }\n    }\n}"}
{"id": "347_java", "language": "Java", "requirement": "Write a python function to count the number of squares in a rectangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f336ca`\n   b. Major behaviors: public static int count_Squares(int m, int n) {     if ((n <...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Squares(int m, int n) {\n    if ((n < m)) {\n        temp = m\n        m = n\n        n = temp\n        return n * (n + 1) * (3 * m - n + 1) // 6;\n    }\n}"}
{"id": "348_java", "language": "Java", "requirement": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ae17b5`\n   b. Major behaviors: public static int bin_coff(int n, int r) {     val = 1     i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int bin_coff(int n, int r) {\n    val = 1\n    if ((r > (n - r))) {\n        r = (n - r)\n        // [manual conversion needed for loop]: for i in range(0, r):\n        val *= (n - i)\n        val //= (i + 1)\n        return val;\n        public static int find_ways(int M) {\n            n = M // 2\n            a = bin_coff(2 * n, n)\n            b = a // (n + 1)\n            return (b);\n        }\n    }\n}"}
{"id": "349_java", "language": "Java", "requirement": "Write a python function to check whether the given string is a binary string or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cd8c75`\n   b. Major behaviors: public static int check(int string)) {     p = set(string)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check(int string)) {\n    p = set(string)\n    s = {'0', '1'}\n    if (s == p or p == {'0'} or p == {'1'}) {\n        return (\"Yes\");\n        } else {\n        return (\"No\");\n    }\n}"}
{"id": "350_java", "language": "Java", "requirement": "Write a python function to minimize the length of the string by removing occurrence of only one character.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `379d5e`\n   b. Major behaviors: public static int minimum_Length(int s)) {     maxOcc = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int minimum_Length(int s)) {\n    maxOcc = 0\n    n = len(s)\n    arr = [0]*26\n    // [manual conversion needed for loop]: for i in range(n) :\n    arr[ord(s[i]) -ord('a')] += 1\n    // [manual conversion needed for loop]: for i in range(26) :\n    if (arr[i] > maxOcc ) {\n        maxOcc = arr[i]\n        return n - maxOcc;\n    }\n}"}
{"id": "351_java", "language": "Java", "requirement": "Write a python function to find the first element occurring k times in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `025675`\n   b. Major behaviors: public static int first_Element(int arr, int n, int k) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first_Element(int arr, int n, int k) {\n    count_map = {};\n    // [manual conversion needed for loop]: for i in range(0, n):\n    if(arr[i] in count_map.keys()):\n    count_map[arr[i]] += 1\n    } else {\n    count_map[arr[i]] = 1\n    i += 1\n    // [manual conversion needed for loop]: for i in range(0, n):\n    if ((count_map[arr[i]] == k)) {\n        return arr[i];\n        i += 1\n        return -1;\n    }\n}"}
{"id": "352_java", "language": "Java", "requirement": "Write a python function to check whether all the characters in a given string are unique.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bec68e`\n   b. Major behaviors: public static int unique_Characters(int str) {     // [manua...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int unique_Characters(int str) {\n    // [manual conversion needed for loop]: for i in range(len(str)):\n    // [manual conversion needed for loop]: for j in range(i + 1,len(str)):\n    if ((str[i] == str[j])) {\n        return False;;\n        return True;;\n    }\n}"}
{"id": "353_java", "language": "Java", "requirement": "Write a function to remove a specified column from a given nested list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b9c413`\n   b. Major behaviors: public static int remove_column(int list1, int n) {     // [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_column(int list1, int n) {\n    // [manual conversion needed for loop]: for i in list1:\n    del i[n]\n    return list1;\n}"}
{"id": "354_java", "language": "Java", "requirement": "Write a function to find t-nth term of arithemetic progression.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `102684`\n   b. Major behaviors: public static int tn_ap(int a, int n, int d) {     tn = a +...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tn_ap(int a, int n, int d) {\n    tn = a + (n - 1) * d\n    return tn;\n}"}
{"id": "355_java", "language": "Java", "requirement": "Write a python function to count the number of rectangles in a circle of radius r.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d23ddc`\n   b. Major behaviors: public static int count_Rectangles(int radius) {     rectang...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Rectangles(int radius) {\n    rectangles = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    // [manual conversion needed for loop]: for a in range(1, 2 * radius):\n    // [manual conversion needed for loop]: for b in range(1, 2 * radius):\n    diagnalLengthSquare = (a * a +  b * b)\n    if ((diagnalLengthSquare <= diameterSquare) ) {\n        rectangles += 1\n        return rectangles;\n    }\n}"}
{"id": "356_java", "language": "Java", "requirement": "Write a function to find the third angle of a triangle using two angles.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `86bf99`\n   b. Major behaviors: public static int find_angle(int a, int b) {     c = 180 - (...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_angle(int a, int b) {\n    c = 180 - (a + b)\n    return c;\n}"}
{"id": "357_java", "language": "Java", "requirement": "Write a function to find the maximum element of all the given tuple records.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c5f06a`\n   b. Major behaviors: public static int find_max(int test_list) {     res = max(in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_max(int test_list) {\n    res = max(int(j) for i in test_list for j in i)\n    return (res);\n}"}
{"id": "358_java", "language": "Java", "requirement": "Write a function to find modulo division of two lists using map and lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d69dff`\n   b. Major behaviors: public static int moddiv_list(int nums1, int nums2) {     re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int moddiv_list(int nums1, int nums2) {\n    result = map(lambda x, y: x % y, nums1, nums2)\n    return list(result);\n}"}
{"id": "359_java", "language": "Java", "requirement": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f835b3`\n   b. Major behaviors: public static int Check_Solution(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Check_Solution(int a, int b, int c) {\n    if ((2*b*b == 9*a*c)) {\n        return (\"Yes\");;\n        } else {\n        return (\"No\");;\n    }\n}"}
{"id": "360_java", "language": "Java", "requirement": "Write a function to find the n\u2019th carol number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7ab993`\n   b. Major behaviors: public static int get_carol(int n) {     result = (2**n) - 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_carol(int n) {\n    result = (2**n) - 1\n    return result * result - 2;\n}"}
{"id": "361_java", "language": "Java", "requirement": "Write a function to remove empty lists from a given list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `39905f`\n   b. Major behaviors: public static int remove_empty(int list1) {     remove_empty...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_empty(int list1) {\n    remove_empty = [x for x in list1 if x]\n    return remove_empty;\n}"}
{"id": "362_java", "language": "Java", "requirement": "Write a python function to find the item with maximum occurrences in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fa3cf8`\n   b. Major behaviors: public static int max_occurrences(int nums) {     max_val =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_occurrences(int nums) {\n    max_val = 0\n    result = nums[0]\n    // [manual conversion needed for loop]: for i in nums:\n    occu = nums.count(i)\n    if (occu > max_val) {\n        max_val = occu\n        result = i\n        return result;\n    }\n}"}
{"id": "363_java", "language": "Java", "requirement": "Write a function to add the k elements to each element in the tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7b9208`\n   b. Major behaviors: public static int add_K_element(int test_list, int K) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int add_K_element(int test_list, int K) {\n    res = [tuple(j + K for j in sub ) for sub in test_list]\n    return (res);\n}"}
{"id": "364_java", "language": "Java", "requirement": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `955171`\n   b. Major behaviors: public static int make_flip(int ch) {     return '1' if (ch...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int make_flip(int ch) {\n    return '1' if (ch == '0') else '0';\n    public static int get_flip_with_starting_charcter(int str, int expected) {\n        flip_count = 0\n        // [manual conversion needed for loop]: for i in range(len( str)):\n        if ((str[i] != expected)) {\n            flip_count += 1\n            expected = make_flip(expected)\n            return flip_count;\n            public static int min_flip_to_make_string_alternate(int str) {\n                return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1'));\n            }\n        }\n    }\n}"}
{"id": "365_java", "language": "Java", "requirement": "Write a python function to count the number of digits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cf6676`\n   b. Major behaviors: public static int count_Digit(int n) {     count = 0     //...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Digit(int n) {\n    count = 0\n    // [manual conversion needed for while loop]: while n != 0:\n    n //= 10\n    count += 1\n    return count;\n}"}
{"id": "366_java", "language": "Java", "requirement": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b1d49a`\n   b. Major behaviors: public static int adjacent_num_product(int list_nums) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int adjacent_num_product(int list_nums) {\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]));\n}"}
{"id": "367_java", "language": "Java", "requirement": "Write a function to check if a binary tree is balanced or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8139db`\n   b. Major behaviors: class Node: public static int __init__(int self, int data) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "class Node:\npublic static int __init__(int self, int data) {\n    self.data = data\n    self.left = None\n    self.right = None\n    public static int get_height(int root) {\n        if (root is None) {\n            return 0;\n            return max(get_height(root.left), get_height(root.right)) + 1;\n            public static int is_tree_balanced(int root) {\n                if (root is None) {\n                    return True;\n                    lh = get_height(root.left)\n                    rh = get_height(root.right)\n                    if ((abs(lh - rh) <= 1) and is_tree_balanced() {\n                        root.left) is True and is_tree_balanced( root.right) is True:\n                        return True;\n                        return False;\n                    }\n                }\n            }\n        }\n    }\n}"}
{"id": "368_java", "language": "Java", "requirement": "Write a function to repeat the given tuple n times.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `95be37`\n   b. Major behaviors: public static int repeat_tuples(int test_tup, int N) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int repeat_tuples(int test_tup, int N) {\n    res = ((test_tup, ) * N)\n    return (res);\n}"}
{"id": "369_java", "language": "Java", "requirement": "Write a function to find the lateral surface area of cuboid", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e2df48`\n   b. Major behaviors: public static int lateralsurface_cuboid(int l, int w, int h)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int lateralsurface_cuboid(int l, int w, int h) {\n    LSA = 2*h*(l+w)\n    return LSA;\n}"}
{"id": "370_java", "language": "Java", "requirement": "Write a function to sort a tuple by its float element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `679e0c`\n   b. Major behaviors: public static int float_sort(int price) {     float_sort=sor...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int float_sort(int price) {\n    float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n    return float_sort;\n}"}
{"id": "371_java", "language": "Java", "requirement": "Write a function to find the smallest missing element in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fab663`\n   b. Major behaviors: public static int smallest_missing(int A, int left_element,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int smallest_missing(int A, int left_element, int right_element) {\n    if (left_element > right_element) {\n        return left_element;\n        mid = left_element + (right_element - left_element) // 2\n        if (A[mid] == mid) {\n            return smallest_missing(A, mid + 1, right_element);\n            } else {\n            return smallest_missing(A, left_element, mid - 1);\n        }\n    }\n}"}
{"id": "372_java", "language": "Java", "requirement": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `344ce2`\n   b. Major behaviors: import heapq as hq public static int heap_assending(int nums...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\npublic static int heap_assending(int nums) {\n    hq.heapify(nums)\n    s_result = [hq.heappop(nums) for i in range(len(nums))]\n    return s_result;\n}"}
{"id": "373_java", "language": "Java", "requirement": "Write a function to find the volume of a cuboid.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8d9831`\n   b. Major behaviors: public static int volume_cuboid(int l, int w, int h) {     v...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int volume_cuboid(int l, int w, int h) {\n    volume=l*w*h\n    return volume;\n}"}
{"id": "374_java", "language": "Java", "requirement": "Write a function to print all permutations of a given string including duplicates.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `334886`\n   b. Major behaviors: public static int permute_string(int str) {     if (len(str)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int permute_string(int str) {\n    if (len(str) == 0) {\n        return [''];\n        prev_list = permute_string(str[1:len(str)])\n        next_list = []\n        // [manual conversion needed for loop]: for i in range(0,len(prev_list)):\n        // [manual conversion needed for loop]: for j in range(0,len(str)):\n        new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n        if (new_str not in next_list) {\n            next_list.append(new_str)\n            return next_list;\n        }\n    }\n}"}
{"id": "375_java", "language": "Java", "requirement": "Write a function to round the given number to the nearest multiple of a specific number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d5469a`\n   b. Major behaviors: public static int round_num(int n, int m) {     a = (n //m)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int round_num(int n, int m) {\n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a);\n}"}
{"id": "376_java", "language": "Java", "requirement": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b18449`\n   b. Major behaviors: public static int remove_replica(int test_tup) {     temp =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_replica(int test_tup) {\n    temp = set()\n    res = tuple(ele if ele not in temp and not temp.add(ele)\n    } else {\n    return (res);\n}"}
{"id": "377_java", "language": "Java", "requirement": "Write a python function to remove all occurrences of a character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bf3be7`\n   b. Major behaviors: public static int remove_Char(int s, int c)) {     counts =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_Char(int s, int c)) {\n    counts = s.count(c)\n    s = list(s)\n    // [manual conversion needed for while loop]: while counts :\n    s.remove(c)\n    counts -= 1\n    s = '' . join(s)\n    return (s);\n}"}
{"id": "378_java", "language": "Java", "requirement": "Write a python function to shift last element to first position in the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `89b8a7`\n   b. Major behaviors: public static int move_first(int test_list) {     test_list...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int move_first(int test_list) {\n    test_list = test_list[-1:] + test_list[:-1]\n    return test_list;\n}"}
{"id": "379_java", "language": "Java", "requirement": "Write a function to find the surface area of a cuboid.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6ccb0c`\n   b. Major behaviors: public static int surfacearea_cuboid(int l, int w, int h) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int surfacearea_cuboid(int l, int w, int h) {\n    SA = 2*(l*w + l * h + w * h)\n    return SA;\n}"}
{"id": "380_java", "language": "Java", "requirement": "Write a function to generate a two-dimensional array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e1c7e2`\n   b. Major behaviors: public static int multi_list(int rownum, int colnum) {     m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int multi_list(int rownum, int colnum) {\n    multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n    // [manual conversion needed for loop]: for row in range(rownum):\n    // [manual conversion needed for loop]: for col in range(colnum):\n    multi_list[row][col]= row*col\n    return multi_list;\n}"}
{"id": "381_java", "language": "Java", "requirement": "Write a function to sort a list of lists by a given index of the inner list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7b1257`\n   b. Major behaviors: from operator import itemgetter public static int index_on_i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from operator import itemgetter\npublic static int index_on_inner_list(int list_data, int index_no) {\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result;\n}"}
{"id": "382_java", "language": "Java", "requirement": "Write a function to find the number of rotations in a circularly sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d9920a`\n   b. Major behaviors: public static int find_rotation_count(int A) {     (left, ri...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_rotation_count(int A) {\n    (left, right) = (0, len(A) - 1)\n    // [manual conversion needed for while loop]: while left <= right:\n    if (A[left] <= A[right]) {\n        return left;\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if (A[mid] <= A[next] and A[mid] <= A[prev]) {\n            return mid;\n            } else if (A[mid] <= A[right]) {\n            right = mid - 1\n            } else if (A[mid] >= A[left]) {\n            left = mid + 1\n            return -1;\n        }\n    }\n}"}
{"id": "383_java", "language": "Java", "requirement": "Write a python function to toggle all odd bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `792ab6`\n   b. Major behaviors: public static int even_bit_toggle_number(int n)) {     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int even_bit_toggle_number(int n)) {\n    res = 0; count = 0; temp = n\n    while(temp > 0 ) :\n    if ((count % 2 == 0) ) {\n        res = res | (1 << count)\n        count = count + 1\n        temp >>= 1\n        return n ^ res;\n    }\n}"}
{"id": "384_java", "language": "Java", "requirement": "Write a python function to find the frequency of the smallest value in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `953e5d`\n   b. Major behaviors: public static int frequency_Of_Smallest(int n, int arr) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int frequency_Of_Smallest(int n, int arr) {\n    mn = arr[0]\n    freq = 1\n    // [manual conversion needed for loop]: for i in range(1,n):\n    if ((arr[i] < mn)) {\n        mn = arr[i]\n        freq = 1\n        } else if ((arr[i] == mn)) {\n        freq += 1\n        return freq;\n    }\n}"}
{"id": "385_java", "language": "Java", "requirement": "Write a function to find the n'th perrin number using recursion.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0bf811`\n   b. Major behaviors: public static int get_perrin(int n) {     if ((n == 0)) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_perrin(int n) {\n    if ((n == 0)) {\n        return 3;\n        if ((n == 1)) {\n            return 0;\n            if ((n == 2)) {\n                return 2;\n                return get_perrin(n - 2) + get_perrin(n - 3);\n            }\n        }\n    }\n}"}
{"id": "386_java", "language": "Java", "requirement": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `843f74`\n   b. Major behaviors: public static int swap_count(int s) {     chars = s     coun...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int swap_count(int s) {\n    chars = s\n    count_left = 0\n    count_right = 0\n    swap = 0\n    imbalance = 0;\n    // [manual conversion needed for loop]: for i in range(len(chars)):\n    if (chars[i] == '[') {\n        count_left += 1\n        if (imbalance > 0) {\n            swap += imbalance\n            imbalance -= 1\n            } else if (chars[i] == ']') {\n            count_right += 1\n            imbalance = (count_right - count_left)\n            return swap;\n        }\n    }\n}"}
{"id": "387_java", "language": "Java", "requirement": "Write a python function to check whether the hexadecimal number is even or odd.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `56349c`\n   b. Major behaviors: public static int even_or_odd(int N) {     l = len(N)     if...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int even_or_odd(int N) {\n    l = len(N)\n    if ((N[l-1] =='0'or N[l-1] =='2'or) {\n        N[l-1] =='4'or N[l-1] =='6'or\n        N[l-1] =='8'or N[l-1] =='A'or\n        N[l-1] =='C'or N[l-1] =='E'):\n        return (\"Even\");\n        } else {\n        return (\"Odd\");\n    }\n}"}
{"id": "388_java", "language": "Java", "requirement": "Write a python function to find the highest power of 2 that is less than or equal to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9a6b31`\n   b. Major behaviors: public static int highest_Power_of_2(int n) {     res = 0;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int highest_Power_of_2(int n) {\n    res = 0;\n    // [manual conversion needed for loop]: for i in range(n, 0, -1):\n    if (((i & (i - 1)) == 0)) {\n        res = i;\n        break;\n        return res;;\n    }\n}"}
{"id": "389_java", "language": "Java", "requirement": "Write a function to find the n'th lucas number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d75c1e`\n   b. Major behaviors: public static int find_lucas(int n) {     if ((n == 0)) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_lucas(int n) {\n    if ((n == 0)) {\n        return 2;\n        if ((n == 1)) {\n            return 1;\n            return find_lucas(n - 1) + find_lucas(n - 2);\n        }\n    }\n}"}
{"id": "390_java", "language": "Java", "requirement": "Write a function to insert a given string at the beginning of all items in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ec6f0f`\n   b. Major behaviors: public static int add_string(int list, int string) {     add...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int add_string(int list, int string) {\n    add_string=[string.format(i) for i in  list]\n    return add_string;\n}"}
{"id": "391_java", "language": "Java", "requirement": "Write a function to convert more than one list to nested dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `311dae`\n   b. Major behaviors: public static int convert_list_dictionary(int l1, int l2, in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int convert_list_dictionary(int l1, int l2, int l3) {\n    result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n    return result;\n}"}
{"id": "392_java", "language": "Java", "requirement": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `640cda`\n   b. Major behaviors: public static int get_max_sum(int n) {     res = list()...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_max_sum(int n) {\n    res = list()\n    res.append(0)\n    res.append(1)\n    i = 2\n    // [manual conversion needed for while loop]: while i<n + 1:\n    res.append(max(i, (res[int(i / 2)]\n    + res[int(i / 3)] +\n    res[int(i / 4)]\n    + res[int(i / 5)])))\n    i = i + 1\n    return res[n];\n}"}
{"id": "393_java", "language": "Java", "requirement": "Write a function to find the list with maximum length using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `caf53b`\n   b. Major behaviors: public static int max_length_list(int input_list) {     max_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_length_list(int input_list) {\n    max_length = max(len(x) for x in input_list )\n    max_list = max(input_list, key = lambda i: len(i))\n    return(max_length, max_list)\n}"}
{"id": "394_java", "language": "Java", "requirement": "Write a function to check if given tuple is distinct or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `41945e`\n   b. Major behaviors: public static int check_distinct(int test_tup) {     res = T...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_distinct(int test_tup) {\n    res = True\n    temp = set()\n    // [manual conversion needed for loop]: for ele in test_tup:\n    if (ele in temp) {\n        res = False\n        break\n        temp.add(ele)\n        return (res);\n    }\n}"}
{"id": "395_java", "language": "Java", "requirement": "Write a python function to find the first non-repeated character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `81ea2c`\n   b. Major behaviors: public static int first_non_repeating_character(int str1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first_non_repeating_character(int str1) {\n    char_order = []\n    ctr = {}\n    // [manual conversion needed for loop]: for c in str1:\n    if (c in ctr) {\n        ctr[c] += 1\n        } else {\n        ctr[c] = 1\n        char_order.append(c)\n        // [manual conversion needed for loop]: for c in char_order:\n        if (ctr[c] == 1) {\n            return c;\n            return None;\n        }\n    }\n}"}
{"id": "396_java", "language": "Java", "requirement": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `63a65b`\n   b. Major behaviors: import re regex = r'^[a-z]$|^([a-z]).*\\1$' public static int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\npublic static int check_char(int string) {\n    if(re.search(regex, string)):\n    return \"Valid\";\n    } else {\n    return \"Invalid\";\n}"}
{"id": "397_java", "language": "Java", "requirement": "Write a function to find the median of three specific numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fe201f`\n   b. Major behaviors: public static int median_numbers(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int median_numbers(int a, int b, int c) {\n    if (a > b) {\n        if (a < c) {\n            median = a\n            } else if (b > c) {\n            median = b\n            } else {\n            median = c\n            } else {\n            if (a > c) {\n                median = a\n                } else if (b < c) {\n                median = b\n                } else {\n                median = c\n                return median;\n            }\n        }\n    }\n}"}
{"id": "398_java", "language": "Java", "requirement": "Write a function to compute the sum of digits of each number of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9e366c`\n   b. Major behaviors: public static int sum_of_digits(int nums) {     return sum(i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_of_digits(int nums) {\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit());\n}"}
{"id": "399_java", "language": "Java", "requirement": "Write a function to perform the mathematical bitwise xor operation across the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3df774`\n   b. Major behaviors: public static int bitwise_xor(int test_tup1, int test_tup2)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int bitwise_xor(int test_tup1, int test_tup2) {\n    res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "400_java", "language": "Java", "requirement": "Write a function to extract the frequency of unique tuples in the given list order irrespective.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8fa4f0`\n   b. Major behaviors: public static int extract_freq(int test_list) {     res = le...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_freq(int test_list) {\n    res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n    return (res);\n}"}
{"id": "401_java", "language": "Java", "requirement": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c07058`\n   b. Major behaviors: public static int add_nested_tuples(int test_tup1, int test_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int add_nested_tuples(int test_tup1, int test_tup2) {\n    res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n    // [manual conversion needed for loop]: for tup1, tup2 in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "402_java", "language": "Java", "requirement": "Write a function to compute the value of ncr%p.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5c1fb9`\n   b. Major behaviors: public static int ncr_modp(int n, int r, int p) {     C = [0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int ncr_modp(int n, int r, int p) {\n    C = [0 for i in range(r+1)]\n    C[0] = 1\n    // [manual conversion needed for loop]: for i in range(1, n+1):\n    // [manual conversion needed for loop]: for j in range(min(i, r), 0, -1):\n    C[j] = (C[j] + C[j-1]) % p\n    return C[r];\n}"}
{"id": "403_java", "language": "Java", "requirement": "Write a function to check if a url is valid or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `02a794`\n   b. Major behaviors: import re public static int is_valid_URL(int str) {     rege...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int is_valid_URL(int str) {\n    regex = (\"((http|https)://)(www.)?\" +\n    \"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n    \"{2,256}\\\\.[a-z]\" +\n    \"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n    \"._\\\\+~#?&//=]*)\")\n    p = re.compile(regex)\n    if ((str == None)) {\n        return False;\n        if(re.search(p, str)):\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "404_java", "language": "Java", "requirement": "Write a python function to find the minimum of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `de7b2f`\n   b. Major behaviors: public static int minimum(int a, int b) {     if (a <= b) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int minimum(int a, int b) {\n    if (a <= b) {\n        return a;\n        } else {\n        return b;\n    }\n}"}
{"id": "405_java", "language": "Java", "requirement": "Write a function to check whether an element exists within a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `888101`\n   b. Major behaviors: public static int check_tuplex(int tuplex, int tuple1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_tuplex(int tuplex, int tuple1) {\n    if (tuple1 in tuplex) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "406_java", "language": "Java", "requirement": "Write a python function to find the parity of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `230ca4`\n   b. Major behaviors: public static int find_Parity(int x) {     y = x ^ (x >> 1);...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Parity(int x) {\n    y = x ^ (x >> 1);\n    y = y ^ (y >> 2);\n    y = y ^ (y >> 4);\n    y = y ^ (y >> 8);\n    y = y ^ (y >> 16);\n    if ((y & 1)) {\n        return (\"Odd Parity\");;\n        return (\"Even Parity\");;\n    }\n}"}
{"id": "407_java", "language": "Java", "requirement": "Write a function to create the next bigger number by rearranging the digits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `74f8fb`\n   b. Major behaviors: public static int rearrange_bigger(int n) {     nums = list(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rearrange_bigger(int n) {\n    nums = list(str(n))\n    // [manual conversion needed for loop]: for i in range(len(nums)-2,-1,-1):\n    if (nums[i] < nums[i+1]) {\n        z = nums[i:]\n        y = min(filter(lambda x: x > z[0], z))\n        z.remove(y)\n        z.sort()\n        nums[i:] = [y] + z\n        return int(\"\".join(nums));\n        return False;\n    }\n}"}
{"id": "408_java", "language": "Java", "requirement": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `aa9f59`\n   b. Major behaviors: import heapq public static int k_smallest_pairs(int nums1, i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\npublic static int k_smallest_pairs(int nums1, int nums2, int k) {\n    queue = []\n    public static int push(int i, int j) {\n        if (i < len(nums1) and j < len(nums2)) {\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n            push(0, 0)\n            pairs = []\n            // [manual conversion needed for while loop]: while queue and len(pairs) < k:\n            _, i, j = heapq.heappop(queue)\n            pairs.append([nums1[i], nums2[j]])\n            push(i, j + 1)\n            if (j == 0) {\n                push(i + 1, 0)\n                return pairs;\n            }\n        }\n    }\n}"}
{"id": "409_java", "language": "Java", "requirement": "Write a function to find the minimum product from the pairs of tuples within a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c72fd9`\n   b. Major behaviors: public static int min_product_tuple(int list1) {     result_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_product_tuple(int list1) {\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min;\n}"}
{"id": "410_java", "language": "Java", "requirement": "Write a function to find the minimum value in a given heterogeneous list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fe38ee`\n   b. Major behaviors: public static int min_val(int listval) {     min_val = min(i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_val(int listval) {\n    min_val = min(i for i in listval if isinstance(i, int))\n    return min_val;\n}"}
{"id": "411_java", "language": "Java", "requirement": "Write a function to convert the given snake case string to camel case string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6b8777`\n   b. Major behaviors: import re public static int snake_to_camel(int word) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int snake_to_camel(int word) {\n    return ''.join(x.capitalize() or '_' for x in word.split('_'));\n}"}
{"id": "412_java", "language": "Java", "requirement": "Write a python function to remove odd numbers from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5d658f`\n   b. Major behaviors: public static int remove_odd(int l) {     // [manual convers...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_odd(int l) {\n    // [manual conversion needed for loop]: for i in l:\n    if (i % 2 != 0) {\n        l.remove(i)\n        return l;\n    }\n}"}
{"id": "413_java", "language": "Java", "requirement": "Write a function to extract the nth element from a given list of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `713dc1`\n   b. Major behaviors: public static int extract_nth_element(int list1, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_nth_element(int list1, int n) {\n    result = [x[n] for x in list1]\n    return result;\n}"}
{"id": "414_java", "language": "Java", "requirement": "Write a python function to check whether the value exists in a sequence or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5cdeb7`\n   b. Major behaviors: public static int overlapping(int list1, int list2) {     c=...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int overlapping(int list1, int list2) {\n    c=0\n    d=0\n    // [manual conversion needed for loop]: for i in list1:\n    c+=1\n    // [manual conversion needed for loop]: for i in list2:\n    d+=1\n    // [manual conversion needed for loop]: for i in range(0,c):\n    // [manual conversion needed for loop]: for j in range(0,d):\n    if(list1[i]==list2[j]):\n    return 1;\n    return 0;\n}"}
{"id": "415_java", "language": "Java", "requirement": "Write a python function to find a pair with highest product from a given array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a658d4`\n   b. Major behaviors: public static int max_Product(int arr) {     arr_len = len(a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_Product(int arr) {\n    arr_len = len(arr)\n    if ((arr_len < 2)) {\n        return (\"No pairs exists\");\n        x = arr[0]; y = arr[1]\n        // [manual conversion needed for loop]: for i in range(0,arr_len):\n        // [manual conversion needed for loop]: for j in range(i + 1,arr_len):\n        if ((arr[i] * arr[j] > x * y)) {\n            x = arr[i]; y = arr[j]\n            return x,y;\n        }\n    }\n}"}
{"id": "416_java", "language": "Java", "requirement": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `014515`\n   b. Major behaviors: MAX = 1000000 public static int breakSum(int n) {     dp = [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "MAX = 1000000\npublic static int breakSum(int n) {\n    dp = [0]*(n+1)\n    dp[0] = 0\n    dp[1] = 1\n    // [manual conversion needed for loop]: for i in range(2, n+1):\n    dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i);\n    return dp[n];\n}"}
{"id": "417_java", "language": "Java", "requirement": "Write a function to find common first element in given list of tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `739a51`\n   b. Major behaviors: public static int group_tuples(int Input) {     out = {}...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int group_tuples(int Input) {\n    out = {}\n    // [manual conversion needed for loop]: for elem in Input:\n    try:\n    out[elem[0]].extend(elem[1:])\n    except KeyError:\n    out[elem[0]] = list(elem)\n    return [tuple(values) for values in out.values()];\n}"}
{"id": "418_java", "language": "Java", "requirement": "Write a python function to find the sublist having maximum length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bd3a8d`\n   b. Major behaviors: public static int Find_Max(int lst) {     maxList = max((x)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Find_Max(int lst) {\n    maxList = max((x) for x in lst)\n    return maxList;\n}"}
{"id": "419_java", "language": "Java", "requirement": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `83e60b`\n   b. Major behaviors: public static int round_and_sum(int list1) {     lenght=len(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int round_and_sum(int list1) {\n    lenght=len(list1)\n    round_and_sum=sum(list(map(round,list1))* lenght)\n    return round_and_sum;\n}"}
{"id": "420_java", "language": "Java", "requirement": "Write a python function to find the cube sum of first n even natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `16ffbb`\n   b. Major behaviors: public static int cube_Sum(int n) {     sum = 0     // [manu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int cube_Sum(int n) {\n    sum = 0\n    // [manual conversion needed for loop]: for i in range(1,n + 1):\n    sum += (2*i)*(2*i)*(2*i)\n    return sum;\n}"}
{"id": "421_java", "language": "Java", "requirement": "Write a function to concatenate each element of tuple by the delimiter.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `85480d`\n   b. Major behaviors: public static int concatenate_tuple(int test_tup) {     deli...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int concatenate_tuple(int test_tup) {\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res));\n}"}
{"id": "422_java", "language": "Java", "requirement": "Write a python function to find the average of cubes of first n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `32547c`\n   b. Major behaviors: public static int find_Average_Of_Cube(int n) {     sum = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Average_Of_Cube(int n) {\n    sum = 0\n    // [manual conversion needed for loop]: for i in range(1, n + 1):\n    sum += i * i * i\n    return round(sum / n, 6);\n}"}
{"id": "423_java", "language": "Java", "requirement": "Write a function to solve gold mine problem.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `06a7fc`\n   b. Major behaviors: public static int get_maxgold(int gold, int m, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_maxgold(int gold, int m, int n) {\n    goldTable = [[0 for i in range(n)]\n    // [manual conversion needed for loop]: for j in range(m)]\n    // [manual conversion needed for loop]: for col in range(n-1, -1, -1):\n    // [manual conversion needed for loop]: for row in range(m):\n    if ((col == n-1)) {\n        right = 0\n        } else {\n        right = goldTable[row][col+1]\n        if ((row == 0 or col == n-1)) {\n            right_up = 0\n            } else {\n            right_up = goldTable[row-1][col+1]\n            if ((row == m-1 or col == n-1)) {\n                right_down = 0\n                } else {\n                right_down = goldTable[row+1][col+1]\n                goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n                res = goldTable[0][0]\n                // [manual conversion needed for loop]: for i in range(1, m):\n                res = max(res, goldTable[i][0])\n                return res;\n            }\n        }\n    }\n}"}
{"id": "424_java", "language": "Java", "requirement": "Write a function to extract only the rear index element of each string in the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3d6aac`\n   b. Major behaviors: public static int extract_rear(int test_tuple) {     res = l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_rear(int test_tuple) {\n    res = list(sub[len(sub) - 1] for sub in test_tuple)\n    return (res);\n}"}
{"id": "425_java", "language": "Java", "requirement": "Write a function to count the number of sublists containing a particular element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5c5173`\n   b. Major behaviors: public static int count_element_in_list(int list1, int x) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_element_in_list(int list1, int x) {\n    ctr = 0\n    // [manual conversion needed for loop]: for i in range(len(list1)):\n    if (x in list1[i]) {\n        ctr+= 1\n        return ctr;\n    }\n}"}
{"id": "426_java", "language": "Java", "requirement": "Write a function to filter odd numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0c19db`\n   b. Major behaviors: public static int filter_oddnumbers(int nums) {     odd_nums...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int filter_oddnumbers(int nums) {\n    odd_nums = list(filter(lambda x: x%2 != 0, nums))\n    return odd_nums;\n}"}
{"id": "427_java", "language": "Java", "requirement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `129330`\n   b. Major behaviors: import re public static int change_date_format(int dt) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int change_date_format(int dt) {\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt);\n}"}
{"id": "428_java", "language": "Java", "requirement": "Write a function to sort the given array by using shell sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `861da0`\n   b. Major behaviors: public static int shell_sort(int my_list) {     gap = len(my...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int shell_sort(int my_list) {\n    gap = len(my_list) // 2\n    // [manual conversion needed for while loop]: while gap > 0:\n    // [manual conversion needed for loop]: for i in range(gap, len(my_list)):\n    current_item = my_list[i]\n    j = i\n    // [manual conversion needed for while loop]: while j >= gap and my_list[j - gap] > current_item:\n    my_list[j] = my_list[j - gap]\n    j -= gap\n    my_list[j] = current_item\n    gap //= 2\n\n    return my_list;\n}"}
{"id": "429_java", "language": "Java", "requirement": "Write a function to extract the elementwise and tuples from the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `46f2b0`\n   b. Major behaviors: public static int and_tuples(int test_tup1, int test_tup2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int and_tuples(int test_tup1, int test_tup2) {\n    res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "430_java", "language": "Java", "requirement": "Write a function to find the directrix of a parabola.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `873db9`\n   b. Major behaviors: public static int parabola_directrix(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int parabola_directrix(int a, int b, int c) {\n    directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n    return directrix;\n}"}
{"id": "431_java", "language": "Java", "requirement": "Write a function that takes two lists and returns true if they have at least one common element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ded601`\n   b. Major behaviors: public static int common_element(int list1, int list2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int common_element(int list1, int list2) {\n    result = False\n    // [manual conversion needed for loop]: for x in list1:\n    // [manual conversion needed for loop]: for y in list2:\n    if (x == y) {\n        result = True\n        return result;\n    }\n}"}
{"id": "432_java", "language": "Java", "requirement": "Write a function to find the median of a trapezium.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `83ee2d`\n   b. Major behaviors: public static int median_trapezium(int base1, int base2, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int median_trapezium(int base1, int base2, int height) {\n    median = 0.5 * (base1+ base2)\n    return median;\n}"}
{"id": "433_java", "language": "Java", "requirement": "Write a function to check whether the entered number is greater than the elements of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9ee096`\n   b. Major behaviors: public static int check_greater(int arr, int number) {     a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_greater(int arr, int number) {\n    arr.sort()\n    if (number > arr[-1]) {\n        return ('Yes, the entered number is greater than those in the array');\n        } else {\n        return ('No, entered number is less than those in the array');\n    }\n}"}
{"id": "434_java", "language": "Java", "requirement": "Write a function that matches a string that has an a followed by one or more b's.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c241a5`\n   b. Major behaviors: import re public static int text_match_one(int text) {     p...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match_one(int text) {\n    patterns = 'ab+?'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return('Not matched!')\n    }\n}"}
{"id": "435_java", "language": "Java", "requirement": "Write a python function to find the last digit of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7e8395`\n   b. Major behaviors: public static int last_Digit(int n)) {     return (n % 10);...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int last_Digit(int n)) {\n    return (n % 10);\n}"}
{"id": "436_java", "language": "Java", "requirement": "Write a python function to print negative numbers in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6d867e`\n   b. Major behaviors: public static int neg_nos(int list1) {     // [manual conver...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int neg_nos(int list1) {\n    // [manual conversion needed for loop]: for num in list1:\n    if (num < 0) {\n        return num;\n    }\n}"}
{"id": "437_java", "language": "Java", "requirement": "Write a function to remove odd characters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `016728`\n   b. Major behaviors: public static int remove_odd(int str1) {     str2 = ''     /...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_odd(int str1) {\n    str2 = ''\n    // [manual conversion needed for loop]: for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n    str2 = str2 + str1[i - 1]\n    return str2;\n}"}
{"id": "438_java", "language": "Java", "requirement": "Write a function to count bidirectional tuple pairs.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4938a7`\n   b. Major behaviors: public static int count_bidirectional(int test_list) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_bidirectional(int test_list) {\n    res = 0\n    // [manual conversion needed for loop]: for idx in range(0, len(test_list)):\n    // [manual conversion needed for loop]: for iidx in range(idx + 1, len(test_list)):\n    if (test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]) {\n        res += 1\n        return (str(res));\n    }\n}"}
{"id": "439_java", "language": "Java", "requirement": "Write a function to convert a list of multiple integers into a single integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f87447`\n   b. Major behaviors: public static int multiple_to_single(int L) {     x = int(\"\"...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int multiple_to_single(int L) {\n    x = int(\"\".join(map(str, L)))\n    return x;\n}"}
{"id": "440_java", "language": "Java", "requirement": "Write a function to find all adverbs and their positions in a given sentence.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c0eb39`\n   b. Major behaviors: import re public static int find_adverb_position(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int find_adverb_position(int text) {\n    // [manual conversion needed for loop]: for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0));\n}"}
{"id": "441_java", "language": "Java", "requirement": "Write a function to find the surface area of a cube.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a8b556`\n   b. Major behaviors: public static int surfacearea_cube(int l) {     surfacearea=...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int surfacearea_cube(int l) {\n    surfacearea= 6*l*l\n    return surfacearea;\n}"}
{"id": "442_java", "language": "Java", "requirement": "Write a function to find the ration of positive numbers in an array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `191df4`\n   b. Major behaviors: from array import array public static int positive_count(int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from array import array\npublic static int positive_count(int nums) {\n    n = len(nums)\n    n1 = 0\n    // [manual conversion needed for loop]: for x in nums:\n    if (x > 0) {\n        n1 += 1\n        } else {\n        None\n        return round(n1/n,2);\n    }\n}"}
{"id": "443_java", "language": "Java", "requirement": "Write a python function to find the largest negative number from the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3536da`\n   b. Major behaviors: public static int largest_neg(int list1) {     max = list1[0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int largest_neg(int list1) {\n    max = list1[0]\n    // [manual conversion needed for loop]: for x in list1:\n    if (x < max ) {\n        max = x\n        return max;\n    }\n}"}
{"id": "444_java", "language": "Java", "requirement": "Write a function to trim each tuple by k in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a06ecc`\n   b. Major behaviors: public static int trim_tuple(int test_list, int K) {     res...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int trim_tuple(int test_list, int K) {\n    res = []\n    // [manual conversion needed for loop]: for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n    return (str(res));\n}"}
{"id": "445_java", "language": "Java", "requirement": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0c09c9`\n   b. Major behaviors: public static int index_multiplication(int test_tup1, int te...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int index_multiplication(int test_tup1, int test_tup2) {\n    res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n    // [manual conversion needed for loop]: for tup1, tup2 in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "446_java", "language": "Java", "requirement": "Write a python function to count the occurence of all elements of list in a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc9c5d`\n   b. Major behaviors: from collections import Counter public static int count_Occu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\npublic static int count_Occurrence(int tup, int lst) {\n    count = 0\n    // [manual conversion needed for loop]: for item in tup:\n    if (item in lst) {\n        count+= 1\n        return count;\n    }\n}"}
{"id": "447_java", "language": "Java", "requirement": "Write a function to find cubes of individual elements in a list using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2e74c2`\n   b. Major behaviors: public static int cube_nums(int nums) {     cube_nums = list...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int cube_nums(int nums) {\n    cube_nums = list(map(lambda x: x ** 3, nums))\n    return cube_nums;\n}"}
{"id": "448_java", "language": "Java", "requirement": "Write a function to calculate the sum of perrin numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e02115`\n   b. Major behaviors: public static int cal_sum(int n) {     a = 3     b = 0     c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int cal_sum(int n) {\n    a = 3\n    b = 0\n    c = 2\n    if ((n == 0)) {\n        return 3;\n        if ((n == 1)) {\n            return 3;\n            if ((n == 2)) {\n                return 5;\n                sum = 5\n                // [manual conversion needed for while loop]: while (n > 2):\n                d = a + b\n                sum = sum + d\n                a = b\n                b = c\n                c = d\n                n = n-1\n                return sum;\n            }\n        }\n    }\n}"}
{"id": "449_java", "language": "Java", "requirement": "Write a python function to check whether the triangle is valid or not if 3 points are given.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `82338c`\n   b. Major behaviors: public static int check_Triangle(int x1, int y1, int x2, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_Triangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\n    if (a == 0) {\n        return ('No');\n        } else {\n        return ('Yes');\n    }\n}"}
{"id": "450_java", "language": "Java", "requirement": "Write a function to extract specified size of strings from a give list of string values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f1b041`\n   b. Major behaviors: public static int extract_string(int str, int l) {     resul...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_string(int str, int l) {\n    result = [e for e in str if len(e) == l]\n    return result;\n}"}
{"id": "451_java", "language": "Java", "requirement": "Write a function to remove all whitespaces from the given string using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `64e806`\n   b. Major behaviors: import re public static int remove_whitespaces(int text1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_whitespaces(int text1) {\n    return (re.sub(r'\\s+', '',text1));\n}"}
{"id": "452_java", "language": "Java", "requirement": "Write a function that gives loss amount if the given amount has loss else return none.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7d3431`\n   b. Major behaviors: public static int loss_amount(int actual_cost, int sale_amou...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int loss_amount(int actual_cost, int sale_amount) {\n    if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount;\n    } else {\n    return None;\n}"}
{"id": "453_java", "language": "Java", "requirement": "Write a python function to find the sum of even factors of a number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `13589d`\n   b. Major behaviors: import math public static int sumofFactors(int n)) {     if...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int sumofFactors(int n)) {\n    if ((n % 2 != 0) ) {\n        return 0;\n        res = 1\n        // [manual conversion needed for loop]: for i in range(2, (int)(math.sqrt(n)) + 1) :\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        // [manual conversion needed for while loop]: while (n % i == 0) :\n        count= count + 1\n        n = n // i\n        if ((i == 2 and count == 1) ) {\n            curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n            res = res * curr_sum\n            if ((n >= 2) ) {\n                res = res * (1 + n)\n                return res;\n            }\n        }\n    }\n}"}
{"id": "454_java", "language": "Java", "requirement": "Write a function that matches a word containing 'z'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `673a0d`\n   b. Major behaviors: import re public static int text_match_wordz(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match_wordz(int text) {\n    patterns = '\\w*z.\\w*'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return('Not matched!')\n    }\n}"}
{"id": "455_java", "language": "Java", "requirement": "Write a function to check whether the given month number contains 31 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9e235a`\n   b. Major behaviors: public static int check_monthnumb_number(int monthnum2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_monthnumb_number(int monthnum2) {\n    if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True;\n    } else {\n    return False;\n}"}
{"id": "456_java", "language": "Java", "requirement": "Write a function to reverse strings in a given list of string values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bce695`\n   b. Major behaviors: public static int reverse_string_list(int stringlist) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int reverse_string_list(int stringlist) {\n    result = [x[::-1] for x in stringlist]\n    return result;\n}"}
{"id": "457_java", "language": "Java", "requirement": "Write a python function to find the sublist having minimum length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `405b82`\n   b. Major behaviors: public static int Find_Min(int lst) {     minList = min((x)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Find_Min(int lst) {\n    minList = min((x) for x in lst)\n    return minList;\n}"}
{"id": "458_java", "language": "Java", "requirement": "Write a function to find the area of a rectangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e6d214`\n   b. Major behaviors: public static int rectangle_area(int l, int b) {     area=l*...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rectangle_area(int l, int b) {\n    area=l*b\n    return area;\n}"}
{"id": "459_java", "language": "Java", "requirement": "Write a function to remove uppercase substrings from a given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `08a793`\n   b. Major behaviors: import re public static int remove_uppercase(int str1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_uppercase(int str1) {\n    remove_upper = lambda text: re.sub('[A-Z]', '', text)\n    result =  remove_upper(str1)\n    return (result);\n}"}
{"id": "460_java", "language": "Java", "requirement": "Write a python function to get the first element of each sublist.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dac15f`\n   b. Major behaviors: public static int Extract(int lst) {     return [item[0] for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Extract(int lst) {\n    return [item[0] for item in lst];\n}"}
{"id": "461_java", "language": "Java", "requirement": "Write a python function to count the upper case characters in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ed64fd`\n   b. Major behaviors: public static int upper_ctr(int str) {     upper_ctr = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int upper_ctr(int str) {\n    upper_ctr = 0\n    // [manual conversion needed for loop]: for i in range(len(str)):\n    if (str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1) {\n        return upper_ctr;\n    }\n}"}
{"id": "462_java", "language": "Java", "requirement": "Write a function to find all possible combinations of the elements of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `33e9d2`\n   b. Major behaviors: public static int combinations_list(int list1) {     if (len...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int combinations_list(int list1) {\n    if (len(list1) == 0) {\n        return [[]];\n        result = []\n        // [manual conversion needed for loop]: for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n        return result;\n    }\n}"}
{"id": "463_java", "language": "Java", "requirement": "Write a function to find the maximum product subarray of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e5fc25`\n   b. Major behaviors: public static int max_subarray_product(int arr) {     n = le...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_subarray_product(int arr) {\n    n = len(arr)\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 0\n    flag = 0\n    // [manual conversion needed for loop]: for i in range(0, n):\n    if (arr[i] > 0) {\n        max_ending_here = max_ending_here * arr[i]\n        min_ending_here = min (min_ending_here * arr[i], 1)\n        flag = 1\n        } else if (arr[i] == 0) {\n        max_ending_here = 1\n        min_ending_here = 1\n        } else {\n        temp = max_ending_here\n        max_ending_here = max (min_ending_here * arr[i], 1)\n        min_ending_here = temp * arr[i]\n        if ((max_so_far < max_ending_here)) {\n            max_so_far = max_ending_here\n            if (flag == 0 and max_so_far == 0) {\n                return 0;\n                return max_so_far;\n            }\n        }\n    }\n}"}
{"id": "464_java", "language": "Java", "requirement": "Write a function to check if all values are same in a dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9b6526`\n   b. Major behaviors: public static int check_value(int dict, int n) {     result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_value(int dict, int n) {\n    result = all(x == n for x in dict.values())\n    return result;\n}"}
{"id": "465_java", "language": "Java", "requirement": "Write a function to drop empty items from a given dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1cde67`\n   b. Major behaviors: public static int drop_empty(int dict1) {     dict1 = {key:v...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int drop_empty(int dict1) {\n    dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n    return dict1;\n}"}
{"id": "466_java", "language": "Java", "requirement": "Write a function to find the peak element in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `860872`\n   b. Major behaviors: public static int find_peak_util(int arr, int low, int high,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_peak_util(int arr, int low, int high, int n) {\n    mid = low + (high - low)/2\n    mid = int(mid)\n    if (((mid == 0 or arr[mid - 1] <= arr[mid]) and) {\n        (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid;\n        } else if ((mid > 0 and arr[mid - 1] > arr[mid])) {\n        return find_peak_util(arr, low, (mid - 1), n);\n        } else {\n        return find_peak_util(arr, (mid + 1), high, n);\n        public static int find_peak(int arr, int n) {\n            return find_peak_util(arr, 0, n - 1, n);\n        }\n    }\n}"}
{"id": "467_java", "language": "Java", "requirement": "Write a python function to convert decimal number to octal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e44b80`\n   b. Major behaviors: public static int decimal_to_Octal(int deciNum) {     octalN...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int decimal_to_Octal(int deciNum) {\n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    // [manual conversion needed for while loop]: while (deciNum!= 0):\n    remainder= deciNum % 8;\n    octalNum+= remainder*countval;\n    countval= countval*10;\n    deciNum //= 8;\n    return (octalNum);\n}"}
{"id": "468_java", "language": "Java", "requirement": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `155b9f`\n   b. Major behaviors: public static int max_product(int arr, int n) {     mpis =[0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_product(int arr, int n) {\n    mpis =[0] * (n)\n    // [manual conversion needed for loop]: for i in range(n):\n    mpis[i] = arr[i]\n    // [manual conversion needed for loop]: for i in range(1, n):\n    // [manual conversion needed for loop]: for j in range(i):\n    if ((arr[i] > arr[j] and) {\n        mpis[i] < (mpis[j] * arr[i])):\n        mpis[i] = mpis[j] * arr[i]\n        return max(mpis);\n    }\n}"}
{"id": "469_java", "language": "Java", "requirement": "Write a function to find the maximum profit earned from a maximum of k stock transactions", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `729252`\n   b. Major behaviors: public static int max_profit(int price, int k) {     n = len...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_profit(int price, int k) {\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    // [manual conversion needed for loop]: for i in range(k + 1):\n    // [manual conversion needed for loop]: for j in range(n):\n    if (i == 0 or j == 0) {\n        final_profit[i][j] = 0\n        } else {\n        max_so_far = 0\n        // [manual conversion needed for loop]: for x in range(j):\n        curr_price = price[j] - price[x] + final_profit[i-1][x]\n        if (max_so_far < curr_price) {\n            max_so_far = curr_price\n            final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n            return final_profit[k][n-1];\n        }\n    }\n}"}
{"id": "470_java", "language": "Java", "requirement": "Write a function to find the pairwise addition of the elements of the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0641ee`\n   b. Major behaviors: public static int add_pairwise(int test_tup) {     res = tup...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int add_pairwise(int test_tup) {\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return (res);\n}"}
{"id": "471_java", "language": "Java", "requirement": "Write a python function to find remainder of array multiplication divided by n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `57629b`\n   b. Major behaviors: public static int find_remainder(int arr, int lens, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_remainder(int arr, int lens, int n) {\n    mul = 1\n    // [manual conversion needed for loop]: for i in range(lens):\n    mul = (mul * (arr[i] % n)) % n\n    return mul % n;\n}"}
{"id": "472_java", "language": "Java", "requirement": "Write a python function to check whether the given list contains consecutive numbers or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9ae17d`\n   b. Major behaviors: public static int check_Consecutive(int l) {     return sort...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_Consecutive(int l) {\n    return sorted(l) == list(range(min(l),max(l)+1));\n}"}
{"id": "473_java", "language": "Java", "requirement": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c6ef8c`\n   b. Major behaviors: public static int tuple_intersection(int test_list1, int tes...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tuple_intersection(int test_list1, int test_list2) {\n    res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n    return (res);\n}"}
{"id": "474_java", "language": "Java", "requirement": "Write a function to replace characters in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6ec8e1`\n   b. Major behaviors: public static int replace_char(int str1, int ch, int newch)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int replace_char(int str1, int ch, int newch) {\n    str2 = str1.replace(ch, newch)\n    return str2;\n}"}
{"id": "475_java", "language": "Java", "requirement": "Write a function to sort counter by value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6e087e`\n   b. Major behaviors: from collections import Counter public static int sort_count...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\npublic static int sort_counter(int dict1) {\n    x = Counter(dict1)\n    sort_counter=x.most_common()\n    return sort_counter;\n}"}
{"id": "476_java", "language": "Java", "requirement": "Write a python function to find the sum of the largest and smallest value in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `173525`\n   b. Major behaviors: public static int big_sum(int nums) {     sum= max(nums)+min...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int big_sum(int nums) {\n    sum= max(nums)+min(nums)\n    return sum;\n}"}
{"id": "477_java", "language": "Java", "requirement": "Write a python function to convert the given string to lower case.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b36262`\n   b. Major behaviors: public static int is_lower(int string) {     return (string....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_lower(int string) {\n    return (string.lower());\n}"}
{"id": "478_java", "language": "Java", "requirement": "Write a function to remove lowercase substrings from a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `99e50e`\n   b. Major behaviors: import re public static int remove_lowercase(int str1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_lowercase(int str1) {\n    remove_lower = lambda text: re.sub('[a-z]', '', text)\n    result =  remove_lower(str1)\n    return result;\n}"}
{"id": "479_java", "language": "Java", "requirement": "Write a python function to find the first digit of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9cd02d`\n   b. Major behaviors: public static int first_Digit(int n)) {     // [manual conve...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first_Digit(int n)) {\n    // [manual conversion needed for while loop]: while n >= 10:\n    n = n / 10;\n    return int(n);\n}"}
{"id": "480_java", "language": "Java", "requirement": "Write a python function to find the maximum occurring character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `00d6ca`\n   b. Major behaviors: public static int get_max_occuring_char(int str1) {     ASCI...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_max_occuring_char(int str1) {\n    ASCII_SIZE = 256\n    ctr = [0] * ASCII_SIZE\n    max = -1\n    ch = ''\n    // [manual conversion needed for loop]: for i in str1:\n    ctr[ord(i)]+=1;\n    // [manual conversion needed for loop]: for i in str1:\n    if (max < ctr[ord(i)]) {\n        max = ctr[ord(i)]\n        ch = i\n        return ch;\n    }\n}"}
{"id": "481_java", "language": "Java", "requirement": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `021831`\n   b. Major behaviors: public static int is_subset_sum(int set, int n, int sum) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_subset_sum(int set, int n, int sum) {\n    if ((sum == 0)) {\n        return True;\n        if ((n == 0)) {\n            return False;\n            if ((set[n - 1] > sum)) {\n                return is_subset_sum(set, n - 1, sum);\n                return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1]);\n            }\n        }\n    }\n}"}
{"id": "482_java", "language": "Java", "requirement": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bd6c13`\n   b. Major behaviors: import re public static int match(int text) {     pattern =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int match(int text) {\n    pattern = '[A-Z]+[a-z]+$'\n    if (re.search(pattern, text)) {\n        return('Yes')\n        } else {\n        return('No')\n    }\n}"}
{"id": "483_java", "language": "Java", "requirement": "Write a python function to find the first natural number whose factorial is divisible by x.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e3af0a`\n   b. Major behaviors: public static int first_Factorial_Divisible_Number(int x) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first_Factorial_Divisible_Number(int x) {\n    i = 1;\n    fact = 1;\n    // [manual conversion needed for loop]: for i in range(1,x):\n    fact = fact * i\n    if ((fact % x == 0)) {\n        break\n        return i;\n    }\n}"}
{"id": "484_java", "language": "Java", "requirement": "Write a function to remove the matching tuples from the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `acebaa`\n   b. Major behaviors: public static int remove_matching_tuple(int test_list1, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_matching_tuple(int test_list1, int test_list2) {\n    res = [sub for sub in test_list1 if sub not in test_list2]\n    return (res);\n}"}
{"id": "485_java", "language": "Java", "requirement": "Write a function to find the largest palindromic number in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `21252c`\n   b. Major behaviors: public static int is_palindrome(int n)) {     divisor = 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_palindrome(int n)) {\n    divisor = 1\n    // [manual conversion needed for while loop]: while (n / divisor >= 10) :\n    divisor *= 10\n    // [manual conversion needed for while loop]: while (n != 0) :\n    leading = n // divisor\n    trailing = n % 10\n    if ((leading != trailing) ) {\n        return False;\n        n = (n % divisor) // 10\n        divisor = divisor // 100\n        return True;\n        public static int largest_palindrome(int A, int n)) {\n            A.sort()\n            // [manual conversion needed for loop]: for i in range(n - 1, -1, -1) :\n            if ((is_palindrome(A[i])) ) {\n                return A[i];\n                return -1;\n            }\n        }\n    }\n}"}
{"id": "486_java", "language": "Java", "requirement": "Write a function to compute binomial probability for the given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8c4e87`\n   b. Major behaviors: public static int nCr(int n, int r) {     if ((r > n / 2)) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int nCr(int n, int r) {\n    if ((r > n / 2)) {\n        r = n - r\n        answer = 1\n        // [manual conversion needed for loop]: for i in range(1, r + 1):\n        answer *= (n - r + i)\n        answer /= i\n        return answer;\n        public static int binomial_probability(int n, int k, int p) {\n            return (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k));\n        }\n    }\n}"}
{"id": "487_java", "language": "Java", "requirement": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `db363c`\n   b. Major behaviors: public static int sort_tuple(int tup) {     lst = len(tup)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_tuple(int tup) {\n    lst = len(tup)\n    // [manual conversion needed for loop]: for i in range(0, lst):\n    // [manual conversion needed for loop]: for j in range(0, lst-i-1):\n    if ((tup[j][-1] > tup[j + 1][-1])) {\n        temp = tup[j]\n        tup[j]= tup[j + 1]\n        tup[j + 1]= temp\n        return tup;\n    }\n}"}
{"id": "488_java", "language": "Java", "requirement": "Write a function to find the area of a pentagon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `40d772`\n   b. Major behaviors: import math public static int area_pentagon(int a) {     are...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int area_pentagon(int a) {\n    area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n    return area;\n}"}
{"id": "489_java", "language": "Java", "requirement": "Write a python function to find the frequency of the largest value in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c4edc9`\n   b. Major behaviors: public static int frequency_Of_Largest(int n, int arr) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int frequency_Of_Largest(int n, int arr) {\n    mn = arr[0]\n    freq = 1\n    // [manual conversion needed for loop]: for i in range(1,n):\n    if ((arr[i] >mn)) {\n        mn = arr[i]\n        freq = 1\n        } else if ((arr[i] == mn)) {\n        freq += 1\n        return freq;\n    }\n}"}
{"id": "490_java", "language": "Java", "requirement": "Write a function to extract all the pairs which are symmetric in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3d87d6`\n   b. Major behaviors: public static int extract_symmetric(int test_list) {     tem...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_symmetric(int test_list) {\n    temp = set(test_list) & {(b, a) for a, b in test_list}\n    res = {(a, b) for a, b in temp if a < b}\n    return (res);\n}"}
{"id": "491_java", "language": "Java", "requirement": "Write a function to find the sum of geometric progression series.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eedd8b`\n   b. Major behaviors: import math public static int sum_gp(int a, int n, int r) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int sum_gp(int a, int n, int r) {\n    total = (a * (1 - math.pow(r, n ))) / (1- r)\n    return total;\n}"}
{"id": "492_java", "language": "Java", "requirement": "Write a function to search an element in the given array by using binary search.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc50a3`\n   b. Major behaviors: public static int binary_search(int item_list, int item) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int binary_search(int item_list, int item) {\n    first = 0\n    last = len(item_list)-1\n    found = False\n    while( first<=last and not found):\n    mid = (first + last)//2\n    if (item_list[mid] == item ) {\n        found = True\n        } else {\n        if (item < item_list[mid]) {\n            last = mid - 1\n            } else {\n            first = mid + 1\n            return found;\n        }\n    }\n}"}
{"id": "493_java", "language": "Java", "requirement": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2cbe85`\n   b. Major behaviors: import math public static int calculate_polygons(int startx,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int calculate_polygons(int startx, int starty, int endx, int endy, int radius) {\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl\n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    // [manual conversion needed for while loop]: while starty < endy:\n    if (row % 2 == 0) {\n        startx = origx + xoffset\n        } else {\n        startx = origx\n        // [manual conversion needed for while loop]: while startx < endx:\n        p1x = startx\n        p1y = starty + p\n        p2x = startx\n        p2y = starty + (3 * p)\n        p3x = startx + b\n        p3y = starty + h\n        p4x = startx + w\n        p4y = starty + (3 * p)\n        p5x = startx + w\n        p5y = starty + p\n        p6x = startx + b\n        p6y = starty\n        poly = [\n        (p1x, p1y),\n        (p2x, p2y),\n        (p3x, p3y),\n        (p4x, p4y),\n        (p5x, p5y),\n        (p6x, p6y),\n        (p1x, p1y)]\n        polygons.append(poly)\n        counter += 1\n        startx += w\n        starty += yoffset\n        row += 1\n        return polygons;\n    }\n}"}
{"id": "494_java", "language": "Java", "requirement": "Write a function to convert the given binary tuple to integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e801fd`\n   b. Major behaviors: public static int binary_to_integer(int test_tup) {     res...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int binary_to_integer(int test_tup) {\n    res = int(\"\".join(str(ele) for ele in test_tup), 2)\n    return (str(res));\n}"}
{"id": "495_java", "language": "Java", "requirement": "Write a function to remove lowercase substrings from a given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `edd8a5`\n   b. Major behaviors: import re public static int remove_lowercase(int str1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_lowercase(int str1) {\n    remove_lower = lambda text: re.sub('[a-z]', '', text)\n    result =  remove_lower(str1)\n    return (result);\n}"}
{"id": "496_java", "language": "Java", "requirement": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `50201f`\n   b. Major behaviors: import heapq as hq public static int heap_queue_smallest(int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\npublic static int heap_queue_smallest(int nums, int n) {\n    smallest_nums = hq.nsmallest(n, nums)\n    return smallest_nums;\n}"}
{"id": "497_java", "language": "Java", "requirement": "Write a function to find the surface area of a cone.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `417f5a`\n   b. Major behaviors: import math public static int surfacearea_cone(int r, int h)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int surfacearea_cone(int r, int h) {\n    l = math.sqrt(r * r + h * h)\n    SA = math.pi * r * (r + l)\n    return SA;\n}"}
{"id": "498_java", "language": "Java", "requirement": "Write a python function to find gcd of two positive integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3fd5c3`\n   b. Major behaviors: public static int gcd(int x, int y) {     gcd = 1     if (x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int gcd(int x, int y) {\n    gcd = 1\n    if (x % y == 0) {\n        return y;\n        // [manual conversion needed for loop]: for k in range(int(y / 2), 0, -1):\n        if (x % k == 0 and y % k == 0) {\n            gcd = k\n            break\n            return gcd;\n        }\n    }\n}"}
{"id": "499_java", "language": "Java", "requirement": "Write a function to find the diameter of a circle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `59c6f4`\n   b. Major behaviors: public static int diameter_circle(int r) {     diameter=2*r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int diameter_circle(int r) {\n    diameter=2*r\n    return diameter;\n}"}
{"id": "500_java", "language": "Java", "requirement": "Write a function to concatenate all elements of the given list into a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3770c9`\n   b. Major behaviors: public static int concatenate_elements(int list) {     ans =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int concatenate_elements(int list) {\n    ans = ' '\n    // [manual conversion needed for loop]: for i in list:\n    ans = ans+ ' '+i\n    return (ans);\n}"}
{"id": "501_java", "language": "Java", "requirement": "Write a python function to find common divisor between two numbers in a given pair.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fd30df`\n   b. Major behaviors: public static int ngcd(int x, int y) {     i=1     while(i<=...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int ngcd(int x, int y) {\n    i=1\n    while(i<=x and i<=y):\n    if(x%i==0 and y%i == 0):\n    gcd=i;\n    i+=1\n    return gcd;;\n    public static int num_comm_div(int x, int y) {\n        n = ngcd(x,y)\n        result = 0\n        z = int(n**0.5)\n        i = 1\n        while(i <= z):\n        if(n % i == 0):\n        result += 2\n        if(i == n/i):\n        result-=1\n        i+=1\n        return result;\n    }\n}"}
{"id": "502_java", "language": "Java", "requirement": "Write a python function to find remainder of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `76c19a`\n   b. Major behaviors: public static int find(int n, int m) {     r = n%m     retur...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find(int n, int m) {\n    r = n%m\n    return (r);\n}"}
{"id": "503_java", "language": "Java", "requirement": "Write a function to add consecutive numbers of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9ca070`\n   b. Major behaviors: public static int add_consecutive_nums(int nums) {     resul...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int add_consecutive_nums(int nums) {\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result;\n}"}
{"id": "504_java", "language": "Java", "requirement": "Write a python function to find the cube sum of first n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a63a60`\n   b. Major behaviors: public static int sum_Of_Series(int n) {     sum = 0     //...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_Of_Series(int n) {\n    sum = 0\n    // [manual conversion needed for loop]: for i in range(1,n + 1):\n    sum += i * i*i\n    return sum;\n}"}
{"id": "505_java", "language": "Java", "requirement": "Write a function to move all zeroes to the end of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `49c365`\n   b. Major behaviors: public static int re_order(int A) {     k = 0     // [manual...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int re_order(int A) {\n    k = 0\n    // [manual conversion needed for loop]: for i in A:\n    if (i) {\n        A[k] = i\n        k = k + 1\n        // [manual conversion needed for loop]: for i in range(k, len(A)):\n        A[i] = 0\n        return A;\n    }\n}"}
{"id": "506_java", "language": "Java", "requirement": "Write a function to calculate the permutation coefficient of given p(n, k).", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3facb2`\n   b. Major behaviors: public static int permutation_coefficient(int n, int k) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int permutation_coefficient(int n, int k) {\n    P = [[0 for i in range(k + 1)]\n    // [manual conversion needed for loop]: for j in range(n + 1)]\n    // [manual conversion needed for loop]: for i in range(n + 1):\n    // [manual conversion needed for loop]: for j in range(min(i, k) + 1):\n    if ((j == 0)) {\n        P[i][j] = 1\n        } else {\n        P[i][j] = P[i - 1][j] + (\n        j * P[i - 1][j - 1])\n        if ((j < k)) {\n            P[i][j + 1] = 0\n            return P[n][k];\n        }\n    }\n}"}
{"id": "507_java", "language": "Java", "requirement": "Write a function to remove specific words from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `13c8f3`\n   b. Major behaviors: public static int remove_words(int list1, int removewords) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_words(int list1, int removewords) {\n    // [manual conversion needed for loop]: for word in list(list1):\n    if (word in removewords) {\n        list1.remove(word)\n        return list1;\n    }\n}"}
{"id": "508_java", "language": "Java", "requirement": "Write a function to check if the common elements between two given lists are in the same order or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `77abf4`\n   b. Major behaviors: public static int same_order(int l1, int l2) {     common_el...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int same_order(int l1, int l2) {\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2;\n}"}
{"id": "509_java", "language": "Java", "requirement": "Write a python function to find the average of odd numbers till a given odd number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e1d4b9`\n   b. Major behaviors: public static int average_Odd(int n)) {     if ((n%2==0) ) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int average_Odd(int n)) {\n    if ((n%2==0) ) {\n        return (\"Invalid Input\");\n        return -1;\n        sm =0\n        count =0\n        // [manual conversion needed for while loop]: while (n>=1) :\n        count=count+1\n        sm = sm + n\n        n = n-2\n        return sm//count;\n    }\n}"}
{"id": "510_java", "language": "Java", "requirement": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e961b9`\n   b. Major behaviors: public static int no_of_subsequences(int arr, int k) {     n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int no_of_subsequences(int arr, int k) {\n    n = len(arr)\n    dp = [[0 for i in range(n + 1)]\n    // [manual conversion needed for loop]: for j in range(k + 1)]\n    // [manual conversion needed for loop]: for i in range(1, k + 1):\n    // [manual conversion needed for loop]: for j in range(1, n + 1):\n    dp[i][j] = dp[i][j - 1]\n    if (arr[j - 1] <= i and arr[j - 1] > 0) {\n        dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n        return dp[k][n];\n    }\n}"}
{"id": "511_java", "language": "Java", "requirement": "Write a python function to find minimum sum of factors of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `db4099`\n   b. Major behaviors: public static int find_Min_Sum(int num) {     sum = 0     i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Min_Sum(int num) {\n    sum = 0\n    i = 2\n    while(i * i <= num):\n    while(num % i == 0):\n    sum += i\n    num /= i\n    i += 1\n    sum += num\n    return sum;\n}"}
{"id": "512_java", "language": "Java", "requirement": "Write a function to count the element frequency in the mixed nested tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f883f2`\n   b. Major behaviors: public static int flatten(int test_tuple) {     // [manual c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int flatten(int test_tuple) {\n    // [manual conversion needed for loop]: for tup in test_tuple:\n    if (isinstance(tup, tuple)) {\n        yield from flatten(tup)\n        } else {\n        yield tup\n        public static int count_element_freq(int test_tuple) {\n            res = {}\n            // [manual conversion needed for loop]: for ele in flatten(test_tuple):\n            if (ele not in res) {\n                res[ele] = 0\n                res[ele] += 1\n                return (res);\n            }\n        }\n    }\n}"}
{"id": "513_java", "language": "Java", "requirement": "Write a function to convert tuple into list by adding the given string after every element.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ca319c`\n   b. Major behaviors: public static int add_str(int test_tup, int K) {     res = [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int add_str(int test_tup, int K) {\n    res = [ele for sub in test_tup for ele in (sub, K)]\n    return (res);\n}"}
{"id": "514_java", "language": "Java", "requirement": "Write a function to find the summation of tuple elements in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9a1ea5`\n   b. Major behaviors: public static int sum_elements(int test_tup) {     res = sum...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_elements(int test_tup) {\n    res = sum(list(test_tup))\n    return (res);\n}"}
{"id": "515_java", "language": "Java", "requirement": "Write a function to check if there is a subset with sum divisible by m.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a7c3d2`\n   b. Major behaviors: public static int modular_sum(int arr, int n, int m) {     i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int modular_sum(int arr, int n, int m) {\n    if ((n > m)) {\n        return True;\n        DP = [False for i in range(m)]\n        // [manual conversion needed for loop]: for i in range(n):\n        if ((DP[0])) {\n            return True;\n            temp = [False for i in range(m)]\n            // [manual conversion needed for loop]: for j in range(m):\n            if ((DP[j] == True)) {\n                if ((DP[(j + arr[i]) % m] == False)) {\n                    temp[(j + arr[i]) % m] = True\n                    // [manual conversion needed for loop]: for j in range(m):\n                    if ((temp[j])) {\n                        DP[j] = True\n                        DP[arr[i] % m] = True\n                        return DP[0];\n                    }\n                }\n            }\n        }\n    }\n}"}
{"id": "516_java", "language": "Java", "requirement": "Write a function to sort a list of elements using radix sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `79076e`\n   b. Major behaviors: public static int radix_sort(int nums) {     RADIX = 10...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int radix_sort(int nums) {\n    RADIX = 10\n    placement = 1\n    max_digit = max(nums)\n\n    // [manual conversion needed for while loop]: while placement < max_digit:\n    buckets = [list() for _ in range( RADIX )]\n    // [manual conversion needed for loop]: for i in nums:\n    tmp = int((i / placement) % RADIX)\n    buckets[tmp].append(i)\n    a = 0\n    // [manual conversion needed for loop]: for b in range( RADIX ):\n    buck = buckets[b]\n    // [manual conversion needed for loop]: for i in buck:\n    nums[a] = i\n    a += 1\n    placement *= RADIX\n    return nums;\n}"}
{"id": "517_java", "language": "Java", "requirement": "Write a python function to find the largest postive number from the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c5218a`\n   b. Major behaviors: public static int largest_pos(int list1) {     max = list1[0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int largest_pos(int list1) {\n    max = list1[0]\n    // [manual conversion needed for loop]: for x in list1:\n    if (x > max ) {\n        max = x\n        return max;\n    }\n}"}
{"id": "518_java", "language": "Java", "requirement": "Write a function to find the square root of a perfect number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8c352b`\n   b. Major behaviors: import math public static int sqrt_root(int num) {     sqrt_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int sqrt_root(int num) {\n    sqrt_root = math.pow(num, 0.5)\n    return sqrt_root;\n}"}
{"id": "519_java", "language": "Java", "requirement": "Write a function to calculate volume of a tetrahedron.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a9bb44`\n   b. Major behaviors: import math public static int volume_tetrahedron(int num) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int volume_tetrahedron(int num) {\n    volume = (num ** 3 / (6 * math.sqrt(2)))\n    return round(volume, 2);\n}"}
{"id": "520_java", "language": "Java", "requirement": "Write a function to find the lcm of the given array elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e681b3`\n   b. Major behaviors: public static int find_lcm(int num1, int num2) {     if(num1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_lcm(int num1, int num2) {\n    if(num1>num2):\n    num = num1\n    den = num2\n    } else {\n    num = num2\n    den = num1\n    rem = num % den\n    // [manual conversion needed for while loop]: while (rem != 0):\n    num = den\n    den = rem\n    rem = num % den\n    gcd = den\n    lcm = int(int(num1 * num2)/int(gcd))\n    return lcm;\n    public static int get_lcm(int l) {\n        num1 = l[0]\n        num2 = l[1]\n        lcm = find_lcm(num1, num2)\n        // [manual conversion needed for loop]: for i in range(2, len(l)):\n        lcm = find_lcm(lcm, l[i])\n        return lcm;\n    }\n}"}
{"id": "521_java", "language": "Java", "requirement": "Write a function to print check if the triangle is scalene or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5c638d`\n   b. Major behaviors: public static int check_isosceles(int x, int y, int z) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_isosceles(int x, int y, int z) {\n    if (x!=y & y!=z & z!=x) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "522_java", "language": "Java", "requirement": "Write a function to find the longest bitonic subsequence for the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5d77b9`\n   b. Major behaviors: public static int lbs(int arr) {     n = len(arr)     lis =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int lbs(int arr) {\n    n = len(arr)\n    lis = [1 for i in range(n+1)]\n    // [manual conversion needed for loop]: for i in range(1 , n):\n    // [manual conversion needed for loop]: for j in range(0 , i):\n    if (((arr[i] > arr[j]) and (lis[i] < lis[j] +1))) {\n        lis[i] = lis[j] + 1\n        lds = [1 for i in range(n+1)]\n        // [manual conversion needed for loop]: for i in reversed(range(n-1)):\n        // [manual conversion needed for loop]: for j in reversed(range(i-1 ,n)):\n        if(arr[i] > arr[j] and lds[i] < lds[j] + 1):\n        lds[i] = lds[j] + 1\n        maximum = lis[0] + lds[0] - 1\n        // [manual conversion needed for loop]: for i in range(1 , n):\n        maximum = max((lis[i] + lds[i]-1), maximum)\n        return maximum;\n    }\n}"}
{"id": "523_java", "language": "Java", "requirement": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `40b376`\n   b. Major behaviors: public static int check_string(int str1) {     messg = [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_string(int str1) {\n    messg = [\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\n    result = [x for x in [i(str1) for i in messg] if x != True]\n    if (not result) {\n        result.append('Valid string.')\n        return result;\n    }\n}"}
{"id": "524_java", "language": "Java", "requirement": "Write a function to find the sum of maximum increasing subsequence of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0fed53`\n   b. Major behaviors: public static int max_sum_increasing_subsequence(int arr, in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sum_increasing_subsequence(int arr, int n) {\n    max = 0\n    msis = [0 for x in range(n)]\n    // [manual conversion needed for loop]: for i in range(n):\n    msis[i] = arr[i]\n    // [manual conversion needed for loop]: for i in range(1, n):\n    // [manual conversion needed for loop]: for j in range(i):\n    if ((arr[i] > arr[j] and) {\n        msis[i] < msis[j] + arr[i]):\n        msis[i] = msis[j] + arr[i]\n        // [manual conversion needed for loop]: for i in range(n):\n        if (max < msis[i]) {\n            max = msis[i]\n            return max;\n        }\n    }\n}"}
{"id": "525_java", "language": "Java", "requirement": "Write a python function to check whether two given lines are parallel or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2ae4ac`\n   b. Major behaviors: public static int parallel_lines(int line1, int line2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int parallel_lines(int line1, int line2) {\n    return line1[0]/line1[1] == line2[0]/line2[1];\n}"}
{"id": "526_java", "language": "Java", "requirement": "Write a python function to capitalize first and last letters of each word of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f4ac56`\n   b. Major behaviors: public static int capitalize_first_last_letters(int str1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int capitalize_first_last_letters(int str1) {\n    str1 = result = str1.title()\n    result =  \"\"\n    // [manual conversion needed for loop]: for word in str1.split():\n    result += word[:-1] + word[-1].upper() + \" \"\n    return result[:-1];\n}"}
{"id": "527_java", "language": "Java", "requirement": "Write a function to find all pairs in an integer array whose sum is equal to a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `438880`\n   b. Major behaviors: public static int get_pairs_count(int arr, int n, int sum) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_pairs_count(int arr, int n, int sum) {\n    count = 0\n    // [manual conversion needed for loop]: for i in range(0, n):\n    // [manual conversion needed for loop]: for j in range(i + 1, n):\n    if (arr[i] + arr[j] == sum) {\n        count += 1\n        return count;\n    }\n}"}
{"id": "528_java", "language": "Java", "requirement": "Write a function to find the list of lists with minimum length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eec5ea`\n   b. Major behaviors: public static int min_length(int list1) {     min_length = m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_length(int list1) {\n    min_length = min(len(x) for x in  list1 )\n    min_list = min((x) for x in   list1)\n    return(min_length, min_list)\n}"}
{"id": "529_java", "language": "Java", "requirement": "Write a function to find the nth jacobsthal-lucas number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fce73c`\n   b. Major behaviors: public static int jacobsthal_lucas(int n) {     dp=[0] * (n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int jacobsthal_lucas(int n) {\n    dp=[0] * (n + 1)\n    dp[0] = 2\n    dp[1] = 1\n    // [manual conversion needed for loop]: for i in range(2, n+1):\n    dp[i] = dp[i - 1] + 2 * dp[i - 2];\n    return dp[n];\n}"}
{"id": "530_java", "language": "Java", "requirement": "Write a function to find the ration of negative numbers in an array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9ba8e4`\n   b. Major behaviors: from array import array public static int negative_count(int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from array import array\npublic static int negative_count(int nums) {\n    n = len(nums)\n    n1 = 0\n    // [manual conversion needed for loop]: for x in nums:\n    if (x < 0) {\n        n1 += 1\n        } else {\n        None\n        return round(n1/n,2);\n    }\n}"}
{"id": "531_java", "language": "Java", "requirement": "Write a function to find minimum number of coins that make a given value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4015f7`\n   b. Major behaviors: import sys public static int min_coins(int coins, int m, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys\npublic static int min_coins(int coins, int m, int V) {\n    if ((V == 0)) {\n        return 0;\n        res = sys.maxsize\n        // [manual conversion needed for loop]: for i in range(0, m):\n        if ((coins[i] <= V)) {\n            sub_res = min_coins(coins, m, V-coins[i])\n            if ((sub_res != sys.maxsize and sub_res + 1 < res)) {\n                res = sub_res + 1\n                return res;\n            }\n        }\n    }\n}"}
{"id": "532_java", "language": "Java", "requirement": "Write a function to check if the two given strings are permutations of each other.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1c2718`\n   b. Major behaviors: public static int check_permutation(int str1, int str2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_permutation(int str1, int str2) {\n    n1=len(str1)\n    n2=len(str2)\n    if(n1!=n2):\n    return False;\n    a=sorted(str1)\n    str1=\" \".join(a)\n    b=sorted(str2)\n    str2=\" \".join(b)\n    // [manual conversion needed for loop]: for i in range(0, n1, 1):\n    if(str1[i] != str2[i]):\n    return False;\n    return True;\n}"}
{"id": "533_java", "language": "Java", "requirement": "Write a function to remove particular data type elements from the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `27abb6`\n   b. Major behaviors: public static int remove_datatype(int test_tuple, int data_t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_datatype(int test_tuple, int data_type) {\n    res = []\n    // [manual conversion needed for loop]: for ele in test_tuple:\n    if (not isinstance(ele, data_type)) {\n        res.append(ele)\n        return (res);\n    }\n}"}
{"id": "534_java", "language": "Java", "requirement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d9df07`\n   b. Major behaviors: import re public static int search_literal(int pattern, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int search_literal(int pattern, int text) {\n    match = re.search(pattern, text)\n    s = match.start()\n    e = match.end()\n    return (s, e);\n}"}
{"id": "535_java", "language": "Java", "requirement": "Write a function to find the top or bottom surface area of a cylinder.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c53e33`\n   b. Major behaviors: public static int topbottom_surfacearea(int r) {     toporbo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int topbottom_surfacearea(int r) {\n    toporbottomarea=3.1415*r*r\n    return toporbottomarea;\n}"}
{"id": "536_java", "language": "Java", "requirement": "Write a function to select the nth items of a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `504ebd`\n   b. Major behaviors: public static int nth_items(int list, int n) {     return li...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int nth_items(int list, int n) {\n    return list[::n];\n}"}
{"id": "537_java", "language": "Java", "requirement": "Write a python function to find the first repeated word in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `74eac6`\n   b. Major behaviors: public static int first_repeated_word(int str1) {     temp =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first_repeated_word(int str1) {\n    temp = set()\n    // [manual conversion needed for loop]: for word in str1.split():\n    if (word in temp) {\n        return word;;\n        } else {\n        temp.add(word)\n        return 'None';\n    }\n}"}
{"id": "538_java", "language": "Java", "requirement": "Write a python function to convert a given string list to a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `adb7f8`\n   b. Major behaviors: public static int string_list_to_tuple(int str1) {     resul...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int string_list_to_tuple(int str1) {\n    result = tuple(x for x in str1 if not x.isspace())\n    return result;\n}"}
{"id": "539_java", "language": "Java", "requirement": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ae3dc4`\n   b. Major behaviors: public static int basesnum_coresspondingnum(int bases_num, i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int basesnum_coresspondingnum(int bases_num, int index) {\n    result = list(map(pow, bases_num, index))\n    return result;\n}"}
{"id": "540_java", "language": "Java", "requirement": "Write a python function to find the difference between highest and least frequencies in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `db9d11`\n   b. Major behaviors: public static int find_Diff(int arr, int n) {     arr.sort()...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Diff(int arr, int n) {\n    arr.sort()\n    count = 0; max_count = 0; min_count = n\n    // [manual conversion needed for loop]: for i in range(0,(n-1)):\n    if (arr[i] == arr[i + 1]) {\n        count += 1\n        continue\n        } else {\n        max_count = max(max_count,count)\n        min_count = min(min_count,count)\n        count = 0\n        return max_count - min_count;\n    }\n}"}
{"id": "541_java", "language": "Java", "requirement": "Write a function to find if the given number is abundant or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6f6bc3`\n   b. Major behaviors: import math public static int get_sum(int n) {     sum = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int get_sum(int n) {\n    sum = 0\n    i = 1\n    // [manual conversion needed for while loop]: while i <= (math.sqrt(n)):\n    if (n%i == 0) {\n        if (n/i == i ) {\n            sum = sum + i\n            } else {\n            sum = sum + i\n            sum = sum + (n / i )\n            i = i + 1\n            sum = sum - n\n            return sum;\n            public static int check_abundant(int n) {\n                if ((get_sum(n) > n)) {\n                    return True;\n                    } else {\n                    return False;\n                }\n            }\n        }\n    }\n}"}
{"id": "542_java", "language": "Java", "requirement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5c1c25`\n   b. Major behaviors: import re public static int fill_spaces(int text) {     retu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int fill_spaces(int text) {\n    return (re.sub(\"[ ,.]\", \":\", text));\n}"}
{"id": "543_java", "language": "Java", "requirement": "Write a function to add two numbers and print number of digits of sum.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `baabdc`\n   b. Major behaviors: public static int count_digits(int num1, int num2) {     num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_digits(int num1, int num2) {\n    number=num1+num2\n    count = 0\n    while(number > 0):\n    number = number // 10\n    count = count + 1\n    return count;\n}"}
{"id": "544_java", "language": "Java", "requirement": "Write a function to flatten the tuple list to a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e5f829`\n   b. Major behaviors: public static int flatten_tuple(int test_list) {     res = '...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int flatten_tuple(int test_list) {\n    res = ' '.join([idx for tup in test_list for idx in tup])\n    return (res);\n}"}
{"id": "545_java", "language": "Java", "requirement": "Write a python function to toggle only first and last bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e998d0`\n   b. Major behaviors: public static int take_L_and_F_set_bits(int n)) {     n = n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int take_L_and_F_set_bits(int n)) {\n    n = n | n >> 1\n    n = n | n >> 2\n    n = n | n >> 4\n    n = n | n >> 8\n    n = n | n >> 16\n    return ((n + 1) >> 1) + 1;\n    public static int toggle_F_and_L_bits(int n)) {\n        if ((n == 1) ) {\n            return 0;\n            return n ^ take_L_and_F_set_bits(n);\n        }\n    }\n}"}
{"id": "546_java", "language": "Java", "requirement": "Write a function to find the last occurrence of a character in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `39d6ea`\n   b. Major behaviors: public static int last_occurence_char(int string, int char)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int last_occurence_char(int string, int char) {\n    flag = -1\n    // [manual conversion needed for loop]: for i in range(len(string)):\n    if(string[i] == char):\n    flag = i\n    if(flag == -1):\n    return None;\n    } else {\n    return flag + 1;\n}"}
{"id": "547_java", "language": "Java", "requirement": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d82c47`\n   b. Major behaviors: public static int Total_Hamming_Distance(int n) {     i = 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Total_Hamming_Distance(int n) {\n    i = 1\n    sum = 0\n    // [manual conversion needed for while loop]: while (n // i > 0):\n    sum = sum + n // i\n    i = i * 2\n    return sum;\n}"}
{"id": "548_java", "language": "Java", "requirement": "Write a function to find the length of the longest increasing subsequence of the given sequence.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `477df7`\n   b. Major behaviors: public static int longest_increasing_subsequence(int arr) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int longest_increasing_subsequence(int arr) {\n    n = len(arr)\n    longest_increasing_subsequence = [1]*n\n    // [manual conversion needed for loop]: for i in range (1 , n):\n    // [manual conversion needed for loop]: for j in range(0 , i):\n    if (arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 ) {\n        longest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\n        maximum = 0\n        // [manual conversion needed for loop]: for i in range(n):\n        maximum = max(maximum , longest_increasing_subsequence[i])\n        return maximum;\n    }\n}"}
{"id": "549_java", "language": "Java", "requirement": "Write a python function to find the sum of fifth power of first n odd natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0c2ce9`\n   b. Major behaviors: public static int odd_Num_Sum(int n)) {     j = 0     sm = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int odd_Num_Sum(int n)) {\n    j = 0\n    sm = 0\n    // [manual conversion needed for loop]: for i in range(1,n+1) :\n    j = (2*i-1)\n    sm = sm + (j*j*j*j*j)\n    return sm;\n}"}
{"id": "550_java", "language": "Java", "requirement": "Write a python function to find the maximum element in a sorted and rotated array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `57cf07`\n   b. Major behaviors: public static int find_Max(int arr, int low, int high) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Max(int arr, int low, int high) {\n    if ((high < low)) {\n        return arr[0];\n        if ((high == low)) {\n            return arr[low];\n            mid = low + (high - low) // 2\n            if ((mid < high and arr[mid + 1] < arr[mid])) {\n                return arr[mid];\n                if ((mid > low and arr[mid] < arr[mid - 1])) {\n                    return arr[mid - 1];\n                    if ((arr[low] > arr[mid])) {\n                        return find_Max(arr,low,mid - 1);\n                        } else {\n                        return find_Max(arr,mid + 1,high);\n                    }\n                }\n            }\n        }\n    }\n}"}
{"id": "551_java", "language": "Java", "requirement": "Write a function to extract a specified column from a given nested list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `18d0a5`\n   b. Major behaviors: public static int extract_column(int list1, int n) {     res...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_column(int list1, int n) {\n    result = [i.pop(n) for i in list1]\n    return result;\n}"}
{"id": "552_java", "language": "Java", "requirement": "Write a python function to check whether a given sequence is linear or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1bad62`\n   b. Major behaviors: public static int Seq_Linear(int seq_nums) {     seq_nums =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Seq_Linear(int seq_nums) {\n    seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\n    if (len(set(seq_nums)) == 1) {\n        return \"Linear Sequence\";\n        } else {\n        return \"Non Linear Sequence\";\n    }\n}"}
{"id": "553_java", "language": "Java", "requirement": "Write a function to convert the given tuple to a floating-point number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e8cc69`\n   b. Major behaviors: public static int tuple_to_float(int test_tup) {     res = f...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tuple_to_float(int test_tup) {\n    res = float('.'.join(str(ele) for ele in test_tup))\n    return (res);\n}"}
{"id": "554_java", "language": "Java", "requirement": "Write a python function to find odd numbers from a mixed list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5beb8c`\n   b. Major behaviors: public static int Split(int list) {     od_li = []     // [m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Split(int list) {\n    od_li = []\n    // [manual conversion needed for loop]: for i in list:\n    if ((i % 2 != 0)) {\n        od_li.append(i)\n        return od_li;\n    }\n}"}
{"id": "555_java", "language": "Java", "requirement": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c0f98b`\n   b. Major behaviors: public static int difference(int n)) {     S = (n*(n + 1))//...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int difference(int n)) {\n    S = (n*(n + 1))//2;\n    res = S*(S-1);\n    return res;;\n}"}
{"id": "556_java", "language": "Java", "requirement": "Write a python function to count the pairs with xor as an odd number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `180962`\n   b. Major behaviors: public static int find_Odd_Pair(int A, int N)) {     oddPair...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Odd_Pair(int A, int N)) {\n    oddPair = 0\n    // [manual conversion needed for loop]: for i in range(0,N) :\n    // [manual conversion needed for loop]: for j in range(i+1,N) :\n    if (((A[i] ^ A[j]) % 2 != 0)) {\n        oddPair+=1\n        return oddPair;\n    }\n}"}
{"id": "557_java", "language": "Java", "requirement": "Write a function to toggle characters case in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b8cf48`\n   b. Major behaviors: public static int toggle_string(int string) {     string1 =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int toggle_string(int string) {\n    string1 = string.swapcase()\n    return string1;\n}"}
{"id": "558_java", "language": "Java", "requirement": "Write a python function to find the digit distance between two integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b1e829`\n   b. Major behaviors: public static int digit_distance_nums(int n1, int n2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int digit_distance_nums(int n1, int n2) {\n    return sum(map(int,str(abs(n1-n2))));\n}"}
{"id": "559_java", "language": "Java", "requirement": "Write a function to find the largest sum of contiguous subarray in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `002c0e`\n   b. Major behaviors: public static int max_sub_array_sum(int a, int size) {     m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sub_array_sum(int a, int size) {\n    max_so_far = 0\n    max_ending_here = 0\n    // [manual conversion needed for loop]: for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if (max_ending_here < 0) {\n        max_ending_here = 0\n        } else if ((max_so_far < max_ending_here)) {\n        max_so_far = max_ending_here\n        return max_so_far;\n    }\n}"}
{"id": "560_java", "language": "Java", "requirement": "Write a function to find the union of elements of the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e28492`\n   b. Major behaviors: public static int union_elements(int test_tup1, int test_tup...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int union_elements(int test_tup1, int test_tup2) {\n    res = tuple(set(test_tup1 + test_tup2))\n    return (res);\n}"}
{"id": "561_java", "language": "Java", "requirement": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5996b1`\n   b. Major behaviors: public static int assign_elements(int test_list) {     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int assign_elements(int test_list) {\n    res = dict()\n    // [manual conversion needed for loop]: for key, val in test_list:\n    res.setdefault(val, [])\n    res.setdefault(key, []).append(val)\n    return (res);\n}"}
{"id": "562_java", "language": "Java", "requirement": "Write a python function to find the maximum length of sublist.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bd8bc1`\n   b. Major behaviors: public static int Find_Max_Length(int lst) {     maxLength =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Find_Max_Length(int lst) {\n    maxLength = max(len(x) for x in lst )\n    return maxLength;\n}"}
{"id": "563_java", "language": "Java", "requirement": "Write a function to extract values between quotation marks of a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2c9205`\n   b. Major behaviors: import re public static int extract_values(int text) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int extract_values(int text) {\n    return (re.findall(r'\"(.*?)\"', text));\n}"}
{"id": "564_java", "language": "Java", "requirement": "Write a python function to count unequal element pairs from the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7779c9`\n   b. Major behaviors: public static int count_Pairs(int arr, int n) {     cnt = 0;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Pairs(int arr, int n) {\n    cnt = 0;\n    // [manual conversion needed for loop]: for i in range(n):\n    // [manual conversion needed for loop]: for j in range(i + 1,n):\n    if ((arr[i] != arr[j])) {\n        cnt += 1;\n        return cnt;;\n    }\n}"}
{"id": "565_java", "language": "Java", "requirement": "Write a python function to split a string into characters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9d055a`\n   b. Major behaviors: public static int split(int word) {     return [char for cha...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int split(int word) {\n    return [char for char in word];\n}"}
{"id": "566_java", "language": "Java", "requirement": "Write a function to get the sum of a non-negative integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `825942`\n   b. Major behaviors: public static int sum_digits(int n) {     if (n == 0) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_digits(int n) {\n    if (n == 0) {\n        return 0;\n        } else {\n        return n % 10 + sum_digits(int(n / 10));\n    }\n}"}
{"id": "567_java", "language": "Java", "requirement": "Write a function to check whether a specified list is sorted or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `29a39a`\n   b. Major behaviors: public static int issort_list(int list1) {     result = all(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int issort_list(int list1) {\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result;\n}"}
{"id": "568_java", "language": "Java", "requirement": "Write a function to create a list of empty dictionaries.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d6f1ec`\n   b. Major behaviors: public static int empty_list(int length) {     empty_list =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int empty_list(int length) {\n    empty_list = [{} for _ in range(length)]\n    return empty_list;\n}"}
{"id": "569_java", "language": "Java", "requirement": "Write a function to sort each sublist of strings in a given list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `967301`\n   b. Major behaviors: public static int sort_sublists(int list1) {     result = li...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_sublists(int list1) {\n    result = list(map(sorted,list1))\n    return result;\n}"}
{"id": "570_java", "language": "Java", "requirement": "Write a function to remove words from a given list of strings containing a character or string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `66b92a`\n   b. Major behaviors: public static int remove_words(int list1, int charlist) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_words(int list1, int charlist) {\n    new_list = []\n    // [manual conversion needed for loop]: for line in list1:\n    new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\n    new_list.append(new_words)\n    return new_list;\n}"}
{"id": "571_java", "language": "Java", "requirement": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d9a0f7`\n   b. Major behaviors: public static int max_sum_pair_diff_lessthan_K(int arr, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sum_pair_diff_lessthan_K(int arr, int N, int K) {\n    arr.sort()\n    dp = [0] * N\n    dp[0] = 0\n    // [manual conversion needed for loop]: for i in range(1, N):\n    dp[i] = dp[i-1]\n    if ((arr[i] - arr[i-1] < K)) {\n        if ((i >= 2)) {\n            dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]);\n            } else {\n            dp[i] = max(dp[i], arr[i] + arr[i-1]);\n            return dp[N - 1];\n        }\n    }\n}"}
{"id": "572_java", "language": "Java", "requirement": "Write a python function to remove two duplicate numbers from a given number of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2e63cb`\n   b. Major behaviors: public static int two_unique_nums(int nums) {     return [i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int two_unique_nums(int nums) {\n    return [i for i in nums if nums.count(i)==1];\n}"}
{"id": "573_java", "language": "Java", "requirement": "Write a python function to calculate the product of the unique numbers of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `022110`\n   b. Major behaviors: public static int unique_product(int list_data) {     temp =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int unique_product(int list_data) {\n    temp = list(set(list_data))\n    p = 1\n    // [manual conversion needed for loop]: for i in temp:\n    p *= i\n    return p;\n}"}
{"id": "574_java", "language": "Java", "requirement": "Write a function to find the surface area of a cylinder.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f9cd68`\n   b. Major behaviors: public static int surfacearea_cylinder(int r, int h) {     s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int surfacearea_cylinder(int r, int h) {\n    surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n    return surfacearea;\n}"}
{"id": "575_java", "language": "Java", "requirement": "Write a python function to find nth number in a sequence which is not a multiple of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6a2e3f`\n   b. Major behaviors: public static int count_no(int A, int N, int L, int R) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_no(int A, int N, int L, int R) {\n    count = 0\n    // [manual conversion needed for loop]: for i in range (L,R + 1):\n    if ((i % A != 0)) {\n        count += 1\n        if ((count == N)) {\n            break\n            return (i);\n        }\n    }\n}"}
{"id": "576_java", "language": "Java", "requirement": "Write a python function to check whether an array is subarray of another or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `554ef4`\n   b. Major behaviors: public static int is_Sub_Array(int A, int B, int n, int m) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Sub_Array(int A, int B, int n, int m) {\n    i = 0; j = 0;\n    // [manual conversion needed for while loop]: while (i < n and j < m):\n    if ((A[i] == B[j])) {\n        i += 1;\n        j += 1;\n        if ((j == m)) {\n            return True;;\n            } else {\n            i = i - j + 1;\n            j = 0;\n            return False;;\n        }\n    }\n}"}
{"id": "577_java", "language": "Java", "requirement": "Write a python function to find the last digit in factorial of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `28ee37`\n   b. Major behaviors: public static int last_Digit_Factorial(int n) {     if ((n =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int last_Digit_Factorial(int n) {\n    if ((n == 0): return 1) {\n        } else if ((n <= 2): return n) {\n        } else if ((n == 3): return 6) {\n        } else if ((n == 4): return 4) {\n        } else {\n        return 0;\n    }\n}"}
{"id": "578_java", "language": "Java", "requirement": "Write a function to interleave lists of the same length.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1b3c58`\n   b. Major behaviors: public static int interleave_lists(int list1, int list2, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int interleave_lists(int list1, int list2, int list3) {\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result;\n}"}
{"id": "579_java", "language": "Java", "requirement": "Write a function to find the dissimilar elements in the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `520f7d`\n   b. Major behaviors: public static int find_dissimilar(int test_tup1, int test_tu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_dissimilar(int test_tup1, int test_tup2) {\n    res = tuple(set(test_tup1) ^ set(test_tup2))\n    return (res);\n}"}
{"id": "580_java", "language": "Java", "requirement": "Write a function to extract the even elements in the nested mixed tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8e7262`\n   b. Major behaviors: public static int even_ele(int test_tuple, int even_fnc) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int even_ele(int test_tuple, int even_fnc) {\n    res = tuple()\n    // [manual conversion needed for loop]: for ele in test_tuple:\n    if (isinstance(ele, tuple)) {\n        res += (even_ele(ele, even_fnc), )\n        } else if (even_fnc(ele)) {\n        res += (ele, )\n        return res;\n        public static int extract_even(int test_tuple) {\n            res = even_ele(test_tuple, lambda x: x % 2 == 0)\n            return (res);\n        }\n    }\n}"}
{"id": "581_java", "language": "Java", "requirement": "Write a python function to find the surface area of the square pyramid.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `479250`\n   b. Major behaviors: public static int surface_Area(int b, int s) {     return 2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int surface_Area(int b, int s) {\n    return 2 * b * s + pow(b,2);\n}"}
{"id": "582_java", "language": "Java", "requirement": "Write a function to check if a dictionary is empty or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `623f88`\n   b. Major behaviors: public static int my_dict(int dict1) {     if (bool(dict1))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int my_dict(int dict1) {\n    if (bool(dict1)) {\n        return False;\n        } else {\n        return True;\n    }\n}"}
{"id": "583_java", "language": "Java", "requirement": "Write a function for nth catalan number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3826dc`\n   b. Major behaviors: public static int catalan_number(int num) {     if (num <=1)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int catalan_number(int num) {\n    if (num <=1) {\n        return 1;\n        res_num = 0\n        // [manual conversion needed for loop]: for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n        return res_num;\n    }\n}"}
{"id": "584_java", "language": "Java", "requirement": "Write a function to find all adverbs and their positions in a given sentence by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7b6bdf`\n   b. Major behaviors: import re public static int find_adverbs(int text) {     //...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int find_adverbs(int text) {\n    // [manual conversion needed for loop]: for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)));\n}"}
{"id": "585_java", "language": "Java", "requirement": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9b86b4`\n   b. Major behaviors: import heapq public static int expensive_items(int items, in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\npublic static int expensive_items(int items, int n) {\n    expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n    return expensive_items;\n}"}
{"id": "586_java", "language": "Java", "requirement": "Write a python function to split the array and add the first part to the end.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `144a3e`\n   b. Major behaviors: public static int split_Arr(int a, int n, int k) {     b = a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int split_Arr(int a, int n, int k) {\n    b = a[:k]\n    return (a[k::]+b[::]);\n}"}
{"id": "587_java", "language": "Java", "requirement": "Write a function to convert a list to a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dd96a5`\n   b. Major behaviors: public static int list_tuple(int listx) {     tuplex = tuple...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int list_tuple(int listx) {\n    tuplex = tuple(listx)\n    return tuplex;\n}"}
{"id": "588_java", "language": "Java", "requirement": "Write a python function to find the difference between largest and smallest value in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b41b05`\n   b. Major behaviors: public static int big_diff(int nums) {     diff= max(nums)-m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int big_diff(int nums) {\n    diff= max(nums)-min(nums)\n    return diff;\n}"}
{"id": "589_java", "language": "Java", "requirement": "Write a function to find perfect squares between two given numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fee40a`\n   b. Major behaviors: public static int perfect_squares(int a, int b) {     lists=...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int perfect_squares(int a, int b) {\n    lists=[]\n    // [manual conversion needed for loop]: for i in range (a,b+1):\n    j = 1;\n    // [manual conversion needed for while loop]: while j*j <= i:\n    if (j*j == i) {\n        lists.append(i)\n        j = j+1\n        i = i+1\n        return lists;\n    }\n}"}
{"id": "590_java", "language": "Java", "requirement": "Write a function to convert polar coordinates to rectangular coordinates.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `aa2c81`\n   b. Major behaviors: import cmath public static int polar_rect(int x, int y) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import cmath\npublic static int polar_rect(int x, int y) {\n    cn = complex(x,y)\n    cn=cmath.polar(cn)\n    cn1 = cmath.rect(2, cmath.pi)\n    return (cn,cn1);\n}"}
{"id": "591_java", "language": "Java", "requirement": "Write a python function to interchange the first and last elements in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `96c67c`\n   b. Major behaviors: public static int swap_List(int newList) {     size = len(ne...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int swap_List(int newList) {\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList;\n}"}
{"id": "592_java", "language": "Java", "requirement": "Write a python function to find sum of product of binomial co-efficients.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c6ec45`\n   b. Major behaviors: public static int binomial_Coeff(int n, int k) {     C = [0]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int binomial_Coeff(int n, int k) {\n    C = [0] * (k + 1);\n    C[0] = 1; # nC0 is 1\n    // [manual conversion needed for loop]: for i in range(1,n + 1):\n    // [manual conversion needed for loop]: for j in range(min(i, k),0,-1):\n    C[j] = C[j] + C[j - 1];\n    return C[k];;\n    public static int sum_Of_product(int n) {\n        return binomial_Coeff(2 * n,n - 1);;\n    }\n}"}
{"id": "593_java", "language": "Java", "requirement": "Write a function to remove leading zeroes from an ip address.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8ab632`\n   b. Major behaviors: import re public static int removezero_ip(int ip) {     stri...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int removezero_ip(int ip) {\n    string = re.sub('\\.[0]*', '.', ip)\n    return string;\n}"}
{"id": "594_java", "language": "Java", "requirement": "Write a function to find the difference of first even and odd number of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0e71d0`\n   b. Major behaviors: public static int diff_even_odd(int list1) {     first_even...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int diff_even_odd(int list1) {\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd);\n}"}
{"id": "595_java", "language": "Java", "requirement": "Write a python function to count minimum number of swaps required to convert one binary string to another.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5048e2`\n   b. Major behaviors: public static int min_Swaps(int str1, int str2)) {     count...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_Swaps(int str1, int str2)) {\n    count = 0\n    // [manual conversion needed for loop]: for i in range(len(str1)) :\n    if (str1[i] != str2[i] ) {\n        count += 1\n        if (count % 2 == 0 ) {\n            return (count // 2);\n            } else {\n            return (\"Not Possible\");\n        }\n    }\n}"}
{"id": "596_java", "language": "Java", "requirement": "Write a function to find the size of the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4b6bdf`\n   b. Major behaviors: import sys public static int tuple_size(int tuple_list) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys\npublic static int tuple_size(int tuple_list) {\n    return (sys.getsizeof(tuple_list));\n}"}
{"id": "597_java", "language": "Java", "requirement": "Write a function to find kth element from the given two sorted arrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8988ab`\n   b. Major behaviors: public static int find_kth(int arr1, int arr2, int m, int n,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_kth(int arr1, int arr2, int m, int n, int k) {\n    sorted1 = [0] * (m + n)\n    i = 0\n    j = 0\n    d = 0\n    // [manual conversion needed for while loop]: while (i < m and j < n):\n    if ((arr1[i] < arr2[j])) {\n        sorted1[d] = arr1[i]\n        i += 1\n        } else {\n        sorted1[d] = arr2[j]\n        j += 1\n        d += 1\n        // [manual conversion needed for while loop]: while (i < m):\n        sorted1[d] = arr1[i]\n        d += 1\n        i += 1\n        // [manual conversion needed for while loop]: while (j < n):\n        sorted1[d] = arr2[j]\n        d += 1\n        j += 1\n        return sorted1[k - 1];\n    }\n}"}
{"id": "598_java", "language": "Java", "requirement": "Write a function to check whether the given number is armstrong or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a84f00`\n   b. Major behaviors: public static int armstrong_number(int number) {     sum = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int armstrong_number(int number) {\n    sum = 0\n    times = 0\n    temp = number\n    // [manual conversion needed for while loop]: while temp > 0:\n    times = times + 1\n    temp = temp // 10\n    temp = number\n    // [manual conversion needed for while loop]: while temp > 0:\n    reminder = temp % 10\n    sum = sum + (reminder ** times)\n    temp //= 10\n    if (number == sum) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "599_java", "language": "Java", "requirement": "Write a function to find sum and average of first n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1cfc09`\n   b. Major behaviors: public static int sum_average(int number) {     total = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_average(int number) {\n    total = 0\n    // [manual conversion needed for loop]: for value in range(1, number + 1):\n    total = total + value\n    average = total / number\n    return (total,average);\n}"}
{"id": "600_java", "language": "Java", "requirement": "Write a python function to check whether the given number is even or not using bitwise operator.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a5c78a`\n   b. Major behaviors: public static int is_Even(int n)) {     if ((n^1 == n+1) ) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Even(int n)) {\n    if ((n^1 == n+1) ) {\n        return True;;\n        } else {\n        return False;;\n    }\n}"}
{"id": "601_java", "language": "Java", "requirement": "Write a function to find the longest chain which can be formed from the given set of pairs.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6dd41e`\n   b. Major behaviors: class Pair(object): public static int __init__(int self, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "class Pair(object):\npublic static int __init__(int self, int a, int b) {\n    self.a = a\n    self.b = b\n    public static int max_chain_length(int arr, int n) {\n        max = 0\n        mcl = [1 for i in range(n)]\n        // [manual conversion needed for loop]: for i in range(1, n):\n        // [manual conversion needed for loop]: for j in range(0, i):\n        if ((arr[i].a > arr[j].b and) {\n            mcl[i] < mcl[j] + 1):\n            mcl[i] = mcl[j] + 1\n            // [manual conversion needed for loop]: for i in range(n):\n            if ((max < mcl[i])) {\n                max = mcl[i]\n                return max;\n            }\n        }\n    }\n}"}
{"id": "602_java", "language": "Java", "requirement": "Write a python function to find the first repeated character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f3cddd`\n   b. Major behaviors: public static int first_repeated_char(int str1) {     // [ma...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first_repeated_char(int str1) {\n    // [manual conversion needed for loop]: for index,c in enumerate(str1):\n    if (str1[:index+1].count(c) > 1) {\n        return c;\n        return \"None\";\n    }\n}"}
{"id": "603_java", "language": "Java", "requirement": "Write a function to get a lucid number smaller than or equal to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `06b02c`\n   b. Major behaviors: public static int get_ludic(int n) {     ludics = []     //...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_ludic(int n) {\n    ludics = []\n    // [manual conversion needed for loop]: for i in range(1, n + 1):\n    ludics.append(i)\n    index = 1\n    while(index != len(ludics)):\n    first_ludic = ludics[index]\n    remove_index = index + first_ludic\n    while(remove_index < len(ludics)):\n    ludics.remove(ludics[remove_index])\n    remove_index = remove_index + first_ludic - 1\n    index += 1\n    return ludics;\n}"}
{"id": "604_java", "language": "Java", "requirement": "Write a function to reverse words in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `883dc5`\n   b. Major behaviors: public static int reverse_words(int s) {     return ' '.join...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int reverse_words(int s) {\n    return ' '.join(reversed(s.split()));\n}"}
{"id": "605_java", "language": "Java", "requirement": "Write a function to check if the given integer is a prime number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `87e530`\n   b. Major behaviors: public static int prime_num(int num) {     if (num >=1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int prime_num(int num) {\n    if (num >=1) {\n        // [manual conversion needed for loop]: for i in range(2, num//2):\n        if ((num % i) == 0) {\n            return False;\n            } else {\n            return True;\n            } else {\n            return False;\n        }\n    }\n}"}
{"id": "606_java", "language": "Java", "requirement": "Write a function to convert degrees to radians.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `744ebb`\n   b. Major behaviors: import math public static int radian_degree(int degree) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int radian_degree(int degree) {\n    radian = degree*(math.pi/180)\n    return radian;\n}"}
{"id": "607_java", "language": "Java", "requirement": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3b9d61`\n   b. Major behaviors: import re pattern = 'fox' text = 'The quick brown fox jumps...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npattern = 'fox'\ntext = 'The quick brown fox jumps over the lazy dog.'\npublic static int find_literals(int text, int pattern) {\n    match = re.search(pattern, text)\n    s = match.start()\n    e = match.end()\n    return (match.re.pattern, s, e);\n}"}
{"id": "608_java", "language": "Java", "requirement": "Write a python function to find nth bell number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `704d77`\n   b. Major behaviors: public static int bell_Number(int n) {     bell = [[0 for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int bell_Number(int n) {\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    // [manual conversion needed for loop]: for i in range(1, n+1):\n    bell[i][0] = bell[i-1][i-1]\n    // [manual conversion needed for loop]: for j in range(1, i+1):\n    bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0];\n}"}
{"id": "609_java", "language": "Java", "requirement": "Write a python function to find minimum possible value for the given periodic function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `52987a`\n   b. Major behaviors: public static int floor_Min(int A, int B, int N) {     x = m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int floor_Min(int A, int B, int N) {\n    x = max(B - 1,N)\n    return (A*x) // B;\n}"}
{"id": "610_java", "language": "Java", "requirement": "Write a python function to remove the k'th element from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b9d1b5`\n   b. Major behaviors: public static int remove_kth_element(int list1, int L) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_kth_element(int list1, int L) {\n    return  list1[:L-1] + list1[L:];\n}"}
{"id": "611_java", "language": "Java", "requirement": "Write a function to find the maximum of nth column from the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2968dc`\n   b. Major behaviors: public static int max_of_nth(int test_list, int N) {     res...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_of_nth(int test_list, int N) {\n    res = max([sub[N] for sub in test_list])\n    return (res);\n}"}
{"id": "612_java", "language": "Java", "requirement": "Write a python function to merge the first and last elements separately in a list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5b7927`\n   b. Major behaviors: public static int merge(int lst) {     return [list(ele) for...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int merge(int lst) {\n    return [list(ele) for ele in list(zip(*lst))];\n}"}
{"id": "613_java", "language": "Java", "requirement": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4e8cf5`\n   b. Major behaviors: public static int maximum_value(int test_list) {     res = [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int maximum_value(int test_list) {\n    res = [(key, max(lst)) for key, lst in test_list]\n    return (res);\n}"}
{"id": "614_java", "language": "Java", "requirement": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6dc00c`\n   b. Major behaviors: public static int cummulative_sum(int test_list) {     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int cummulative_sum(int test_list) {\n    res = sum(map(sum, test_list))\n    return (res);\n}"}
{"id": "615_java", "language": "Java", "requirement": "Write a function to find average value of the numbers in a given tuple of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `88f683`\n   b. Major behaviors: public static int average_tuple(int nums) {     result = [su...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int average_tuple(int nums) {\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result;\n}"}
{"id": "616_java", "language": "Java", "requirement": "Write a function to perfom the modulo of tuple elements in the given two tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e99c9`\n   b. Major behaviors: public static int tuple_modulo(int test_tup1, int test_tup2)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tuple_modulo(int test_tup1, int test_tup2) {\n    res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "617_java", "language": "Java", "requirement": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `805034`\n   b. Major behaviors: public static int min_Jumps(int a, int b, int d) {     temp...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_Jumps(int a, int b, int d) {\n    temp = a\n    a = min(a, b)\n    b = max(temp, b)\n    if ((d >= b)) {\n        return (d + b - 1) / b;\n        if ((d == 0)) {\n            return 0;\n            if ((d == a)) {\n                return 1;\n                } else {\n                return 2;\n            }\n        }\n    }\n}"}
{"id": "618_java", "language": "Java", "requirement": "Write a function to divide two lists using map and lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b187eb`\n   b. Major behaviors: public static int div_list(int nums1, int nums2) {     resul...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int div_list(int nums1, int nums2) {\n    result = map(lambda x, y: x / y, nums1, nums2)\n    return list(result);\n}"}
{"id": "619_java", "language": "Java", "requirement": "Write a function to move all the numbers in it to the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `960ef6`\n   b. Major behaviors: public static int move_num(int test_str) {     res = ''...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int move_num(int test_str) {\n    res = ''\n    dig = ''\n    // [manual conversion needed for loop]: for ele in test_str:\n    if (ele.isdigit()) {\n        dig += ele\n        } else {\n        res += ele\n        res += dig\n        return (res);\n    }\n}"}
{"id": "620_java", "language": "Java", "requirement": "Write a function to find the largest subset where each pair is divisible.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `214d18`\n   b. Major behaviors: public static int largest_subset(int a, int n) {     dp = [0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int largest_subset(int a, int n) {\n    dp = [0 for i in range(n)]\n    dp[n - 1] = 1;\n    // [manual conversion needed for loop]: for i in range(n - 2, -1, -1):\n    mxm = 0;\n    // [manual conversion needed for loop]: for j in range(i + 1, n):\n    if (a[j] % a[i] == 0 or a[i] % a[j] == 0) {\n        mxm = max(mxm, dp[j])\n        dp[i] = 1 + mxm\n        return max(dp);\n    }\n}"}
{"id": "621_java", "language": "Java", "requirement": "Write a function to increment the numeric values in the given strings by k.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ac6a85`\n   b. Major behaviors: public static int increment_numerics(int test_list, int K) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int increment_numerics(int test_list, int K) {\n    res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n    return res;\n}"}
{"id": "622_java", "language": "Java", "requirement": "Write a function to find the median of two sorted arrays of same size.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `69b5da`\n   b. Major behaviors: public static int get_median(int arr1, int arr2, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_median(int arr1, int arr2, int n) {\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    // [manual conversion needed for while loop]: while count < n + 1:\n    count += 1\n    if (i == n) {\n        m1 = m2\n        m2 = arr2[0]\n        break\n        } else if (j == n) {\n        m1 = m2\n        m2 = arr1[0]\n        break\n        if (arr1[i] <= arr2[j]) {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n            } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n            return (m1 + m2)/2;\n        }\n    }\n}"}
{"id": "623_java", "language": "Java", "requirement": "Write a function to find the n-th power of individual elements in a list using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `30c5f1`\n   b. Major behaviors: public static int nth_nums(int nums, int n) {     nth_nums =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int nth_nums(int nums, int n) {\n    nth_nums = list(map(lambda x: x ** n, nums))\n    return nth_nums;\n}"}
{"id": "624_java", "language": "Java", "requirement": "Write a python function to convert the given string to upper case.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `056de9`\n   b. Major behaviors: public static int is_upper(int string) {     return (string....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_upper(int string) {\n    return (string.upper());\n}"}
{"id": "625_java", "language": "Java", "requirement": "Write a python function to interchange first and last elements in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `96c67c`\n   b. Major behaviors: public static int swap_List(int newList) {     size = len(ne...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int swap_List(int newList) {\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList;\n}"}
{"id": "626_java", "language": "Java", "requirement": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4aef15`\n   b. Major behaviors: public static int triangle_area(int r)) {     if (r < 0 ) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int triangle_area(int r)) {\n    if (r < 0 ) {\n        return -1;\n        return r * r;\n    }\n}"}
{"id": "627_java", "language": "Java", "requirement": "Write a python function to find the smallest missing number from the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `94d317`\n   b. Major behaviors: public static int find_First_Missing(int array, int start, i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_First_Missing(int array, int start, int end) {\n    if ((start > end)) {\n        return end + 1;\n        if ((start != array[start])) {\n            return start;;\n            mid = int((start + end) / 2)\n            if ((array[mid] == mid)) {\n                return find_First_Missing(array,mid+1,end);\n                return find_First_Missing(array,start,mid);\n            }\n        }\n    }\n}"}
{"id": "628_java", "language": "Java", "requirement": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `07bf81`\n   b. Major behaviors: MAX=1000; public static int replace_spaces(int string) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "MAX=1000;\npublic static int replace_spaces(int string) {\n    string=string.strip()\n    i=len(string)\n    space_count=string.count(' ')\n    new_length = i + space_count*2\n    if (new_length > MAX) {\n        return -1;\n        index = new_length-1\n        string=list(string)\n        // [manual conversion needed for loop]: for f in range(i-2, new_length-2):\n        string.append('0')\n        // [manual conversion needed for loop]: for j in range(i-1, 0, -1):\n        if (string[j] == ' ') {\n            string[index] = '0'\n            string[index-1] = '2'\n            string[index-2] = '%'\n            index=index-3\n            } else {\n            string[index] = string[j]\n            index -= 1\n            return ''.join(string);\n        }\n    }\n}"}
{"id": "629_java", "language": "Java", "requirement": "Write a python function to find even numbers from a mixed list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ae0df8`\n   b. Major behaviors: public static int Split(int list) {     ev_li = []     // [m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Split(int list) {\n    ev_li = []\n    // [manual conversion needed for loop]: for i in list:\n    if ((i % 2 == 0)) {\n        ev_li.append(i)\n        return ev_li;\n    }\n}"}
{"id": "630_java", "language": "Java", "requirement": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ec2df5`\n   b. Major behaviors: public static int adjac(int ele, int sub) {     if (not ele)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int adjac(int ele, int sub) {\n    if (not ele) {\n        yield sub\n        } else {\n        yield from [idx for j in range(ele[0] - 1, ele[0] + 2)\n        // [manual conversion needed for loop]: for idx in adjac(ele[1:], sub + [j])]\n        public static int get_coordinates(int test_tup) {\n            res = list(adjac(test_tup))\n            return (res);\n        }\n    }\n}"}
{"id": "631_java", "language": "Java", "requirement": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `11251e`\n   b. Major behaviors: import re text = 'Python Exercises' public static int replac...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\ntext = 'Python Exercises'\npublic static int replace_spaces(int text) {\n    text =text.replace (\" \", \"_\")\n    return (text);\n    text =text.replace (\"_\", \" \")\n    return (text);\n}"}
{"id": "632_java", "language": "Java", "requirement": "Write a python function to move all zeroes to the end of the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e98e47`\n   b. Major behaviors: public static int move_zero(int num_list) {     a = [0 for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int move_zero(int num_list) {\n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return (x);\n}"}
{"id": "633_java", "language": "Java", "requirement": "Write a python function to find the sum of xor of all pairs of numbers in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f07f9e`\n   b. Major behaviors: public static int pair_OR_Sum(int arr, int n)) {     ans = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int pair_OR_Sum(int arr, int n)) {\n    ans = 0\n    // [manual conversion needed for loop]: for i in range(0,n) :\n    // [manual conversion needed for loop]: for j in range(i + 1,n) :\n    ans = ans + (arr[i] ^ arr[j])\n    return ans;\n}"}
{"id": "634_java", "language": "Java", "requirement": "Write a python function to find the sum of fourth power of first n even natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `016019`\n   b. Major behaviors: public static int even_Power_Sum(int n) {     sum = 0;     /...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int even_Power_Sum(int n) {\n    sum = 0;\n    // [manual conversion needed for loop]: for i in range(1,n + 1):\n    j = 2*i;\n    sum = sum + (j*j*j*j);\n    return sum;;\n}"}
{"id": "635_java", "language": "Java", "requirement": "Write a function to push all values into a heap and then pop off the smallest values one at a time.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c10790`\n   b. Major behaviors: import heapq as hq public static int heap_sort(int iterable)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\npublic static int heap_sort(int iterable) {\n    h = []\n    // [manual conversion needed for loop]: for value in iterable:\n    hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))];\n}"}
{"id": "636_java", "language": "Java", "requirement": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a3bc8c`\n   b. Major behaviors: public static int Check_Solution(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Check_Solution(int a, int b, int c) {\n    if ((a == c)) {\n        return (\"Yes\");;\n        } else {\n        return (\"No\");;\n    }\n}"}
{"id": "637_java", "language": "Java", "requirement": "Write a function to check whether the given amount has no profit and no loss", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c32217`\n   b. Major behaviors: public static int noprofit_noloss(int actual_cost, int sale_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int noprofit_noloss(int actual_cost, int sale_amount) {\n    if(sale_amount == actual_cost):\n    return True;\n    } else {\n    return False;\n}"}
{"id": "638_java", "language": "Java", "requirement": "Write a function to calculate wind chill index.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f08d4d`\n   b. Major behaviors: import math public static int wind_chill(int v, int t) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int wind_chill(int v, int t) {\n    windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n    return int(round(windchill, 0));\n}"}
{"id": "639_java", "language": "Java", "requirement": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cadf14`\n   b. Major behaviors: public static int sample_nam(int sample_names) {     sample_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sample_nam(int sample_names) {\n    sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n    return len(''.join(sample_names));\n}"}
{"id": "640_java", "language": "Java", "requirement": "Write a function to remove the parenthesis area in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `559663`\n   b. Major behaviors: import re public static int remove_parenthesis(int items) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_parenthesis(int items) {\n    // [manual conversion needed for loop]: for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item));\n}"}
{"id": "641_java", "language": "Java", "requirement": "Write a function to find the nth nonagonal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `584a00`\n   b. Major behaviors: public static int is_nonagonal(int n) {     return int(n * (...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_nonagonal(int n) {\n    return int(n * (7 * n - 5) / 2);\n}"}
{"id": "642_java", "language": "Java", "requirement": "Write a function to remove similar rows from the given tuple matrix.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9a0854`\n   b. Major behaviors: public static int remove_similar_row(int test_list) {     re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_similar_row(int test_list) {\n    res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\n    return (res);\n}"}
{"id": "643_java", "language": "Java", "requirement": "Write a function that matches a word containing 'z', not at the start or end of the word.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eeaea9`\n   b. Major behaviors: import re public static int text_match_wordz_middle(int text...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match_wordz_middle(int text) {\n    patterns = '\\Bz\\B'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return('Not matched!')\n    }\n}"}
{"id": "644_java", "language": "Java", "requirement": "Write a python function to reverse an array upto a given position.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e74435`\n   b. Major behaviors: public static int reverse_Array_Upto_K(int input, int k) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int reverse_Array_Upto_K(int input, int k) {\n    return (input[k-1::-1] + input[k:]);\n}"}
{"id": "645_java", "language": "Java", "requirement": "Write a function to find the product of it\u2019s kth index in the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c81def`\n   b. Major behaviors: public static int get_product(int val)) {     res = 1     //...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_product(int val)) {\n    res = 1\n    // [manual conversion needed for loop]: for ele in val:\n    res *= ele\n    return res;\n    public static int find_k_product(int test_list, int K) {\n        res = get_product([sub[K] for sub in test_list])\n        return (res);\n    }\n}"}
{"id": "646_java", "language": "Java", "requirement": "Write a python function to count number of cubes of size k in a cube of size n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `73b5a2`\n   b. Major behaviors: public static int No_of_cubes(int N, int K) {     No = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int No_of_cubes(int N, int K) {\n    No = 0\n    No = (N - K + 1)\n    No = pow(No, 3)\n    return No;\n}"}
{"id": "647_java", "language": "Java", "requirement": "Write a function to split a string at uppercase letters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `46fe7a`\n   b. Major behaviors: import re public static int split_upperstring(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int split_upperstring(int text) {\n    return (re.findall('[A-Z][^A-Z]*', text));\n}"}
{"id": "648_java", "language": "Java", "requirement": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b45804`\n   b. Major behaviors: from itertools import zip_longest, chain, tee public static...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import zip_longest, chain, tee\npublic static int exchange_elements(int lst) {\n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])));\n}"}
{"id": "649_java", "language": "Java", "requirement": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `49b0b0`\n   b. Major behaviors: public static int sum_Range_list(int nums, int m, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_Range_list(int nums, int m, int n) {\n    sum_range = 0\n    // [manual conversion needed for loop]: for i in range(m, n+1, 1):\n    sum_range += nums[i]\n    return sum_range;\n}"}
{"id": "650_java", "language": "Java", "requirement": "Write a python function to check whether the given two arrays are equal or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e3b47c`\n   b. Major behaviors: public static int are_Equal(int arr1, int arr2, int n, int m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int are_Equal(int arr1, int arr2, int n, int m) {\n    if ((n != m)) {\n        return False;\n        arr1.sort()\n        arr2.sort()\n        // [manual conversion needed for loop]: for i in range(0,n - 1):\n        if ((arr1[i] != arr2[i])) {\n            return False;\n            return True;\n        }\n    }\n}"}
{"id": "651_java", "language": "Java", "requirement": "Write a function to check if one tuple is a subset of another tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `906a7a`\n   b. Major behaviors: public static int check_subset(int test_tup1, int test_tup2)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_subset(int test_tup1, int test_tup2) {\n    res = set(test_tup2).issubset(test_tup1)\n    return (res);\n}"}
{"id": "652_java", "language": "Java", "requirement": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f57fd1`\n   b. Major behaviors: public static int matrix_to_list(int test_list) {     temp =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int matrix_to_list(int test_list) {\n    temp = [ele for sub in test_list for ele in sub]\n    res = list(zip(*temp))\n    return (str(res));\n}"}
{"id": "653_java", "language": "Java", "requirement": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a9a691`\n   b. Major behaviors: from collections import defaultdict public static int groupi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\npublic static int grouping_dictionary(int l) {\n    d = defaultdict(list)\n    // [manual conversion needed for loop]: for k, v in l:\n    d[k].append(v)\n    return d;\n}"}
{"id": "654_java", "language": "Java", "requirement": "Write a function to find the perimeter of a rectangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c0fd11`\n   b. Major behaviors: public static int rectangle_perimeter(int l, int b) {     pe...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rectangle_perimeter(int l, int b) {\n    perimeter=2*(l+b)\n    return perimeter;\n}"}
{"id": "655_java", "language": "Java", "requirement": "Write a python function to find the sum of fifth power of n natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4b0562`\n   b. Major behaviors: public static int fifth_Power_Sum(int n)) {     sm = 0     /...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int fifth_Power_Sum(int n)) {\n    sm = 0\n    // [manual conversion needed for loop]: for i in range(1,n+1) :\n    sm = sm + (i*i*i*i*i)\n    return sm;\n}"}
{"id": "656_java", "language": "Java", "requirement": "Write a python function to find the minimum sum of absolute differences of two arrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fcff3d`\n   b. Major behaviors: public static int find_Min_Sum(int a, int b, int n) {     a....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Min_Sum(int a, int b, int n) {\n    a.sort()\n    b.sort()\n    sum = 0\n    // [manual conversion needed for loop]: for i in range(n):\n    sum = sum + abs(a[i] - b[i])\n    return sum;\n}"}
{"id": "657_java", "language": "Java", "requirement": "Write a python function to find the first digit in factorial of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `63393e`\n   b. Major behaviors: import math public static int first_Digit(int n)) {     fact...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int first_Digit(int n)) {\n    fact = 1\n    // [manual conversion needed for loop]: for i in range(2,n + 1) :\n    fact = fact * i\n    // [manual conversion needed for while loop]: while (fact % 10 == 0) :\n    fact = int(fact / 10)\n    // [manual conversion needed for while loop]: while (fact >= 10) :\n    fact = int(fact / 10)\n    return math.floor(fact);\n}"}
{"id": "658_java", "language": "Java", "requirement": "Write a function to find the item with maximum occurrences in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb5252`\n   b. Major behaviors: public static int max_occurrences(int list1) {     max_val =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_occurrences(int list1) {\n    max_val = 0\n    result = list1[0]\n    // [manual conversion needed for loop]: for i in list1:\n    occu = list1.count(i)\n    if (occu > max_val) {\n        max_val = occu\n        result = i\n        return result;\n    }\n}"}
{"id": "659_java", "language": "Java", "requirement": "Write a python function to print duplicants from a list of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4203cd`\n   b. Major behaviors: public static int Repeat(int x) {     _size = len(x)     rep...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Repeat(int x) {\n    _size = len(x)\n    repeated = []\n    // [manual conversion needed for loop]: for i in range(_size):\n    k = i + 1\n    // [manual conversion needed for loop]: for j in range(k, _size):\n    if (x[i] == x[j] and x[i] not in repeated) {\n        repeated.append(x[i])\n        return repeated;\n    }\n}"}
{"id": "660_java", "language": "Java", "requirement": "Write a python function to choose points from two ranges such that no point lies in both the ranges.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `68bd9f`\n   b. Major behaviors: public static int find_Points(int l1, int r1, int l2, int r2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Points(int l1, int r1, int l2, int r2) {\n    x = min(l1,l2) if (l1 != l2) else -1\n    y = max(r1,r2) if (r1 != r2) else -1\n    return (x,y);\n}"}
{"id": "661_java", "language": "Java", "requirement": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `be3716`\n   b. Major behaviors: public static int max_sum_of_three_consecutive(int arr, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sum_of_three_consecutive(int arr, int n) {\n    sum = [0 for k in range(n)]\n    if (n >= 1) {\n        sum[0] = arr[0]\n        if (n >= 2) {\n            sum[1] = arr[0] + arr[1]\n            if (n > 2) {\n                sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n                // [manual conversion needed for loop]: for i in range(3, n):\n                sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3])\n                return sum[n-1];\n            }\n        }\n    }\n}"}
{"id": "662_java", "language": "Java", "requirement": "Write a function to sort a list in a dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d87899`\n   b. Major behaviors: public static int sorted_dict(int dict1) {     sorted_dict =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sorted_dict(int dict1) {\n    sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n    return sorted_dict;\n}"}
{"id": "663_java", "language": "Java", "requirement": "Write a function to find the largest possible value of k such that k modulo x is y.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9d2308`\n   b. Major behaviors: import sys public static int find_max_val(int n, int x, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys\npublic static int find_max_val(int n, int x, int y) {\n    ans = -sys.maxsize\n    // [manual conversion needed for loop]: for k in range(n + 1):\n    if ((k % x == y)) {\n        ans = max(ans, k)\n        return (ans if (ans >= 0 and;\n        ans <= n) else -1)\n    }\n}"}
{"id": "664_java", "language": "Java", "requirement": "Write a python function to find the average of even numbers till a given even number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `120f81`\n   b. Major behaviors: public static int average_Even(int n)) {     if ((n% 2!= 0)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int average_Even(int n)) {\n    if ((n% 2!= 0) ) {\n        return (\"Invalid Input\");\n        return -1;\n        sm = 0\n        count = 0\n        // [manual conversion needed for while loop]: while (n>= 2) :\n        count = count+1\n        sm = sm+n\n        n = n-2\n        return sm // count;\n    }\n}"}
{"id": "665_java", "language": "Java", "requirement": "Write a python function to shift first element to the end of given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `857a02`\n   b. Major behaviors: public static int move_last(int num_list) {     a = [num_lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int move_last(int num_list) {\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return (x);\n}"}
{"id": "666_java", "language": "Java", "requirement": "Write a function to count occurrence of a character in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `97274b`\n   b. Major behaviors: public static int count_char(int string, int char) {     cou...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_char(int string, int char) {\n    count = 0\n    // [manual conversion needed for loop]: for i in range(len(string)):\n    if(string[i] == char):\n    count = count + 1\n    return count;\n}"}
{"id": "667_java", "language": "Java", "requirement": "Write a python function to count number of vowels in the string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cf39a6`\n   b. Major behaviors: public static int Check_Vow(int string, int vowels) {     fi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Check_Vow(int string, int vowels) {\n    final = [each for each in string if each in vowels]\n    return(len(final))\n}"}
{"id": "668_java", "language": "Java", "requirement": "Write a python function to replace multiple occurence of character by single.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `95b0ff`\n   b. Major behaviors: import re public static int replace(int string, int char) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int replace(int string, int char) {\n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string)\n    return string;\n}"}
{"id": "669_java", "language": "Java", "requirement": "Write a function to check whether the given ip address is valid or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a3760d`\n   b. Major behaviors: import re regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\npublic static int check_IP(int Ip) {\n    if(re.search(regex, Ip)):\n    return (\"Valid IP address\");\n    } else {\n    return (\"Invalid IP address\");\n}"}
{"id": "670_java", "language": "Java", "requirement": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1b7816`\n   b. Major behaviors: public static int decreasing_trend(int nums) {     if ((sort...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int decreasing_trend(int nums) {\n    if ((sorted(nums)== nums)) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "671_java", "language": "Java", "requirement": "Write a python function to set the right most unset bit.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7c434d`\n   b. Major behaviors: import math public static int get_Pos_Of_Right_most_Set_Bit(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int get_Pos_Of_Right_most_Set_Bit(int n) {\n    return int(math.log2(n&-n)+1);\n    public static int set_Right_most_Unset_Bit(int n) {\n        if ((n == 0)) {\n            return 1;\n            if (((n & (n + 1)) == 0)) {\n                return n;\n                pos = get_Pos_Of_Right_most_Set_Bit(~n)\n                return ((1 << (pos - 1)) | n);\n            }\n        }\n    }\n}"}
{"id": "672_java", "language": "Java", "requirement": "Write a function to find maximum of three numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b1ba66`\n   b. Major behaviors: public static int max_of_three(int num1, int num2, int num3)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_of_three(int num1, int num2, int num3) {\n    if ((num1 >= num2) and (num1 >= num3)) {\n        lnum = num1\n        } else if ((num2 >= num1) and (num2 >= num3)) {\n        lnum = num2\n        } else {\n        lnum = num3\n        return lnum;\n    }\n}"}
{"id": "673_java", "language": "Java", "requirement": "Write a python function to convert a list of multiple integers into a single integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7e688b`\n   b. Major behaviors: public static int convert(int list) {     s = [str(i) for i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int convert(int list) {\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n    return (res);\n}"}
{"id": "674_java", "language": "Java", "requirement": "Write a function to remove duplicate words from a given string using collections module.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fd8f4d`\n   b. Major behaviors: from collections import OrderedDict public static int remove...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import OrderedDict\npublic static int remove_duplicate(int string) {\n    result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n    return result;\n}"}
{"id": "675_java", "language": "Java", "requirement": "Write a function to add two integers. however, if the sum is between the given range it will return 20.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a439f5`\n   b. Major behaviors: public static int sum_nums(int x, int y, int m, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_nums(int x, int y, int m, int n) {\n    sum_nums= x + y\n    if (sum_nums in range(m, n)) {\n        return 20;\n        } else {\n        return sum_nums;\n    }\n}"}
{"id": "676_java", "language": "Java", "requirement": "Write a function to remove everything except alphanumeric characters from the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a492c7`\n   b. Major behaviors: import re public static int remove_extra_char(int text1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_extra_char(int text1) {\n    pattern = re.compile('[\\W_]+')\n    return (pattern.sub('', text1));\n}"}
{"id": "677_java", "language": "Java", "requirement": "Write a function to check if the triangle is valid or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `64c637`\n   b. Major behaviors: public static int validity_triangle(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int validity_triangle(int a, int b, int c) {\n    total = a + b + c\n    if (total == 180) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "678_java", "language": "Java", "requirement": "Write a python function to remove spaces from a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `158249`\n   b. Major behaviors: public static int remove_spaces(int str1) {     str1 = str1....\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_spaces(int str1) {\n    str1 = str1.replace(' ','')\n    return str1;\n}"}
{"id": "679_java", "language": "Java", "requirement": "Write a function to access dictionary key\u2019s element by index.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c29b18`\n   b. Major behaviors: public static int access_key(int ditionary, int key) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int access_key(int ditionary, int key) {\n    return list(ditionary)[key];\n}"}
{"id": "680_java", "language": "Java", "requirement": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `171959`\n   b. Major behaviors: public static int increasing_trend(int nums) {     if ((sort...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int increasing_trend(int nums) {\n    if ((sorted(nums)== nums)) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "681_java", "language": "Java", "requirement": "Write a python function to find the smallest prime divisor of a number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e299e`\n   b. Major behaviors: public static int smallest_Divisor(int n) {     if ((n % 2 =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int smallest_Divisor(int n) {\n    if ((n % 2 == 0)) {\n        return 2;;\n        i = 3;\n        // [manual conversion needed for while loop]: while (i*i <= n):\n        if ((n % i == 0)) {\n            return i;;\n            i += 2;\n            return n;;\n        }\n    }\n}"}
{"id": "682_java", "language": "Java", "requirement": "Write a function to multiply two lists using map and lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fbb583`\n   b. Major behaviors: public static int mul_list(int nums1, int nums2) {     resul...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int mul_list(int nums1, int nums2) {\n    result = map(lambda x, y: x * y, nums1, nums2)\n    return list(result);\n}"}
{"id": "683_java", "language": "Java", "requirement": "Write a python function to check whether the given number can be represented by sum of two squares or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2256e4`\n   b. Major behaviors: public static int sum_Square(int n)) {     i = 1     // [man...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_Square(int n)) {\n    i = 1\n    // [manual conversion needed for while loop]: while i*i <= n :\n    j = 1\n    // [manual conversion needed for while loop]: while (j*j <= n) :\n    if ((i*i+j*j == n) ) {\n        return True;\n        j = j+1\n        i = i+1\n        return False;\n    }\n}"}
{"id": "684_java", "language": "Java", "requirement": "Write a python function to count occurences of a character in a repeated string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `086d1c`\n   b. Major behaviors: public static int count_Char(int str, int x) {     count = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Char(int str, int x) {\n    count = 0\n    // [manual conversion needed for loop]: for i in range(len(str)):\n    if ((str[i] == x) ) {\n        count += 1\n        n = 10\n        repititions = n // len(str)\n        count = count * repititions\n        l = n % len(str)\n        // [manual conversion needed for loop]: for i in range(l):\n        if ((str[i] == x)) {\n            count += 1\n            return count;\n        }\n    }\n}"}
{"id": "685_java", "language": "Java", "requirement": "Write a python function to find sum of prime numbers between 1 to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3f771f`\n   b. Major behaviors: public static int sum_Of_Primes(int n) {     prime = [True]...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_Of_Primes(int n) {\n    prime = [True] * (n + 1)\n    p = 2\n    // [manual conversion needed for while loop]: while p * p <= n:\n    if (prime[p] == True) {\n        i = p * 2\n        // [manual conversion needed for while loop]: while i <= n:\n        prime[i] = False\n        i += p\n        p += 1\n        sum = 0\n        // [manual conversion needed for loop]: for i in range (2,n + 1):\n        if(prime[i]):\n        sum += i\n        return sum;\n    }\n}"}
{"id": "686_java", "language": "Java", "requirement": "Write a function to find the frequency of each element in the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `96edb5`\n   b. Major behaviors: from collections import defaultdict public static int freq_e...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\npublic static int freq_element(int test_tup) {\n    res = defaultdict(int)\n    // [manual conversion needed for loop]: for ele in test_tup:\n    res[ele] += 1\n    return (str(dict(res)));\n}"}
{"id": "687_java", "language": "Java", "requirement": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c64d83`\n   b. Major behaviors: public static int recur_gcd(int a, int b) {     low = min(a,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int recur_gcd(int a, int b) {\n    low = min(a, b)\n    high = max(a, b)\n    if (low == 0) {\n        return high;\n        } else if (low == 1) {\n        return 1;\n        } else {\n        return recur_gcd(low, high%low);\n    }\n}"}
{"id": "688_java", "language": "Java", "requirement": "Write a function to get the length of a complex number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3208a9`\n   b. Major behaviors: import cmath public static int len_complex(int a, int b) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import cmath\npublic static int len_complex(int a, int b) {\n    cn=complex(a,b)\n    length=abs(cn)\n    return length;\n}"}
{"id": "689_java", "language": "Java", "requirement": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `da0646`\n   b. Major behaviors: public static int min_jumps(int arr, int n) {     jumps = [0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_jumps(int arr, int n) {\n    jumps = [0 for i in range(n)]\n    if ((n == 0) or (arr[0] == 0)) {\n        return float('inf');\n        jumps[0] = 0\n        // [manual conversion needed for loop]: for i in range(1, n):\n        jumps[i] = float('inf')\n        // [manual conversion needed for loop]: for j in range(i):\n        if ((i <= j + arr[j]) and (jumps[j] != float('inf'))) {\n            jumps[i] = min(jumps[i], jumps[j] + 1)\n            break\n            return jumps[n-1];\n        }\n    }\n}"}
{"id": "690_java", "language": "Java", "requirement": "Write a function to multiply consecutive numbers of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7c975e`\n   b. Major behaviors: public static int mul_consecutive_nums(int nums) {     resul...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int mul_consecutive_nums(int nums) {\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result;\n}"}
{"id": "691_java", "language": "Java", "requirement": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb7d5f`\n   b. Major behaviors: from itertools import groupby public static int group_elemen...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby\npublic static int group_element(int test_list) {\n    res = dict()\n    // [manual conversion needed for loop]: for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val]\n    return (res);\n}"}
{"id": "692_java", "language": "Java", "requirement": "Write a python function to find the last two digits in factorial of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5ff108`\n   b. Major behaviors: public static int last_Two_Digits(int N) {     if ((N >= 10)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int last_Two_Digits(int N) {\n    if ((N >= 10)) {\n        return\n        fac = 1\n        // [manual conversion needed for loop]: for i in range(1,N + 1):\n        fac = (fac * i) % 100\n        return (fac);\n    }\n}"}
{"id": "693_java", "language": "Java", "requirement": "Write a function to remove multiple spaces in a string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6af3ce`\n   b. Major behaviors: import re public static int remove_multiple_spaces(int text1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_multiple_spaces(int text1) {\n    return (re.sub(' +',' ',text1));\n}"}
{"id": "694_java", "language": "Java", "requirement": "Write a function to extract unique values from the given dictionary values.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `eb9344`\n   b. Major behaviors: public static int extract_unique(int test_dict) {     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_unique(int test_dict) {\n    res = list(sorted({ele for val in test_dict.values() for ele in val}))\n    return res;\n}"}
{"id": "695_java", "language": "Java", "requirement": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6b1cc3`\n   b. Major behaviors: public static int check_greater(int test_tup1, int test_tup2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_greater(int test_tup1, int test_tup2) {\n    res = all(x < y for x, y in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "696_java", "language": "Java", "requirement": "Write a function to zip two given lists of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1f268b`\n   b. Major behaviors: public static int zip_list(int list1, int list2) {     resul...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int zip_list(int list1, int list2) {\n    result = list(map(list.__add__, list1, list2))\n    return result;\n}"}
{"id": "697_java", "language": "Java", "requirement": "Write a function to find number of even elements in the given list using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8e5d1c`\n   b. Major behaviors: public static int count_even(int array_nums) {     count_eve...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_even(int array_nums) {\n    count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n    return count_even;\n}"}
{"id": "698_java", "language": "Java", "requirement": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6fa4e4`\n   b. Major behaviors: public static int sort_dict_item(int test_dict) {     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_dict_item(int test_dict) {\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\n    return  (res);\n}"}
{"id": "699_java", "language": "Java", "requirement": "Write a python function to find the minimum number of swaps required to convert one binary string to another.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5048e2`\n   b. Major behaviors: public static int min_Swaps(int str1, int str2)) {     count...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_Swaps(int str1, int str2)) {\n    count = 0\n    // [manual conversion needed for loop]: for i in range(len(str1)) :\n    if (str1[i] != str2[i] ) {\n        count += 1\n        if (count % 2 == 0 ) {\n            return (count // 2);\n            } else {\n            return (\"Not Possible\");\n        }\n    }\n}"}
{"id": "700_java", "language": "Java", "requirement": "Write a function to count the number of elements in a list which are within a specific range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2b4b7b`\n   b. Major behaviors: public static int count_range_in_list(int li, int min, int m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_range_in_list(int li, int min, int max) {\n    ctr = 0\n    // [manual conversion needed for loop]: for x in li:\n    if (min <= x <= max) {\n        ctr += 1\n        return ctr;\n    }\n}"}
{"id": "701_java", "language": "Java", "requirement": "Write a function to find the equilibrium index of the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `83cb85`\n   b. Major behaviors: public static int equilibrium_index(int arr) {     total_sum...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int equilibrium_index(int arr) {\n    total_sum = sum(arr)\n    left_sum=0\n    // [manual conversion needed for loop]: for i, num in enumerate(arr):\n    total_sum -= num\n    if (left_sum == total_sum) {\n        return i;\n        left_sum += num\n        return -1;\n    }\n}"}
{"id": "702_java", "language": "Java", "requirement": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `82f225`\n   b. Major behaviors: public static int find_ind(int key, int i, int n, int ) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_ind(int key, int i, int n, int ) {\n    k, arr):\n    ind = -1\n    start = i + 1\n    end = n - 1;\n    // [manual conversion needed for while loop]: while (start < end):\n    mid = int(start +\n    (end - start) / 2)\n    if ((arr[mid] - key <= k)) {\n        ind = mid\n        start = mid + 1\n        } else {\n        end = mid\n        return ind;\n        public static int removals(int arr, int n, int k) {\n            ans = n - 1\n            arr.sort()\n            // [manual conversion needed for loop]: for i in range(0, n):\n            j = find_ind(arr[i], i,\n            n, k, arr)\n            if ((j != -1)) {\n                ans = min(ans, n -\n                (j - i + 1))\n                return ans;\n            }\n        }\n    }\n}"}
{"id": "703_java", "language": "Java", "requirement": "Write a function to check whether the given key is present in the dictionary or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `811540`\n   b. Major behaviors: public static int is_key_present(int d, int x) {     if (x i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_key_present(int d, int x) {\n    if (x in d) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "704_java", "language": "Java", "requirement": "Write a function to calculate the harmonic sum of n-1.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `42d292`\n   b. Major behaviors: public static int harmonic_sum(int n) {     if (n < 2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int harmonic_sum(int n) {\n    if (n < 2) {\n        return 1;\n        } else {\n        return 1 / n + (harmonic_sum(n - 1));\n    }\n}"}
{"id": "705_java", "language": "Java", "requirement": "Write a function to sort a list of lists by length and value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6efaac`\n   b. Major behaviors: public static int sort_sublists(int list1) {     list1.sort(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_sublists(int list1) {\n    list1.sort()\n    list1.sort(key=len)\n    return  list1;\n}"}
{"id": "706_java", "language": "Java", "requirement": "Write a function to find whether an array is subset of another array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cebad4`\n   b. Major behaviors: public static int is_subset(int arr1, int m, int arr2, int n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_subset(int arr1, int m, int arr2, int n) {\n    hashset = set()\n    // [manual conversion needed for loop]: for i in range(0, m):\n    hashset.add(arr1[i])\n    // [manual conversion needed for loop]: for i in range(0, n):\n    if (arr2[i] in hashset) {\n        continue\n        } else {\n        return False;\n        return True;\n    }\n}"}
{"id": "707_java", "language": "Java", "requirement": "Write a python function to count the total set bits from 1 to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fba370`\n   b. Major behaviors: public static int count_Set_Bits(int n)) {     n += 1;     p...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Set_Bits(int n)) {\n    n += 1;\n    powerOf2 = 2;\n    cnt = n // 2;\n    // [manual conversion needed for while loop]: while (powerOf2 <= n) :\n    totalPairs = n // powerOf2;\n    cnt += (totalPairs // 2) * powerOf2;\n    if ((totalPairs & 1) ) {\n        cnt += (n % powerOf2)\n        } else {\n        cnt += 0\n        powerOf2 <<= 1;\n        return cnt;;\n    }\n}"}
{"id": "708_java", "language": "Java", "requirement": "Write a python function to convert a string to a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `055a89`\n   b. Major behaviors: public static int Convert(int string) {     li = list(string...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Convert(int string) {\n    li = list(string.split(\" \"))\n    return li;\n}"}
{"id": "709_java", "language": "Java", "requirement": "Write a function to count unique keys for each value present in the tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `246127`\n   b. Major behaviors: from collections import defaultdict public static int get_un...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import defaultdict\npublic static int get_unique(int test_list) {\n    res = defaultdict(list)\n    // [manual conversion needed for loop]: for sub in test_list:\n    res[sub[1]].append(sub[0])\n    res = dict(res)\n    res_dict = dict()\n    // [manual conversion needed for loop]: for key in res:\n    res_dict[key] = len(list(set(res[key])))\n    return (str(res_dict));\n}"}
{"id": "710_java", "language": "Java", "requirement": "Write a function to access the initial and last data of the given tuple record.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `84d5f3`\n   b. Major behaviors: public static int front_and_rear(int test_tup) {     res = (...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int front_and_rear(int test_tup) {\n    res = (test_tup[0], test_tup[-1])\n    return (res);\n}"}
{"id": "711_java", "language": "Java", "requirement": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d500f2`\n   b. Major behaviors: public static int product_Equal(int n) {     if (n < 10) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int product_Equal(int n) {\n    if (n < 10) {\n        return False;\n        prodOdd = 1; prodEven = 1\n        // [manual conversion needed for while loop]: while n > 0:\n        digit = n % 10\n        prodOdd *= digit\n        n = n//10\n        if (n == 0) {\n            break;\n            digit = n % 10\n            prodEven *= digit\n            n = n//10\n            if (prodOdd == prodEven) {\n                return True;\n                return False;\n            }\n        }\n    }\n}"}
{"id": "712_java", "language": "Java", "requirement": "Write a function to remove duplicates from a list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `72ddb5`\n   b. Major behaviors: import itertools public static int remove_duplicate(int list...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import itertools\npublic static int remove_duplicate(int list1) {\n    list.sort(list1)\n    remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\n    return remove_duplicate;\n}"}
{"id": "713_java", "language": "Java", "requirement": "Write a function to check if the given tuple contains all valid values or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fa5f40`\n   b. Major behaviors: public static int check_valid(int test_tup) {     res = not...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_valid(int test_tup) {\n    res = not any(map(lambda ele: not ele, test_tup))\n    return (res);\n}"}
{"id": "714_java", "language": "Java", "requirement": "Write a python function to count the number of distinct power of prime factor of given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4d765a`\n   b. Major behaviors: public static int count_Fac(int n) {     m = n     count = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Fac(int n) {\n    m = n\n    count = 0\n    i = 2\n    while((i * i) <= m):\n    total = 0\n    // [manual conversion needed for while loop]: while (n % i == 0):\n    n /= i\n    total += 1\n    temp = 0\n    j = 1\n    while((temp + j) <= total):\n    temp += j\n    count += 1\n    j += 1\n    i += 1\n    if ((n != 1)) {\n        count += 1\n        return count;\n    }\n}"}
{"id": "715_java", "language": "Java", "requirement": "Write a function to convert the given string of integers into a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `111610`\n   b. Major behaviors: public static int str_to_tuple(int test_str) {     res = tup...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int str_to_tuple(int test_str) {\n    res = tuple(map(int, test_str.split(', ')))\n    return (res);\n}"}
{"id": "716_java", "language": "Java", "requirement": "Write a function to find the perimeter of a rombus.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `523bae`\n   b. Major behaviors: public static int rombus_perimeter(int a) {     perimeter=4*...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rombus_perimeter(int a) {\n    perimeter=4*a\n    return perimeter;\n}"}
{"id": "717_java", "language": "Java", "requirement": "Write a function to calculate the standard deviation.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b17e75`\n   b. Major behaviors: import math import sys public static int sd_calc(int data) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\nimport sys\npublic static int sd_calc(int data) {\n    n = len(data)\n    if (n <= 1) {\n        return 0.0;\n        mean, sd = avg_calc(data), 0.0\n        // [manual conversion needed for loop]: for el in data:\n        sd += (float(el) - mean)**2\n        sd = math.sqrt(sd / float(n-1))\n        return sd;\n        public static int avg_calc(int ls) {\n            n, mean = len(ls), 0.0\n            if (n <= 1) {\n                return ls[0];\n                // [manual conversion needed for loop]: for el in ls:\n                mean = mean + float(el)\n                mean = mean / float(n)\n                return mean;\n            }\n        }\n    }\n}"}
{"id": "718_java", "language": "Java", "requirement": "Write a function to create a list taking alternate elements from another given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `49b9bb`\n   b. Major behaviors: public static int alternate_elements(int list1) {     result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int alternate_elements(int list1) {\n    result=[]\n    // [manual conversion needed for loop]: for item in list1[::2]:\n    result.append(item)\n    return result;\n}"}
{"id": "719_java", "language": "Java", "requirement": "Write a function that matches a string that has an a followed by zero or more b's.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b5e39b`\n   b. Major behaviors: import re public static int text_match(int text) {     patte...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match(int text) {\n    patterns = 'ab*?'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return('Not matched!')\n    }\n}"}
{"id": "720_java", "language": "Java", "requirement": "Write a function to add a dictionary to the tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8cf5f4`\n   b. Major behaviors: public static int add_dict_to_tuple(int test_tup, int test_d...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int add_dict_to_tuple(int test_tup, int test_dict) {\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    test_tup = tuple(test_tup)\n    return (test_tup);\n}"}
{"id": "721_java", "language": "Java", "requirement": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2721ca`\n   b. Major behaviors: M = 100 public static int maxAverageOfPath(int cost, int N)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "M = 100\npublic static int maxAverageOfPath(int cost, int N) {\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    dp[0][0] = cost[0][0]\n    // [manual conversion needed for loop]: for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n    // [manual conversion needed for loop]: for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n    // [manual conversion needed for loop]: for i in range(1, N):\n    // [manual conversion needed for loop]: for j in range(1, N):\n    dp[i][j] = max(dp[i - 1][j],\n    dp[i][j - 1]) + cost[i][j]\n    return dp[N - 1][N - 1] / (2 * N - 1);\n}"}
{"id": "722_java", "language": "Java", "requirement": "Write a function to filter the height and width of students which are stored in a dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `881279`\n   b. Major behaviors: public static int filter_data(int students, int h, int w) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int filter_data(int students, int h, int w) {\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result;\n}"}
{"id": "723_java", "language": "Java", "requirement": "Write a function to count the same pair in two given lists using map function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f4a22e`\n   b. Major behaviors: from operator import eq public static int count_same_pair(in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from operator import eq\npublic static int count_same_pair(int nums1, int nums2) {\n    result = sum(map(eq, nums1, nums2))\n    return result;\n}"}
{"id": "724_java", "language": "Java", "requirement": "Write a function to calculate the sum of all digits of the base to the specified power.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `98d90f`\n   b. Major behaviors: public static int power_base_sum(int base, int power) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int power_base_sum(int base, int power) {\n    return sum([int(i) for i in str(pow(base, power))]);\n}"}
{"id": "725_java", "language": "Java", "requirement": "Write a function to extract values between quotation marks of the given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4f5116`\n   b. Major behaviors: import re public static int extract_quotation(int text1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int extract_quotation(int text1) {\n    return (re.findall(r'\"(.*?)\"', text1));\n}"}
{"id": "726_java", "language": "Java", "requirement": "Write a function to multiply the adjacent elements of the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cf4930`\n   b. Major behaviors: public static int multiply_elements(int test_tup) {     res...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int multiply_elements(int test_tup) {\n    res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n    return (res);\n}"}
{"id": "727_java", "language": "Java", "requirement": "Write a function to remove all characters except letters and numbers using regex", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `988eae`\n   b. Major behaviors: import re public static int remove_char(int S) {     result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_char(int S) {\n    result = re.sub('[\\W_]+', '', S)\n    return result;\n}"}
{"id": "728_java", "language": "Java", "requirement": "Write a function to sum elements in two lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `07747c`\n   b. Major behaviors: public static int sum_list(int lst1, int lst2) {     res_lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_list(int lst1, int lst2) {\n    res_list = [lst1[i] + lst2[i] for i in range(len(lst1))]\n    return res_list;\n}"}
{"id": "729_java", "language": "Java", "requirement": "Write a function to add two lists using map and lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1a4aaf`\n   b. Major behaviors: public static int add_list(int nums1, int nums2) {     resul...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int add_list(int nums1, int nums2) {\n    result = map(lambda x, y: x + y, nums1, nums2)\n    return list(result);\n}"}
{"id": "730_java", "language": "Java", "requirement": "Write a function to remove consecutive duplicates of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `959ad1`\n   b. Major behaviors: from itertools import groupby public static int consecutive_...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby\npublic static int consecutive_duplicates(int nums) {\n    return [key for key, group in groupby(nums)];\n}"}
{"id": "731_java", "language": "Java", "requirement": "Write a function to find the lateral surface area of a cone.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d3ddd4`\n   b. Major behaviors: import math public static int lateralsurface_cone(int r, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int lateralsurface_cone(int r, int h) {\n    l = math.sqrt(r * r + h * h)\n    LSA = math.pi * r  * l\n    return LSA;\n}"}
{"id": "732_java", "language": "Java", "requirement": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b93d4f`\n   b. Major behaviors: import re public static int replace_specialchar(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int replace_specialchar(int text) {\n    return (re.sub(\"[ ,.]\", \":\", text));\n}"}
{"id": "733_java", "language": "Java", "requirement": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1530ab`\n   b. Major behaviors: public static int find_first_occurrence(int A, int x) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_first_occurrence(int A, int x) {\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    // [manual conversion needed for while loop]: while left <= right:\n    mid = (left + right) // 2\n    if (x == A[mid]) {\n        result = mid\n        right = mid - 1\n        } else if (x < A[mid]) {\n        right = mid - 1\n        } else {\n        left = mid + 1\n        return result;\n    }\n}"}
{"id": "734_java", "language": "Java", "requirement": "Write a python function to find sum of products of all possible subarrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fdaef3`\n   b. Major behaviors: public static int sum_Of_Subarray_Prod(int arr, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_Of_Subarray_Prod(int arr, int n) {\n    ans = 0\n    res = 0\n    i = n - 1\n    // [manual conversion needed for while loop]: while (i >= 0):\n    incr = arr[i]*(1 + res)\n    ans += incr\n    res = incr\n    i -= 1\n    return (ans);\n}"}
{"id": "735_java", "language": "Java", "requirement": "Write a python function to toggle bits of the number except the first and the last bit.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1c3285`\n   b. Major behaviors: public static int set_middle_bits(int n) {     n |= n >> 1;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int set_middle_bits(int n) {\n    n |= n >> 1;\n    n |= n >> 2;\n    n |= n >> 4;\n    n |= n >> 8;\n    n |= n >> 16;\n    return (n >> 1) ^ 1;\n    public static int toggle_middle_bits(int n) {\n        if ((n == 1)) {\n            return 1;\n            return n ^ set_middle_bits(n);\n        }\n    }\n}"}
{"id": "736_java", "language": "Java", "requirement": "Write a function to locate the left insertion point for a specified value in sorted order.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `456ea0`\n   b. Major behaviors: import bisect public static int left_insertion(int a, int x)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import bisect\npublic static int left_insertion(int a, int x) {\n    i = bisect.bisect_left(a, x)\n    return i;\n}"}
{"id": "737_java", "language": "Java", "requirement": "Write a function to check whether the given string is starting with a vowel or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bf2bac`\n   b. Major behaviors: import re regex = '^[aeiouAEIOU][A-Za-z0-9_]*' public static...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\npublic static int check_str(int string) {\n    if(re.search(regex, string)):\n    return (\"Valid\");\n    } else {\n    return (\"Invalid\");\n}"}
{"id": "738_java", "language": "Java", "requirement": "Write a function to calculate the geometric sum of n-1.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fd2779`\n   b. Major behaviors: public static int geometric_sum(int n) {     if (n < 0) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int geometric_sum(int n) {\n    if (n < 0) {\n        return 0;\n        } else {\n        return 1 / (pow(2, n)) + geometric_sum(n - 1);\n    }\n}"}
{"id": "739_java", "language": "Java", "requirement": "Write a python function to find the index of smallest triangular number with n digits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `78fbf8`\n   b. Major behaviors: import math public static int find_Index(int n) {     x = ma...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int find_Index(int n) {\n    x = math.sqrt(2 * math.pow(10,(n - 1)));\n    return round(x);;\n}"}
{"id": "740_java", "language": "Java", "requirement": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d302bc`\n   b. Major behaviors: public static int tuple_to_dict(int test_tup) {     res = di...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tuple_to_dict(int test_tup) {\n    res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n    return (res);\n}"}
{"id": "741_java", "language": "Java", "requirement": "Write a python function to check whether all the characters are same or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b6bffe`\n   b. Major behaviors: public static int all_Characters_Same(int s)) {     n = len(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int all_Characters_Same(int s)) {\n    n = len(s)\n    // [manual conversion needed for loop]: for i in range(1,n) :\n    if (s[i] != s[0] ) {\n        return False;\n        return True;\n    }\n}"}
{"id": "742_java", "language": "Java", "requirement": "Write a function to caluclate the area of a tetrahedron.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3f7606`\n   b. Major behaviors: import math public static int area_tetrahedron(int side) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int area_tetrahedron(int side) {\n    area = math.sqrt(3)*(side*side)\n    return area;\n}"}
{"id": "743_java", "language": "Java", "requirement": "Write a function to rotate a given list by specified number of items to the right direction.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `59909c`\n   b. Major behaviors: public static int rotate_right(int list1, int m, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rotate_right(int list1, int m, int n) {\n    result =  list1[-(m):]+list1[:-(n)]\n    return result;\n}"}
{"id": "744_java", "language": "Java", "requirement": "Write a function to check if the given tuple has any none value or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `159b46`\n   b. Major behaviors: public static int check_none(int test_tup) {     res = any(m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_none(int test_tup) {\n    res = any(map(lambda ele: ele is None, test_tup))\n    return (res);\n}"}
{"id": "745_java", "language": "Java", "requirement": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e3f772`\n   b. Major behaviors: public static int divisible_by_digits(int startnum, int endn...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int divisible_by_digits(int startnum, int endnum) {\n    return [n for n in range(startnum, endnum+1) \\;\n    if (not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]) {\n    }\n}"}
{"id": "746_java", "language": "Java", "requirement": "Write a function to find area of a sector.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5278dd`\n   b. Major behaviors: public static int sector_area(int r, int a) {     pi=22/7...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sector_area(int r, int a) {\n    pi=22/7\n    if (a >= 360) {\n        return None;\n        sectorarea = (pi*r**2) * (a/360)\n        return sectorarea;\n    }\n}"}
{"id": "747_java", "language": "Java", "requirement": "Write a function to find the longest common subsequence for the given three string sequence.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `99bd7e`\n   b. Major behaviors: public static int lcs_of_three(int X, int Y, int Z, int m, i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int lcs_of_three(int X, int Y, int Z, int m, int n, int o) {\n    L = [[[0 for i in range(o+1)] for j in range(n+1)]\n    // [manual conversion needed for loop]: for k in range(m+1)]\n    // [manual conversion needed for loop]: for i in range(m+1):\n    // [manual conversion needed for loop]: for j in range(n+1):\n    // [manual conversion needed for loop]: for k in range(o+1):\n    if ((i == 0 or j == 0 or k == 0)) {\n        L[i][j][k] = 0\n        } else if ((X[i-1] == Y[j-1] and) {\n        X[i-1] == Z[k-1]):\n        L[i][j][k] = L[i-1][j-1][k-1] + 1\n        } else {\n        L[i][j][k] = max(max(L[i-1][j][k],\n        L[i][j-1][k]),\n        L[i][j][k-1])\n        return L[m][n][o];\n    }\n}"}
{"id": "748_java", "language": "Java", "requirement": "Write a function to put spaces between words starting with capital letters in a given string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f16ecc`\n   b. Major behaviors: import re public static int capital_words_spaces(int str1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int capital_words_spaces(int str1) {\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1);\n}"}
{"id": "749_java", "language": "Java", "requirement": "Write a function to sort a given list of strings of numbers numerically.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bb5671`\n   b. Major behaviors: public static int sort_numeric_strings(int nums_str) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_numeric_strings(int nums_str) {\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result;\n}"}
{"id": "750_java", "language": "Java", "requirement": "Write a function to add the given tuple to the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `efd98a`\n   b. Major behaviors: public static int add_tuple(int test_list, int test_tup) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int add_tuple(int test_list, int test_tup) {\n    test_list += test_tup\n    return (test_list);\n}"}
{"id": "751_java", "language": "Java", "requirement": "Write a function to check if the given array represents min heap or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4eda37`\n   b. Major behaviors: public static int check_min_heap(int arr, int i) {     if (2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_min_heap(int arr, int i) {\n    if (2 * i + 2 > len(arr)) {\n        return True;\n        left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n        right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2]\n        and check_min_heap(arr, 2 * i + 2))\n        return left_child and right_child;\n    }\n}"}
{"id": "752_java", "language": "Java", "requirement": "Write a function to find the nth jacobsthal number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a324d2`\n   b. Major behaviors: public static int jacobsthal_num(int n) {     dp = [0] * (n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int jacobsthal_num(int n) {\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    // [manual conversion needed for loop]: for i in range(2, n+1):\n    dp[i] = dp[i - 1] + 2 * dp[i - 2]\n    return dp[n];\n}"}
{"id": "753_java", "language": "Java", "requirement": "Write a function to find minimum k records from tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f17b43`\n   b. Major behaviors: public static int min_k(int test_list, int K) {     res = so...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_k(int test_list, int K) {\n    res = sorted(test_list, key = lambda x: x[1])[:K]\n    return (res);\n}"}
{"id": "754_java", "language": "Java", "requirement": "Write a function to find common index elements from three lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d53483`\n   b. Major behaviors: public static int extract_index_list(int l1, int l2, int l3)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int extract_index_list(int l1, int l2, int l3) {\n    result = []\n    // [manual conversion needed for loop]: for m, n, o in zip(l1, l2, l3):\n    if ((m == n == o)) {\n        result.append(m)\n        return result;\n    }\n}"}
{"id": "755_java", "language": "Java", "requirement": "Write a function to find the second smallest number in a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d60d44`\n   b. Major behaviors: public static int second_smallest(int numbers) {     if ((le...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int second_smallest(int numbers) {\n    if ((len(numbers)<2)) {\n        return\n        if (((len(numbers)==2)  and (numbers[0] == numbers[1]) )) {\n            return\n            dup_items = set()\n            uniq_items = []\n            // [manual conversion needed for loop]: for x in numbers:\n            if (x not in dup_items) {\n                uniq_items.append(x)\n                dup_items.add(x)\n                uniq_items.sort()\n                return  uniq_items[1];\n            }\n        }\n    }\n}"}
{"id": "756_java", "language": "Java", "requirement": "Write a function that matches a string that has an a followed by zero or one 'b'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b9e9ff`\n   b. Major behaviors: import re public static int text_match_zero_one(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match_zero_one(int text) {\n    patterns = 'ab?'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return('Not matched!')\n    }\n}"}
{"id": "757_java", "language": "Java", "requirement": "Write a function to count the pairs of reverse strings in the given string list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `897bc9`\n   b. Major behaviors: public static int count_reverse_pairs(int test_list) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_reverse_pairs(int test_list) {\n    res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len(\n    test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))])\n    return str(res);\n}"}
{"id": "758_java", "language": "Java", "requirement": "Write a function to count number of unique lists within a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1bdb23`\n   b. Major behaviors: public static int unique_sublists(int list1) {     result ={...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int unique_sublists(int list1) {\n    result ={}\n    // [manual conversion needed for loop]: for l in  list1:\n    result.setdefault(tuple(l), list()).append(1)\n    // [manual conversion needed for loop]: for a, b in result.items():\n    result[a] = sum(b)\n    return result;\n}"}
{"id": "759_java", "language": "Java", "requirement": "Write a function to check a decimal with a precision of 2.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `050f0d`\n   b. Major behaviors: public static int is_decimal(int num) {     import re     dn...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_decimal(int num) {\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result);\n}"}
{"id": "760_java", "language": "Java", "requirement": "Write a python function to check whether an array contains only one distinct element or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3170fe`\n   b. Major behaviors: public static int unique_Element(int arr, int n) {     s = s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int unique_Element(int arr, int n) {\n    s = set(arr)\n    if ((len(s) == 1)) {\n        return ('YES');\n        } else {\n        return ('NO');\n    }\n}"}
{"id": "761_java", "language": "Java", "requirement": "Write a function to caluclate arc length of an angle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c51c05`\n   b. Major behaviors: public static int arc_length(int d, int a) {     pi=22/7...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int arc_length(int d, int a) {\n    pi=22/7\n    if (a >= 360) {\n        return None;\n        arclength = (pi*d) * (a/360)\n        return arclength;\n    }\n}"}
{"id": "762_java", "language": "Java", "requirement": "Write a function to check whether the given month number contains 30 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c64145`\n   b. Major behaviors: public static int check_monthnumber_number(int monthnum3) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_monthnumber_number(int monthnum3) {\n    if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True;\n    } else {\n    return False;\n}"}
{"id": "763_java", "language": "Java", "requirement": "Write a python function to find the minimum difference between any two elements in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ddc017`\n   b. Major behaviors: public static int find_Min_Diff(int arr, int n) {     arr =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Min_Diff(int arr, int n) {\n    arr = sorted(arr)\n    diff = 10**20\n    // [manual conversion needed for loop]: for i in range(n-1):\n    if (arr[i+1] - arr[i] < diff) {\n        diff = arr[i+1] - arr[i]\n        return diff;\n    }\n}"}
{"id": "764_java", "language": "Java", "requirement": "Write a python function to count numeric values in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `060697`\n   b. Major behaviors: public static int number_ctr(int str) {     number_ctr= 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int number_ctr(int str) {\n    number_ctr= 0\n    // [manual conversion needed for loop]: for i in range(len(str)):\n    if (str[i] >= '0' and str[i] <= '9': number_ctr += 1) {\n        return  number_ctr;\n    }\n}"}
{"id": "765_java", "language": "Java", "requirement": "Write a function to find nth polite number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b173b1`\n   b. Major behaviors: import math public static int is_polite(int n) {     n = n +...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int is_polite(int n) {\n    n = n + 1\n    return (int)(n+(math.log((n + math.log(n, 2)), 2)));\n}"}
{"id": "766_java", "language": "Java", "requirement": "Write a function to iterate over all pairs of consecutive items in a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d2898a`\n   b. Major behaviors: public static int pair_wise(int l1) {     temp = []     // [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int pair_wise(int l1) {\n    temp = []\n    // [manual conversion needed for loop]: for i in range(len(l1) - 1):\n    current_element, next_element = l1[i], l1[i + 1]\n    x = (current_element, next_element)\n    temp.append(x)\n    return temp;\n}"}
{"id": "767_java", "language": "Java", "requirement": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `17d002`\n   b. Major behaviors: public static int get_Pairs_Count(int arr, int n, int sum) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_Pairs_Count(int arr, int n, int sum) {\n    count = 0\n    // [manual conversion needed for loop]: for i in range(0,n):\n    // [manual conversion needed for loop]: for j in range(i + 1,n):\n    if (arr[i] + arr[j] == sum) {\n        count += 1\n        return count;\n    }\n}"}
{"id": "768_java", "language": "Java", "requirement": "Write a python function to check for odd parity of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a80a91`\n   b. Major behaviors: public static int check_Odd_Parity(int x) {     parity = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_Odd_Parity(int x) {\n    parity = 0\n    // [manual conversion needed for while loop]: while (x != 0):\n    x = x & (x - 1)\n    parity += 1\n    if ((parity % 2 == 1)) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "769_java", "language": "Java", "requirement": "Write a python function to get the difference between two lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `90675f`\n   b. Major behaviors: public static int Diff(int li1, int li2) {     return (list(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Diff(int li1, int li2) {\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))));\n}"}
{"id": "770_java", "language": "Java", "requirement": "Write a python function to find the sum of fourth power of first n odd natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c223d4`\n   b. Major behaviors: public static int odd_Num_Sum(int n)) {     j = 0     sm = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int odd_Num_Sum(int n)) {\n    j = 0\n    sm = 0\n    // [manual conversion needed for loop]: for i in range(1,n + 1) :\n    j = (2*i-1)\n    sm = sm + (j*j*j*j)\n    return sm;\n}"}
{"id": "771_java", "language": "Java", "requirement": "Write a function to check if the given expression is balanced or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e3f8dd`\n   b. Major behaviors: from collections import deque public static int check_expres...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import deque\npublic static int check_expression(int exp) {\n    if (len(exp) & 1) {\n        return False;\n        stack = deque()\n        // [manual conversion needed for loop]: for ch in exp:\n        if (ch == '(' or ch == '{' or ch == '[') {\n            stack.append(ch)\n            if (ch == ')' or ch == '}' or ch == ']') {\n                if (not stack) {\n                    return False;\n                    top = stack.pop()\n                    if ((top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']'))) {\n                        return False;\n                        return not stack;\n                    }\n                }\n            }\n        }\n    }\n}"}
{"id": "772_java", "language": "Java", "requirement": "Write a function to remove all the words with k length in the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3fcd11`\n   b. Major behaviors: public static int remove_length(int test_str, int K) {     t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_length(int test_str, int K) {\n    temp = test_str.split()\n    res = [ele for ele in temp if len(ele) != K]\n    res = ' '.join(res)\n    return (res);\n}"}
{"id": "773_java", "language": "Java", "requirement": "Write a function to find the occurrence and position of the substrings within a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e93111`\n   b. Major behaviors: import re public static int occurance_substring(int text, in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int occurance_substring(int text, int pattern) {\n    // [manual conversion needed for loop]: for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e);\n}"}
{"id": "774_java", "language": "Java", "requirement": "Write a function to check if the string is a valid email address or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b228a0`\n   b. Major behaviors: import re regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\npublic static int check_email(int email) {\n    if(re.search(regex,email)):\n    return (\"Valid Email\");\n    } else {\n    return (\"Invalid Email\");\n}"}
{"id": "775_java", "language": "Java", "requirement": "Write a python function to check whether every odd index contains odd numbers of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1e10ba`\n   b. Major behaviors: public static int odd_position(int nums) {     return all(nu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int odd_position(int nums) {\n    return all(nums[i]%2==i%2 for i in range(len(nums)));\n}"}
{"id": "776_java", "language": "Java", "requirement": "Write a function to count those characters which have vowels as their neighbors in the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7d42af`\n   b. Major behaviors: public static int count_vowels(int test_str) {     res = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_vowels(int test_str) {\n    res = 0\n    vow_list = ['a', 'e', 'i', 'o', 'u']\n    // [manual conversion needed for loop]: for idx in range(1, len(test_str) - 1):\n    if (test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list)) {\n        res += 1\n        if (test_str[0] not in vow_list and test_str[1] in vow_list) {\n            res += 1\n            if (test_str[-1] not in vow_list and test_str[-2] in vow_list) {\n                res += 1\n                return (res);\n            }\n        }\n    }\n}"}
{"id": "777_java", "language": "Java", "requirement": "Write a python function to find the sum of non-repeated elements in a given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `43b5f8`\n   b. Major behaviors: public static int find_Sum(int arr, int n) {     arr.sort()...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Sum(int arr, int n) {\n    arr.sort()\n    sum = arr[0]\n    // [manual conversion needed for loop]: for i in range(0,n-1):\n    if ((arr[i] != arr[i+1])) {\n        sum = sum + arr[i+1]\n        return sum;\n    }\n}"}
{"id": "778_java", "language": "Java", "requirement": "Write a function to pack consecutive duplicates of a given list elements into sublists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `680638`\n   b. Major behaviors: from itertools import groupby public static int pack_consecu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby\npublic static int pack_consecutive_duplicates(int list1) {\n    return [list(group) for key, group in groupby(list1)];\n}"}
{"id": "779_java", "language": "Java", "requirement": "Write a function to count the number of unique lists within a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0b405c`\n   b. Major behaviors: public static int unique_sublists(int list1) {     result ={...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int unique_sublists(int list1) {\n    result ={}\n    // [manual conversion needed for loop]: for l in list1:\n    result.setdefault(tuple(l), list()).append(1)\n    // [manual conversion needed for loop]: for a, b in result.items():\n    result[a] = sum(b)\n    return result;\n}"}
{"id": "780_java", "language": "Java", "requirement": "Write a function to find the combinations of sums with tuples in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b5140b`\n   b. Major behaviors: from itertools import combinations public static int find_co...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import combinations\npublic static int find_combinations(int test_list) {\n    res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n    return (res);\n}"}
{"id": "781_java", "language": "Java", "requirement": "Write a python function to check whether the count of divisors is even or odd.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a191e1`\n   b. Major behaviors: import math public static int count_Divisors(int n)) {     c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int count_Divisors(int n)) {\n    count = 0\n    // [manual conversion needed for loop]: for i in range(1, (int)(math.sqrt(n)) + 2) :\n    if ((n % i == 0) ) {\n        if( n // i == i) :\n        count = count + 1\n        } else {\n        count = count + 2\n        if ((count % 2 == 0) ) {\n            return (\"Even\");\n            } else {\n            return (\"Odd\");\n        }\n    }\n}"}
{"id": "782_java", "language": "Java", "requirement": "Write a python function to find the sum of all odd length subarrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2d82ef`\n   b. Major behaviors: public static int Odd_Length_Sum(int arr) {     Sum = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Odd_Length_Sum(int arr) {\n    Sum = 0\n    l = len(arr)\n    // [manual conversion needed for loop]: for i in range(l):\n    Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum;\n}"}
{"id": "783_java", "language": "Java", "requirement": "Write a function to convert rgb color to hsv color.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1994b8`\n   b. Major behaviors: public static int rgb_to_hsv(int r, int g, int b) {     r, g...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rgb_to_hsv(int r, int g, int b) {\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if (mx == mn) {\n        h = 0\n        } else if (mx == r) {\n        h = (60 * ((g-b)/df) + 360) % 360\n        } else if (mx == g) {\n        h = (60 * ((b-r)/df) + 120) % 360\n        } else if (mx == b) {\n        h = (60 * ((r-g)/df) + 240) % 360\n        if (mx == 0) {\n            s = 0\n            } else {\n            s = (df/mx)*100\n            v = mx*100\n            return h, s, v;\n        }\n    }\n}"}
{"id": "784_java", "language": "Java", "requirement": "Write a function to find the product of first even and odd number of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ba0c28`\n   b. Major behaviors: public static int mul_even_odd(int list1) {     first_even =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int mul_even_odd(int list1) {\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd);\n}"}
{"id": "785_java", "language": "Java", "requirement": "Write a function to convert tuple string to integer tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6fcea4`\n   b. Major behaviors: public static int tuple_str_int(int test_str) {     res = tu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tuple_str_int(int test_str) {\n    res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n    return (res);\n}"}
{"id": "786_java", "language": "Java", "requirement": "Write a function to locate the right insertion point for a specified value in sorted order.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `df14bf`\n   b. Major behaviors: import bisect public static int right_insertion(int a, int x...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import bisect\npublic static int right_insertion(int a, int x) {\n    i = bisect.bisect_right(a, x)\n    return i;\n}"}
{"id": "787_java", "language": "Java", "requirement": "Write a function that matches a string that has an a followed by three 'b'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f6b522`\n   b. Major behaviors: import re public static int text_match_three(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match_three(int text) {\n    patterns = 'ab{3}?'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return('Not matched!')\n    }\n}"}
{"id": "788_java", "language": "Java", "requirement": "Write a function to create a new tuple from the given string and list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `877987`\n   b. Major behaviors: public static int new_tuple(int test_list, int test_str) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int new_tuple(int test_list, int test_str) {\n    res = tuple(test_list + [test_str])\n    return (res);\n}"}
{"id": "789_java", "language": "Java", "requirement": "Write a function to calculate the perimeter of a regular polygon.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `80e9ef`\n   b. Major behaviors: from math import tan, pi public static int perimeter_polygon...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from math import tan, pi\npublic static int perimeter_polygon(int s, int l) {\n    perimeter = s*l\n    return perimeter;\n}"}
{"id": "790_java", "language": "Java", "requirement": "Write a python function to check whether every even index contains even numbers of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9c9386`\n   b. Major behaviors: public static int even_position(int nums) {     return all(n...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int even_position(int nums) {\n    return all(nums[i]%2==i%2 for i in range(len(nums)));\n}"}
{"id": "791_java", "language": "Java", "requirement": "Write a function to remove the nested record from the given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `789466`\n   b. Major behaviors: public static int remove_nested(int test_tup) {     res = tu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_nested(int test_tup) {\n    res = tuple()\n    // [manual conversion needed for loop]: for count, ele in enumerate(test_tup):\n    if (not isinstance(ele, tuple)) {\n        res = res + (ele, )\n        return (res);\n    }\n}"}
{"id": "792_java", "language": "Java", "requirement": "Write a python function to count the number of lists in a given number of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `51103c`\n   b. Major behaviors: public static int count_list(int input_list) {     return le...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_list(int input_list) {\n    return len(input_list);\n}"}
{"id": "793_java", "language": "Java", "requirement": "Write a python function to find the last position of an element in a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f3b92e`\n   b. Major behaviors: public static int last(int arr, int x, int n) {     low = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int last(int arr, int x, int n) {\n    low = 0\n    high = n - 1\n    res = -1\n    // [manual conversion needed for while loop]: while (low <= high):\n    mid = (low + high) // 2\n    if (arr[mid] > x) {\n        high = mid - 1\n        } else if (arr[mid] < x) {\n        low = mid + 1\n        } else {\n        res = mid\n        low = mid + 1\n        return res;\n    }\n}"}
{"id": "794_java", "language": "Java", "requirement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9d5022`\n   b. Major behaviors: import re public static int text_starta_endb(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_starta_endb(int text) {\n    patterns = 'a.*?b$'\n    if (re.search(patterns,  text)) {\n        return 'Found a match!';\n        } else {\n        return('Not matched!')\n    }\n}"}
{"id": "795_java", "language": "Java", "requirement": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8da3d0`\n   b. Major behaviors: import heapq public static int cheap_items(int items, int n)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\npublic static int cheap_items(int items, int n) {\n    cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n    return cheap_items;\n}"}
{"id": "796_java", "language": "Java", "requirement": "Write function to find the sum of all items in the given dictionary.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b329de`\n   b. Major behaviors: public static int return_sum(int dict) {     sum = 0     //...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int return_sum(int dict) {\n    sum = 0\n    // [manual conversion needed for loop]: for i in dict.values():\n    sum = sum + i\n    return sum;\n}"}
{"id": "797_java", "language": "Java", "requirement": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `853fa3`\n   b. Major behaviors: public static int sum_Odd(int n) {     terms = (n + 1)//2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_Odd(int n) {\n    terms = (n + 1)//2\n    sum1 = terms * terms\n    return sum1;\n    public static int sum_in_Range(int l, int r) {\n        return sum_Odd(r) - sum_Odd(l - 1);\n    }\n}"}
{"id": "798_java", "language": "Java", "requirement": "Write a python function to find the sum of an array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `96f3d1`\n   b. Major behaviors: public static int _sum(int arr) {     sum=0     // [manual c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int _sum(int arr) {\n    sum=0\n    // [manual conversion needed for loop]: for i in arr:\n    sum = sum + i\n    return(sum)\n}"}
{"id": "799_java", "language": "Java", "requirement": "Write a python function to left rotate the bits of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bc269e`\n   b. Major behaviors: INT_BITS = 32 public static int left_Rotate(int n, int d) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "INT_BITS = 32\npublic static int left_Rotate(int n, int d) {\n    return (n << d)|(n >> (INT_BITS - d));\n}"}
{"id": "800_java", "language": "Java", "requirement": "Write a function to remove all whitespaces from a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a02384`\n   b. Major behaviors: import re public static int remove_all_spaces(int text) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_all_spaces(int text) {\n    return (re.sub(r'\\s+', '',text));\n}"}
{"id": "801_java", "language": "Java", "requirement": "Write a python function to count the number of equal numbers from three given integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `75c9bc`\n   b. Major behaviors: public static int test_three_equal(int x, int y, int z) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int test_three_equal(int x, int y, int z) {\n    result= set([x,y,z])\n    if (len(result)==3) {\n        return 0;\n        } else {\n        return (4-len(result));\n    }\n}"}
{"id": "802_java", "language": "Java", "requirement": "Write a python function to count the number of rotations required to generate a sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5229c6`\n   b. Major behaviors: public static int count_Rotation(int arr, int n) {     // [m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Rotation(int arr, int n) {\n    // [manual conversion needed for loop]: for i in range (1,n):\n    if ((arr[i] < arr[i - 1])) {\n        return i;\n        return 0;\n    }\n}"}
{"id": "803_java", "language": "Java", "requirement": "Write a python function to check whether the given number is a perfect square or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `17c020`\n   b. Major behaviors: public static int is_Perfect_Square(int n)) {     i = 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Perfect_Square(int n)) {\n    i = 1\n    // [manual conversion needed for while loop]: while (i * i<= n):\n    if (((n % i == 0) and (n / i == i))) {\n        return True;\n        i = i + 1\n        return False;\n    }\n}"}
{"id": "804_java", "language": "Java", "requirement": "Write a python function to check whether the product of numbers is even or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b1d933`\n   b. Major behaviors: public static int is_Product_Even(int arr, int n) {     // [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Product_Even(int arr, int n) {\n    // [manual conversion needed for loop]: for i in range(0,n):\n    if (((arr[i] & 1) == 0)) {\n        return True;\n        return False;\n    }\n}"}
{"id": "805_java", "language": "Java", "requirement": "Write a function to find the list in a list of lists whose sum of elements is the highest.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6d0c95`\n   b. Major behaviors: public static int max_sum_list(int lists) {     return max(l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sum_list(int lists) {\n    return max(lists, key=sum);\n}"}
{"id": "806_java", "language": "Java", "requirement": "Write a function to find maximum run of uppercase characters in the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a7958f`\n   b. Major behaviors: public static int max_run_uppercase(int test_str) {     cnt...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_run_uppercase(int test_str) {\n    cnt = 0\n    res = 0\n    // [manual conversion needed for loop]: for idx in range(0, len(test_str)):\n    if (test_str[idx].isupper()) {\n        cnt += 1\n        } else {\n        res = cnt\n        cnt = 0\n        if (test_str[len(test_str) - 1].isupper()) {\n            res = cnt\n            return (res);\n        }\n    }\n}"}
{"id": "807_java", "language": "Java", "requirement": "Write a python function to find the first odd number in a given list of numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6d233c`\n   b. Major behaviors: public static int first_odd(int nums) {     first_odd = next...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int first_odd(int nums) {\n    first_odd = next((el for el in nums if el%2!=0),-1)\n    return first_odd;\n}"}
{"id": "808_java", "language": "Java", "requirement": "Write a function to check if the given tuples contain the k or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5e0ede`\n   b. Major behaviors: public static int check_K(int test_tup, int K) {     res = F...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_K(int test_tup, int K) {\n    res = False\n    // [manual conversion needed for loop]: for ele in test_tup:\n    if (ele == K) {\n        res = True\n        break\n        return (res);\n    }\n}"}
{"id": "809_java", "language": "Java", "requirement": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `63a864`\n   b. Major behaviors: public static int check_smaller(int test_tup1, int test_tup2...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_smaller(int test_tup1, int test_tup2) {\n    res = all(x > y for x, y in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "810_java", "language": "Java", "requirement": "Write a function to iterate over elements repeating each as many times as its count.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c5aabe`\n   b. Major behaviors: from collections import Counter public static int count_vari...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\npublic static int count_variable(int a, int b, int c, int d) {\n    c = Counter(p=a, q=b, r=c, s=d)\n    return list(c.elements());\n}"}
{"id": "811_java", "language": "Java", "requirement": "Write a function to check if two lists of tuples are identical or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b73102`\n   b. Major behaviors: public static int check_identical(int test_list1, int test_l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_identical(int test_list1, int test_list2) {\n    res = test_list1 == test_list2\n    return (res);\n}"}
{"id": "812_java", "language": "Java", "requirement": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc810a`\n   b. Major behaviors: import re public static int road_rd(int street) {     return...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int road_rd(int street) {\n    return (re.sub('Road$', 'Rd.', street));\n}"}
{"id": "813_java", "language": "Java", "requirement": "Write a function to find length of the string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5b8ffa`\n   b. Major behaviors: public static int string_length(int str1) {     count = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int string_length(int str1) {\n    count = 0\n    // [manual conversion needed for loop]: for char in str1:\n    count += 1\n    return count;\n}"}
{"id": "814_java", "language": "Java", "requirement": "Write a function to find the area of a rombus.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ae1b4d`\n   b. Major behaviors: public static int rombus_area(int p, int q) {     area=(p*q)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rombus_area(int p, int q) {\n    area=(p*q)/2\n    return area;\n}"}
{"id": "815_java", "language": "Java", "requirement": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fb51b5`\n   b. Major behaviors: public static int sort_by_dnf(int arr, int n) {     low=0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_by_dnf(int arr, int n) {\n    low=0\n    mid=0\n    high=n-1\n    // [manual conversion needed for while loop]: while mid <= high:\n    if (arr[mid] == 0) {\n        arr[low], arr[mid] = arr[mid], arr[low]\n        low = low + 1\n        mid = mid + 1\n        } else if (arr[mid] == 1) {\n        mid = mid + 1\n        } else {\n        arr[mid], arr[high] = arr[high], arr[mid]\n        high = high - 1\n        return arr;\n    }\n}"}
{"id": "816_java", "language": "Java", "requirement": "Write a function to clear the values of the given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `82f797`\n   b. Major behaviors: public static int clear_tuple(int test_tup) {     temp = lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int clear_tuple(int test_tup) {\n    temp = list(test_tup)\n    temp.clear()\n    test_tup = tuple(temp)\n    return (test_tup);\n}"}
{"id": "817_java", "language": "Java", "requirement": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0af571`\n   b. Major behaviors: public static int div_of_nums(int nums, int m, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int div_of_nums(int nums, int m, int n) {\n    result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))\n    return result;\n}"}
{"id": "818_java", "language": "Java", "requirement": "Write a python function to count lower case letters in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ab0281`\n   b. Major behaviors: public static int lower_ctr(int str) {     lower_ctr= 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int lower_ctr(int str) {\n    lower_ctr= 0\n    // [manual conversion needed for loop]: for i in range(len(str)):\n    if (str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1) {\n        return  lower_ctr;\n    }\n}"}
{"id": "819_java", "language": "Java", "requirement": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `819795`\n   b. Major behaviors: public static int count_duplic(int lists) {     element = []...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_duplic(int lists) {\n    element = []\n    frequency = []\n    if (not lists) {\n        return element;\n        running_count = 1\n        // [manual conversion needed for loop]: for i in range(len(lists)-1):\n        if (lists[i] == lists[i+1]) {\n            running_count += 1\n            } else {\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n            frequency.append(running_count)\n            element.append(lists[i+1])\n            return element,frequency;\n        }\n    }\n}"}
{"id": "820_java", "language": "Java", "requirement": "Write a function to check whether the given month number contains 28 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a9483d`\n   b. Major behaviors: public static int check_monthnum_number(int monthnum1) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_monthnum_number(int monthnum1) {\n    if (monthnum1 == 2) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "821_java", "language": "Java", "requirement": "Write a function to merge two dictionaries into a single expression.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e5d88a`\n   b. Major behaviors: import collections as ct public static int merge_dictionarie...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import collections as ct\npublic static int merge_dictionaries(int dict1, int dict2) {\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict;\n}"}
{"id": "822_java", "language": "Java", "requirement": "Write a function to return true if the password is valid.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3e7722`\n   b. Major behaviors: import re public static int pass_validity(int p) {     x = T...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int pass_validity(int p) {\n    x = True\n    // [manual conversion needed for while loop]: while x:\n    if ((len(p)<6 or len(p)>12)) {\n        break\n        } else if (not re.search(\"[a-z]\",p)) {\n        break\n        } else if (not re.search(\"[0-9]\",p)) {\n        break\n        } else if (not re.search(\"[A-Z]\",p)) {\n        break\n        } else if (not re.search(\"[$#@]\",p)) {\n        break\n        } else if (re.search(\"\\s\",p)) {\n        break\n        } else {\n        return True;\n        x=False\n        break\n\n        if (x) {\n            return False;\n        }\n    }\n}"}
{"id": "823_java", "language": "Java", "requirement": "Write a function to check if the given string starts with a substring using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `95b286`\n   b. Major behaviors: import re public static int check_substring(int string, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int check_substring(int string, int sample)) {\n    if ((sample in string)) {\n        y = \"\\A\" + sample\n        x = re.search(y, string)\n        if (x ) {\n            return (\"string starts with the given substring\");\n            } else {\n            return (\"string doesnt start with the given substring\");\n            } else {\n            return (\"entered string isnt a substring\");\n        }\n    }\n}"}
{"id": "824_java", "language": "Java", "requirement": "Write a python function to remove even numbers from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b37c7a`\n   b. Major behaviors: public static int remove_even(int l) {     // [manual conver...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_even(int l) {\n    // [manual conversion needed for loop]: for i in l:\n    if (i % 2 == 0) {\n        l.remove(i)\n        return l;\n    }\n}"}
{"id": "825_java", "language": "Java", "requirement": "Write a python function to access multiple elements of specified index from a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `890b66`\n   b. Major behaviors: public static int access_elements(int nums, int list_index)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int access_elements(int nums, int list_index) {\n    result = [nums[i] for i in list_index]\n    return result;\n}"}
{"id": "826_java", "language": "Java", "requirement": "Write a python function to find the type of triangle from the given sides.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7b1d07`\n   b. Major behaviors: public static int check_Type_Of_Triangle(int a, int b, int c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_Type_Of_Triangle(int a, int b, int c) {\n    sqa = pow(a,2)\n    sqb = pow(b,2)\n    sqc = pow(c,2)\n    if ((sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb)) {\n        return (\"Right-angled Triangle\");\n        } else if ((sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb)) {\n        return (\"Obtuse-angled Triangle\");\n        } else {\n        return (\"Acute-angled Triangle\");\n    }\n}"}
{"id": "827_java", "language": "Java", "requirement": "Write a function to sum a specific column of a list in a given list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a11b72`\n   b. Major behaviors: public static int sum_column(int list1, int C) {     result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_column(int list1, int C) {\n    result = sum(row[C] for row in list1)\n    return result;\n}"}
{"id": "828_java", "language": "Java", "requirement": "Write a function to count alphabets,digits and special charactes in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a59c78`\n   b. Major behaviors: public static int count_alpha_dig_spl(int string) {     alph...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_alpha_dig_spl(int string) {\n    alphabets=digits = special = 0\n    // [manual conversion needed for loop]: for i in range(len(string)):\n    if(string[i].isalpha()):\n    alphabets = alphabets + 1\n    elif(string[i].isdigit()):\n    digits = digits + 1\n    } else {\n    special = special + 1\n    return (alphabets,digits,special);\n}"}
{"id": "829_java", "language": "Java", "requirement": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `52d38f`\n   b. Major behaviors: from collections import Counter  public static int second_fr...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\n\npublic static int second_frequent(int input) {\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    // [manual conversion needed for loop]: for (key, val) in dict.items():\n    if (val == second_large) {\n        return (key);\n    }\n}"}
{"id": "830_java", "language": "Java", "requirement": "Write a function to round up a number to specific digits.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `34cadd`\n   b. Major behaviors: import math public static int round_up(int a, int digits) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int round_up(int a, int digits) {\n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits);\n}"}
{"id": "831_java", "language": "Java", "requirement": "Write a python function to count equal element pairs from the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `33b1d8`\n   b. Major behaviors: public static int count_Pairs(int arr, int n) {     cnt = 0;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Pairs(int arr, int n) {\n    cnt = 0;\n    // [manual conversion needed for loop]: for i in range(n):\n    // [manual conversion needed for loop]: for j in range(i + 1,n):\n    if ((arr[i] == arr[j])) {\n        cnt += 1;\n        return cnt;;\n    }\n}"}
{"id": "832_java", "language": "Java", "requirement": "Write a function to extract the maximum numeric value from a string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bb06a1`\n   b. Major behaviors: import re public static int extract_max(int input) {     num...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int extract_max(int input) {\n    numbers = re.findall('\\d+',input)\n    numbers = map(int,numbers)\n    return max(numbers);\n}"}
{"id": "833_java", "language": "Java", "requirement": "Write a function to get dictionary keys as a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4a8bf9`\n   b. Major behaviors: public static int get_key(int dict) {     list = []     // [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_key(int dict) {\n    list = []\n    // [manual conversion needed for loop]: for key in dict.keys():\n    list.append(key)\n    return list;\n}"}
{"id": "834_java", "language": "Java", "requirement": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f59006`\n   b. Major behaviors: public static int generate_matrix(int n) {     if (n<=0) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int generate_matrix(int n) {\n    if (n<=0) {\n        return [];\n        matrix=[row[:] for row in [[0]*n]*n]\n        row_st=0\n        row_ed=n-1\n        col_st=0\n        col_ed=n-1\n        current=1\n        // [manual conversion needed for while loop]: while (True):\n        if (current>n*n) {\n            break\n            // [manual conversion needed for loop]: for c in range (col_st, col_ed+1):\n            matrix[row_st][c]=current\n            current+=1\n            row_st+=1\n            // [manual conversion needed for loop]: for r in range (row_st, row_ed+1):\n            matrix[r][col_ed]=current\n            current+=1\n            col_ed-=1\n            // [manual conversion needed for loop]: for c in range (col_ed, col_st-1, -1):\n            matrix[row_ed][c]=current\n            current+=1\n            row_ed-=1\n            // [manual conversion needed for loop]: for r in range (row_ed, row_st-1, -1):\n            matrix[r][col_st]=current\n            current+=1\n            col_st+=1\n            return matrix;\n        }\n    }\n}"}
{"id": "835_java", "language": "Java", "requirement": "Write a python function to find the slope of a line.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `de2959`\n   b. Major behaviors: public static int slope(int x1, int y1, int x2, int y2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int slope(int x1, int y1, int x2, int y2) {\n    return (float)(y2-y1)/(x2-x1);\n}"}
{"id": "836_java", "language": "Java", "requirement": "Write a function to find length of the subarray having maximum sum.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e4adbd`\n   b. Major behaviors: from sys import maxsize public static int max_sub_array_sum(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from sys import maxsize\npublic static int max_sub_array_sum(int a, int size) {\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    // [manual conversion needed for loop]: for i in range(0,size):\n    max_ending_here += a[i]\n    if (max_so_far < max_ending_here) {\n        max_so_far = max_ending_here\n        start = s\n        end = i\n        if (max_ending_here < 0) {\n            max_ending_here = 0\n            s = i+1\n            return (end - start + 1);\n        }\n    }\n}"}
{"id": "837_java", "language": "Java", "requirement": "Write a python function to find the cube sum of first n odd natural numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a70d84`\n   b. Major behaviors: public static int cube_Sum(int n) {     sum = 0     // [manu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int cube_Sum(int n) {\n    sum = 0\n    // [manual conversion needed for loop]: for i in range(0,n) :\n    sum += (2*i+1)*(2*i+1)*(2*i+1)\n    return sum;\n}"}
{"id": "838_java", "language": "Java", "requirement": "Write a python function to find minimum number swaps required to make two binary strings equal.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `23879c`\n   b. Major behaviors: public static int min_Swaps(int s1, int s2)) {     c0 = 0; c...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_Swaps(int s1, int s2)) {\n    c0 = 0; c1 = 0;\n    // [manual conversion needed for loop]: for i in range(len(s1)) :\n    if ((s1[i] == '0' and s2[i] == '1') ) {\n        c0 += 1;\n        } else if ((s1[i] == '1' and s2[i] == '0') ) {\n        c1 += 1;\n        result = c0 // 2 + c1 // 2;\n        if ((c0 % 2 == 0 and c1 % 2 == 0) ) {\n            return result;;\n            } else if (((c0 + c1) % 2 == 0) ) {\n            return result + 2;;\n            } else {\n            return -1;;\n        }\n    }\n}"}
{"id": "839_java", "language": "Java", "requirement": "Write a function to sort the tuples alphabetically by the first item of each tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `803e5b`\n   b. Major behaviors: public static int sort_tuple(int tup) {     n = len(tup)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_tuple(int tup) {\n    n = len(tup)\n    // [manual conversion needed for loop]: for i in range(n):\n    // [manual conversion needed for loop]: for j in range(n-i-1):\n    if (tup[j][0] > tup[j + 1][0]) {\n        tup[j], tup[j + 1] = tup[j + 1], tup[j]\n        return tup;\n    }\n}"}
{"id": "840_java", "language": "Java", "requirement": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a186d2`\n   b. Major behaviors: public static int Check_Solution(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Check_Solution(int a, int b, int c) {\n    if (b == 0) {\n        return (\"Yes\");\n        } else {\n        return (\"No\");\n    }\n}"}
{"id": "841_java", "language": "Java", "requirement": "Write a function to count the number of inversions in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3d19bd`\n   b. Major behaviors: public static int get_inv_count(int arr, int n) {     inv_co...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_inv_count(int arr, int n) {\n    inv_count = 0\n    // [manual conversion needed for loop]: for i in range(n):\n    // [manual conversion needed for loop]: for j in range(i + 1, n):\n    if ((arr[i] > arr[j])) {\n        inv_count += 1\n        return inv_count;\n    }\n}"}
{"id": "842_java", "language": "Java", "requirement": "Write a function to find the number which occurs for odd number of times in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3c1afe`\n   b. Major behaviors: public static int get_odd_occurence(int arr, int arr_size) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_odd_occurence(int arr, int arr_size) {\n    // [manual conversion needed for loop]: for i in range(0, arr_size):\n    count = 0\n    // [manual conversion needed for loop]: for j in range(0, arr_size):\n    if (arr[i] == arr[j]) {\n        count += 1\n        if ((count % 2 != 0)) {\n            return arr[i];\n            return -1;\n        }\n    }\n}"}
{"id": "843_java", "language": "Java", "requirement": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d8e8f8`\n   b. Major behaviors: import heapq public static int nth_super_ugly_number(int n,...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq\npublic static int nth_super_ugly_number(int n, int primes) {\n    uglies = [1]\n    public static int gen(int prime) {\n        // [manual conversion needed for loop]: for ugly in uglies:\n        yield ugly * prime\n        merged = heapq.merge(*map(gen, primes))\n        // [manual conversion needed for while loop]: while len(uglies) < n:\n        ugly = next(merged)\n        if (ugly != uglies[-1]) {\n            uglies.append(ugly)\n            return uglies[-1];\n        }\n    }\n}"}
{"id": "844_java", "language": "Java", "requirement": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `682ab1`\n   b. Major behaviors: public static int get_Number(int n, int k) {     arr = [0] *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_Number(int n, int k) {\n    arr = [0] * n;\n    i = 0;\n    odd = 1;\n    // [manual conversion needed for while loop]: while (odd <= n):\n    arr[i] = odd;\n    i += 1;\n    odd += 2;\n    even = 2;\n    // [manual conversion needed for while loop]: while (even <= n):\n    arr[i] = even;\n    i += 1;\n    even += 2;\n    return arr[k - 1];;\n}"}
{"id": "845_java", "language": "Java", "requirement": "Write a python function to count the number of digits in factorial of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8538a2`\n   b. Major behaviors: import math public static int find_Digits(int n) {     if ((...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int find_Digits(int n) {\n    if ((n < 0)) {\n        return 0;;\n        if ((n <= 1)) {\n            return 1;;\n            x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0));\n            return math.floor(x) + 1;;\n        }\n    }\n}"}
{"id": "846_java", "language": "Java", "requirement": "Write a function to find the minimum number of platforms required for a railway/bus station.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1fcb6f`\n   b. Major behaviors: public static int find_platform(int arr, int dep, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_platform(int arr, int dep, int n) {\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    // [manual conversion needed for while loop]: while (i < n and j < n):\n    if ((arr[i] <= dep[j])) {\n        plat_needed+= 1\n        i+= 1\n        } else if ((arr[i] > dep[j])) {\n        plat_needed-= 1\n        j+= 1\n        if ((plat_needed > result)) {\n            result = plat_needed\n            return result;\n        }\n    }\n}"}
{"id": "847_java", "language": "Java", "requirement": "Write a python function to copy a list from a singleton tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `35695c`\n   b. Major behaviors: public static int lcopy(int xs) {     return xs[:]; }...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int lcopy(int xs) {\n    return xs[:];\n}"}
{"id": "848_java", "language": "Java", "requirement": "Write a function to find the area of a trapezium.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `29a03f`\n   b. Major behaviors: public static int area_trapezium(int base1, int base2, int h...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int area_trapezium(int base1, int base2, int height) {\n    area = 0.5 * (base1 + base2) * height\n    return area;\n}"}
{"id": "849_java", "language": "Java", "requirement": "Write a python function to find sum of all prime divisors of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `62cb03`\n   b. Major behaviors: public static int Sum(int N) {     SumOfPrimeDivisors = [0]*...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Sum(int N) {\n    SumOfPrimeDivisors = [0]*(N + 1)\n    // [manual conversion needed for loop]: for i in range(2,N + 1) :\n    if ((SumOfPrimeDivisors[i] == 0) ) {\n        // [manual conversion needed for loop]: for j in range(i,N + 1,i) :\n        SumOfPrimeDivisors[j] += i\n        return SumOfPrimeDivisors[N];\n    }\n}"}
{"id": "850_java", "language": "Java", "requirement": "Write a function to check if a triangle of positive area is possible with the given angles.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4ae209`\n   b. Major behaviors: public static int is_triangleexists(int a, int b, int c) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_triangleexists(int a, int b, int c) {\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180):\n    if((a + b)>= c or (b + c)>= a or (a + c)>= b):\n    return True;\n    } else {\n    return False;\n    } else {\n    return False;\n}"}
{"id": "851_java", "language": "Java", "requirement": "Write a python function to find sum of inverse of divisors.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `09db20`\n   b. Major behaviors: public static int Sum_of_Inverse_Divisors(int N, int Sum) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Sum_of_Inverse_Divisors(int N, int Sum) {\n    ans = float(Sum)*1.0 /float(N);\n    return round(ans,2);;\n}"}
{"id": "852_java", "language": "Java", "requirement": "Write a python function to remove negative numbers from a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d7c5da`\n   b. Major behaviors: public static int remove_negs(int num_list) {     // [manual...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_negs(int num_list) {\n    // [manual conversion needed for loop]: for item in num_list:\n    if (item < 0) {\n        num_list.remove(item)\n        return num_list;\n    }\n}"}
{"id": "853_java", "language": "Java", "requirement": "Write a python function to find sum of odd factors of a number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `17716f`\n   b. Major behaviors: import math public static int sum_of_odd_Factors(int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int sum_of_odd_Factors(int n) {\n    res = 1\n    // [manual conversion needed for while loop]: while n % 2 == 0:\n    n = n // 2\n    // [manual conversion needed for loop]: for i in range(3,int(math.sqrt(n) + 1)):\n    count = 0\n    curr_sum = 1\n    curr_term = 1\n    // [manual conversion needed for while loop]: while n % i == 0:\n    count+=1\n    n = n // i\n    curr_term *= i\n    curr_sum += curr_term\n    res *= curr_sum\n    if (n >= 2) {\n        res *= (1 + n)\n        return res;\n    }\n}"}
{"id": "854_java", "language": "Java", "requirement": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4cceb1`\n   b. Major behaviors: import heapq as hq public static int raw_heap(int rawheap) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import heapq as hq\npublic static int raw_heap(int rawheap) {\n    hq.heapify(rawheap)\n    return rawheap;\n}"}
{"id": "855_java", "language": "Java", "requirement": "Write a python function to check for even parity of a given number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `13c256`\n   b. Major behaviors: public static int check_Even_Parity(int x) {     parity = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_Even_Parity(int x) {\n    parity = 0\n    // [manual conversion needed for while loop]: while (x != 0):\n    x = x & (x - 1)\n    parity += 1\n    if ((parity % 2 == 0)) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "856_java", "language": "Java", "requirement": "Write a python function to find minimum adjacent swaps required to sort binary array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f5d024`\n   b. Major behaviors: public static int find_Min_Swaps(int arr, int n)) {     noOf...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Min_Swaps(int arr, int n)) {\n    noOfZeroes = [0] * n\n    count = 0\n    noOfZeroes[n - 1] = 1 - arr[n - 1]\n    // [manual conversion needed for loop]: for i in range(n-2,-1,-1) :\n    noOfZeroes[i] = noOfZeroes[i + 1]\n    if ((arr[i] == 0) ) {\n        noOfZeroes[i] = noOfZeroes[i] + 1\n        // [manual conversion needed for loop]: for i in range(0,n) :\n        if ((arr[i] == 1) ) {\n            count = count + noOfZeroes[i]\n            return count;\n        }\n    }\n}"}
{"id": "857_java", "language": "Java", "requirement": "Write a function to list out the list of given strings individually using map function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `53ac90`\n   b. Major behaviors: public static int listify_list(int list1) {     result = lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int listify_list(int list1) {\n    result = list(map(list,list1))\n    return result;\n}"}
{"id": "858_java", "language": "Java", "requirement": "Write a function to count number of lists in a given list of lists and square the count.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `38abd7`\n   b. Major behaviors: public static int count_list(int input_list) {     return (l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_list(int input_list) {\n    return (len(input_list))**2;\n}"}
{"id": "859_java", "language": "Java", "requirement": "Write a function to generate all sublists of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9cae59`\n   b. Major behaviors: from itertools import combinations public static int sub_lis...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import combinations\npublic static int sub_lists(int my_list) {\n    subs = []\n    // [manual conversion needed for loop]: for i in range(0, len(my_list)+1):\n    temp = [list(x) for x in combinations(my_list, i)]\n    if (len(temp)>0) {\n        subs.extend(temp)\n        return subs;\n    }\n}"}
{"id": "860_java", "language": "Java", "requirement": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bcb1fc`\n   b. Major behaviors: import re regex = '[a-zA-z0-9]$' public static int check_alp...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\nregex = '[a-zA-z0-9]$'\npublic static int check_alphanumeric(int string) {\n    if(re.search(regex, string)):\n    return (\"Accept\");\n    } else {\n    return (\"Discard\");\n}"}
{"id": "861_java", "language": "Java", "requirement": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `013f19`\n   b. Major behaviors: from collections import Counter public static int anagram_la...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\npublic static int anagram_lambda(int texts, int str) {\n    result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n    return result;\n}"}
{"id": "862_java", "language": "Java", "requirement": "Write a function to find the occurrences of n most common words in a given text.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `94a484`\n   b. Major behaviors: from collections import Counter import re public static int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\nimport re\npublic static int n_common_words(int text, int n) {\n    words = re.findall('\\w+',text)\n    n_common_words= Counter(words).most_common(n)\n    return list(n_common_words);\n}"}
{"id": "863_java", "language": "Java", "requirement": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0bb1cc`\n   b. Major behaviors: public static int find_longest_conseq_subseq(int arr, int n)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_longest_conseq_subseq(int arr, int n) {\n    ans = 0\n    count = 0\n    arr.sort()\n    v = []\n    v.append(arr[0])\n    // [manual conversion needed for loop]: for i in range(1, n):\n    if ((arr[i] != arr[i - 1])) {\n        v.append(arr[i])\n        // [manual conversion needed for loop]: for i in range(len(v)):\n        if ((i > 0 and v[i] == v[i - 1] + 1)) {\n            count += 1\n            } else {\n            count = 1\n            ans = max(ans, count)\n            return ans;\n        }\n    }\n}"}
{"id": "864_java", "language": "Java", "requirement": "Write a function to find palindromes in a given list of strings using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3376d4`\n   b. Major behaviors: public static int palindrome_lambda(int texts) {     result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int palindrome_lambda(int texts) {\n    result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n    return result;\n}"}
{"id": "865_java", "language": "Java", "requirement": "Write a function to print n-times a list using map function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `299732`\n   b. Major behaviors: public static int ntimes_list(int nums, int n) {     result...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int ntimes_list(int nums, int n) {\n    result = map(lambda x:n*x, nums)\n    return list(result);\n}"}
{"id": "866_java", "language": "Java", "requirement": "Write a function to check whether the given month name contains 31 days or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dad290`\n   b. Major behaviors: public static int check_monthnumb(int monthname2) {     if(m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_monthnumb(int monthname2) {\n    if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\n    return True;\n    } else {\n    return False;\n}"}
{"id": "867_java", "language": "Java", "requirement": "Write a python function to add a minimum number such that the sum of array becomes even.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `be63f0`\n   b. Major behaviors: public static int min_Num(int arr, int n) {     odd = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_Num(int arr, int n) {\n    odd = 0\n    // [manual conversion needed for loop]: for i in range(n):\n    if ((arr[i] % 2)) {\n        odd += 1\n        if ((odd % 2)) {\n            return 1;\n            return 2;\n        }\n    }\n}"}
{"id": "868_java", "language": "Java", "requirement": "Write a python function to find the length of the last word in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ecd96c`\n   b. Major behaviors: public static int length_Of_Last_Word(int a) {     l = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int length_Of_Last_Word(int a) {\n    l = 0\n    x = a.strip()\n    // [manual conversion needed for loop]: for i in range(len(x)):\n    if (x[i] == \" \") {\n        l = 0\n        } else {\n        l += 1\n        return l;\n    }\n}"}
{"id": "869_java", "language": "Java", "requirement": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `805042`\n   b. Major behaviors: public static int remove_list_range(int list1, int leftrange...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_list_range(int list1, int leftrange, int rigthrange) {\n    result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n    return result;\n}"}
{"id": "870_java", "language": "Java", "requirement": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `96ca6d`\n   b. Major behaviors: public static int sum_positivenum(int nums) {     sum_positi...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_positivenum(int nums) {\n    sum_positivenum = list(filter(lambda nums:nums>0,nums))\n    return sum(sum_positivenum);\n}"}
{"id": "871_java", "language": "Java", "requirement": "Write a python function to check whether the given strings are rotations of each other or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f11f17`\n   b. Major behaviors: public static int are_Rotations(int string1, int string2) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int are_Rotations(int string1, int string2) {\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = ''\n    if (size1 != size2) {\n        return False;\n        temp = string1 + string1\n        if ((temp.count(string2)> 0)) {\n            return True;\n            } else {\n            return False;\n        }\n    }\n}"}
{"id": "872_java", "language": "Java", "requirement": "Write a function to check if a nested list is a subset of another nested list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `dd02d1`\n   b. Major behaviors: public static int check_subset(int list1, int list2) {     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_subset(int list1, int list2) {\n    return all(map(list1.__contains__,list2));\n}"}
{"id": "873_java", "language": "Java", "requirement": "Write a function to solve the fibonacci sequence using recursion.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `85d10f`\n   b. Major behaviors: public static int fibonacci(int n) {     if (n == 1 or n ==...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int fibonacci(int n) {\n    if (n == 1 or n == 2) {\n        return 1;\n        } else {\n        return (fibonacci(n - 1) + (fibonacci(n - 2)));\n    }\n}"}
{"id": "874_java", "language": "Java", "requirement": "Write a python function to check if the string is a concatenation of another string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3182e7`\n   b. Major behaviors: public static int check_Concat(int str1, int str2) {     N =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_Concat(int str1, int str2) {\n    N = len(str1)\n    M = len(str2)\n    if ((N % M != 0)) {\n        return False;\n        // [manual conversion needed for loop]: for i in range(N):\n        if ((str1[i] != str2[i % M])) {\n            return False;\n            return True;\n        }\n    }\n}"}
{"id": "875_java", "language": "Java", "requirement": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `433c04`\n   b. Major behaviors: public static int min_difference(int test_list) {     temp =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_difference(int test_list) {\n    temp = [abs(b - a) for a, b in test_list]\n    res = min(temp)\n    return (res);\n}"}
{"id": "876_java", "language": "Java", "requirement": "Write a python function to find lcm of two positive integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1104fd`\n   b. Major behaviors: public static int lcm(int x, int y) {     if (x > y) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int lcm(int x, int y) {\n    if (x > y) {\n        z = x\n        } else {\n        z = y\n        while(True):\n        if((z % x == 0) and (z % y == 0)):\n        lcm = z\n        break\n        z += 1\n        return lcm;\n    }\n}"}
{"id": "877_java", "language": "Java", "requirement": "Write a python function to sort the given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9e9d88`\n   b. Major behaviors: public static int sort_String(int str)) {     str = ''.join(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sort_String(int str)) {\n    str = ''.join(sorted(str))\n    return (str);\n}"}
{"id": "878_java", "language": "Java", "requirement": "Write a function to check if the given tuple contains only k elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2b995e`\n   b. Major behaviors: public static int check_tuples(int test_tuple, int K) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_tuples(int test_tuple, int K) {\n    res = all(ele in K for ele in test_tuple)\n    return (res);\n}"}
{"id": "879_java", "language": "Java", "requirement": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f21ce5`\n   b. Major behaviors: import re public static int text_match(int text) {     patte...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match(int text) {\n    patterns = 'a.*?b$'\n    if (re.search(patterns,  text)) {\n        return ('Found a match!');\n        } else {\n        return ('Not matched!');\n    }\n}"}
{"id": "880_java", "language": "Java", "requirement": "Write a python function to find number of solutions in quadratic equation.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `54bbeb`\n   b. Major behaviors: public static int Check_Solution(int a, int b, int c)) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Check_Solution(int a, int b, int c)) {\n    if (((b*b) - (4*a*c)) > 0 ) {\n        return (\"2 solutions\");\n        } else if (((b*b) - (4*a*c)) == 0 ) {\n        return (\"1 solution\");\n        } else {\n        return (\"No solutions\");\n    }\n}"}
{"id": "881_java", "language": "Java", "requirement": "Write a function to find the sum of first even and odd number of a given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0cc79f`\n   b. Major behaviors: public static int sum_even_odd(int list1) {     first_even =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_even_odd(int list1) {\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd);\n}"}
{"id": "882_java", "language": "Java", "requirement": "Write a function to caluclate perimeter of a parallelogram.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a0dcad`\n   b. Major behaviors: public static int parallelogram_perimeter(int b, int h) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int parallelogram_perimeter(int b, int h) {\n    perimeter=2*(b*h)\n    return perimeter;\n}"}
{"id": "883_java", "language": "Java", "requirement": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `780b46`\n   b. Major behaviors: public static int div_of_nums(int nums, int m, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int div_of_nums(int nums, int m, int n) {\n    result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums))\n    return result;\n}"}
{"id": "884_java", "language": "Java", "requirement": "Write a python function to check whether all the bits are within a given range or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `270146`\n   b. Major behaviors: public static int all_Bits_Set_In_The_Given_Range(int n, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int all_Bits_Set_In_The_Given_Range(int n, int l, int r) {\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if ((num == new_num)) {\n        return True;\n        return False;\n    }\n}"}
{"id": "885_java", "language": "Java", "requirement": "Write a python function to check whether the two given strings are isomorphic to each other or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5afe4e`\n   b. Major behaviors: public static int is_Isomorphic(int str1, int str2) {     di...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Isomorphic(int str1, int str2) {\n    dict_str1 = {}\n    dict_str2 = {}\n    // [manual conversion needed for loop]: for i, value in enumerate(str1):\n    dict_str1[value] = dict_str1.get(value,[]) + [i]\n    // [manual conversion needed for loop]: for j, value in enumerate(str2):\n    dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if (sorted(dict_str1.values()) == sorted(dict_str2.values())) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "886_java", "language": "Java", "requirement": "Write a function to add all the numbers in a list and divide it with the length of the list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `85189e`\n   b. Major behaviors: public static int sum_num(int numbers) {     total = 0     /...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_num(int numbers) {\n    total = 0\n    // [manual conversion needed for loop]: for x in numbers:\n    total += x\n    return total/len(numbers);\n}"}
{"id": "887_java", "language": "Java", "requirement": "Write a python function to check whether the given number is odd or not using bitwise operator.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `90a6fa`\n   b. Major behaviors: public static int is_odd(int n)) {     if ((n^1 == n-1) ) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_odd(int n)) {\n    if ((n^1 == n-1) ) {\n        return True;;\n        } else {\n        return False;;\n    }\n}"}
{"id": "888_java", "language": "Java", "requirement": "Write a function to substract the elements of the given nested tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e98dab`\n   b. Major behaviors: public static int substract_elements(int test_tup1, int test...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int substract_elements(int test_tup1, int test_tup2) {\n    res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n    // [manual conversion needed for loop]: for tup1, tup2 in zip(test_tup1, test_tup2))\n    return (res);\n}"}
{"id": "889_java", "language": "Java", "requirement": "Write a function to reverse each list in a given list of lists.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ac32d5`\n   b. Major behaviors: public static int reverse_list_lists(int lists) {     // [ma...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int reverse_list_lists(int lists) {\n    // [manual conversion needed for loop]: for l in lists:\n    l.sort(reverse = True)\n    return lists;\n}"}
{"id": "890_java", "language": "Java", "requirement": "Write a python function to find the index of an extra element present in one sorted array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cf4c67`\n   b. Major behaviors: public static int find_Extra(int arr1, int arr2, int n)) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_Extra(int arr1, int arr2, int n)) {\n    // [manual conversion needed for loop]: for i in range(0, n) :\n    if ((arr1[i] != arr2[i]) ) {\n        return i;\n        return n;\n    }\n}"}
{"id": "891_java", "language": "Java", "requirement": "Write a python function to check whether the given two numbers have same number of digits or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d73064`\n   b. Major behaviors: public static int same_Length(int A, int B) {     // [manual...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int same_Length(int A, int B) {\n    // [manual conversion needed for while loop]: while (A > 0 and B > 0):\n    A = A / 10;\n    B = B / 10;\n    if ((A == 0 and B == 0)) {\n        return True;;\n        return False;;\n    }\n}"}
{"id": "892_java", "language": "Java", "requirement": "Write a function to remove multiple spaces in a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `30a523`\n   b. Major behaviors: import re public static int remove_spaces(int text) {     re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int remove_spaces(int text) {\n    return (re.sub(' +',' ',text));\n}"}
{"id": "893_java", "language": "Java", "requirement": "Write a python function to get the last element of each sublist.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `44207a`\n   b. Major behaviors: public static int Extract(int lst) {     return [item[-1] fo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Extract(int lst) {\n    return [item[-1] for item in lst];\n}"}
{"id": "894_java", "language": "Java", "requirement": "Write a function to convert the given string of float type into tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `83fe8a`\n   b. Major behaviors: public static int float_to_tuple(int test_str) {     res = t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int float_to_tuple(int test_str) {\n    res = tuple(map(float, test_str.split(', ')))\n    return (res);\n}"}
{"id": "895_java", "language": "Java", "requirement": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `113351`\n   b. Major behaviors: public static int max_sum_subseq(int A) {     n = len(A)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_sum_subseq(int A) {\n    n = len(A)\n    if (n == 1) {\n        return A[0];\n        look_up = [None] * n\n        look_up[0] = A[0]\n        look_up[1] = max(A[0], A[1])\n        // [manual conversion needed for loop]: for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n        return look_up[n - 1];\n    }\n}"}
{"id": "896_java", "language": "Java", "requirement": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `f39531`\n   b. Major behaviors: public static int last(int n) {     return n[-1];     public...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int last(int n) {\n    return n[-1];\n    public static int sort_list_last(int tuples) {\n        return sorted(tuples, key=last);\n    }\n}"}
{"id": "897_java", "language": "Java", "requirement": "Write a python function to check whether the word is present in a given sentence or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a24816`\n   b. Major behaviors: public static int is_Word_Present(int sentence, int word) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Word_Present(int sentence, int word) {\n    s = sentence.split(\" \")\n    // [manual conversion needed for loop]: for i in s:\n    if ((i == word)) {\n        return True;\n        return False;\n    }\n}"}
{"id": "898_java", "language": "Java", "requirement": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ae54a1`\n   b. Major behaviors: from itertools import groupby public static int extract_elem...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from itertools import groupby\npublic static int extract_elements(int numbers, int n) {\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n]\n    return result;\n}"}
{"id": "899_java", "language": "Java", "requirement": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5554d7`\n   b. Major behaviors: public static int check(int arr, int n) {     g = 0     // [...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check(int arr, int n) {\n    g = 0\n    // [manual conversion needed for loop]: for i in range(1,n):\n    if ((arr[i] - arr[i - 1] > 0 and g == 1)) {\n        return False;\n        if ((arr[i] - arr[i] < 0)) {\n            g = 1\n            return True;\n        }\n    }\n}"}
{"id": "900_java", "language": "Java", "requirement": "Write a function where a string will start with a specific number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ec47b1`\n   b. Major behaviors: import re public static int match_num(int string) {     text...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int match_num(int string) {\n    text = re.compile(r\"^5\")\n    if (text.match(string)) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "901_java", "language": "Java", "requirement": "Write a function to find the smallest multiple of the first n numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e18509`\n   b. Major behaviors: public static int smallest_multiple(int n) {     if ((n<=2))...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int smallest_multiple(int n) {\n    if ((n<=2)) {\n        return n;\n        i = n * 2\n        factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n        // [manual conversion needed for while loop]: while True:\n        // [manual conversion needed for loop]: for a in factors:\n        if (i % a != 0) {\n            i += n\n            break\n            if ((a == factors[-1] and i % a == 0)) {\n                return i;\n            }\n        }\n    }\n}"}
{"id": "902_java", "language": "Java", "requirement": "Write a function to combine two dictionaries by adding values for common keys.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c57ca2`\n   b. Major behaviors: from collections import Counter public static int add_dict(i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\npublic static int add_dict(int d1, int d2) {\n    add_dict = Counter(d1) + Counter(d2)\n    return add_dict;\n}"}
{"id": "903_java", "language": "Java", "requirement": "Write a python function to count the total unset bits from 1 to n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2df987`\n   b. Major behaviors: public static int count_Unset_Bits(int n)) {     cnt = 0;...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_Unset_Bits(int n)) {\n    cnt = 0;\n    // [manual conversion needed for loop]: for i in range(1,n + 1) :\n    temp = i;\n    // [manual conversion needed for while loop]: while (temp) :\n    if ((temp % 2 == 0) ) {\n        cnt += 1;\n        temp = temp // 2;\n        return cnt;;\n    }\n}"}
{"id": "904_java", "language": "Java", "requirement": "Write a function to return true if the given number is even else return false.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `42fbbc`\n   b. Major behaviors: public static int even_num(int x) {     if (x%2==0) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int even_num(int x) {\n    if (x%2==0) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "905_java", "language": "Java", "requirement": "Write a python function to find the sum of squares of binomial co-efficients.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9d63d1`\n   b. Major behaviors: public static int factorial(int start, int end) {     res =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int factorial(int start, int end) {\n    res = 1\n    // [manual conversion needed for loop]: for i in range(start,end + 1):\n    res *= i\n    return res;\n    public static int sum_of_square(int n) {\n        return int(factorial(n + 1, 2 * n)  /factorial(1, n));\n    }\n}"}
{"id": "906_java", "language": "Java", "requirement": "Write a function to extract year, month and date from a url by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e46c10`\n   b. Major behaviors: import re public static int extract_date(int url) {     retu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int extract_date(int url) {\n    return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url);\n}"}
{"id": "907_java", "language": "Java", "requirement": "Write a function to print the first n lucky numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7b33aa`\n   b. Major behaviors: public static int lucky_num(int n) {     List=range(-1,n*n+9...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int lucky_num(int n) {\n    List=range(-1,n*n+9,2)\n    i=2\n    // [manual conversion needed for while loop]: while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n    return List[1:n+1];\n}"}
{"id": "908_java", "language": "Java", "requirement": "Write a function to find the fixed point in the given array.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2f0746`\n   b. Major behaviors: public static int find_fixed_point(int arr, int n) {     //...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_fixed_point(int arr, int n) {\n    // [manual conversion needed for loop]: for i in range(n):\n    if (arr[i] is i) {\n        return i;\n        return -1;\n    }\n}"}
{"id": "909_java", "language": "Java", "requirement": "Write a function to find the previous palindrome of a specified number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `623cf6`\n   b. Major behaviors: public static int previous_palindrome(int num) {     // [man...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int previous_palindrome(int num) {\n    // [manual conversion needed for loop]: for x in range(num-1,0,-1):\n    if (str(x) == str(x)[::-1]) {\n        return x;\n    }\n}"}
{"id": "910_java", "language": "Java", "requirement": "Write a function to validate a gregorian date.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5eda88`\n   b. Major behaviors: import datetime public static int check_date(int m, int d, i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import datetime\npublic static int check_date(int m, int d, int y) {\n    try:\n    m, d, y = map(int, (m, d, y))\n    datetime.date(y, m, d)\n    return True;\n    except ValueError:\n    return False;\n}"}
{"id": "911_java", "language": "Java", "requirement": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9559f0`\n   b. Major behaviors: public static int maximum_product(int nums) {     import hea...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int maximum_product(int nums) {\n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1]);\n}"}
{"id": "912_java", "language": "Java", "requirement": "Write a function to find ln, m lobb number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3487bc`\n   b. Major behaviors: public static int binomial_coeff(int n, int k) {     C = [[0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int binomial_coeff(int n, int k) {\n    C = [[0 for j in range(k + 1)]\n    // [manual conversion needed for loop]: for i in range(n + 1)]\n    // [manual conversion needed for loop]: for i in range(0, n + 1):\n    // [manual conversion needed for loop]: for j in range(0, min(i, k) + 1):\n    if ((j == 0 or j == i)) {\n        C[i][j] = 1\n        } else {\n        C[i][j] = (C[i - 1][j - 1]\n        + C[i - 1][j])\n        return C[n][k];\n        public static int lobb_num(int n, int m) {\n            return (((2 * m + 1) *;\n            binomial_coeff(2 * n, m + n))\n            / (m + n + 1))\n        }\n    }\n}"}
{"id": "913_java", "language": "Java", "requirement": "Write a function to check for a number at the end of a string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `3f5cbc`\n   b. Major behaviors: import re public static int end_num(int string) {     text =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int end_num(int string) {\n    text = re.compile(r\".*[0-9]$\")\n    if (text.match(string)) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "914_java", "language": "Java", "requirement": "Write a python function to check whether the given string is made up of two alternating characters or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7faad6`\n   b. Major behaviors: public static int is_Two_Alter(int s) {     // [manual conve...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_Two_Alter(int s) {\n    // [manual conversion needed for loop]: for i in range (len( s) - 2) :\n    if ((s[i] != s[i + 2]) ) {\n        return False;\n        if ((s[0] == s[1])) {\n            return False;\n            return True;\n        }\n    }\n}"}
{"id": "915_java", "language": "Java", "requirement": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9072b8`\n   b. Major behaviors: public static int rearrange_numbs(int array_nums) {     resu...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int rearrange_numbs(int array_nums) {\n    result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\n    return result;\n}"}
{"id": "916_java", "language": "Java", "requirement": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `93a1fe`\n   b. Major behaviors: public static int find_triplet_array(int A, int arr_size, in...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int find_triplet_array(int A, int arr_size, int sum) {\n    // [manual conversion needed for loop]: for i in range( 0, arr_size-2):\n    // [manual conversion needed for loop]: for j in range(i + 1, arr_size-1):\n    // [manual conversion needed for loop]: for k in range(j + 1, arr_size):\n    if (A[i] + A[j] + A[k] == sum) {\n        return  A[i],A[j],A[k];\n        return True;\n        return False;\n    }\n}"}
{"id": "917_java", "language": "Java", "requirement": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `aad11f`\n   b. Major behaviors: import re public static int text_uppercase_lowercase(int tex...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_uppercase_lowercase(int text) {\n    patterns = '[A-Z]+[a-z]+$'\n    if (re.search(patterns, text)) {\n        return 'Found a match!';\n        } else {\n        return ('Not matched!');\n    }\n}"}
{"id": "918_java", "language": "Java", "requirement": "Write a function to count coin change.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `96db7c`\n   b. Major behaviors: public static int coin_change(int S, int m, int n) {     tab...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int coin_change(int S, int m, int n) {\n    table = [[0 for x in range(m)] for x in range(n+1)]\n    // [manual conversion needed for loop]: for i in range(m):\n    table[0][i] = 1\n    // [manual conversion needed for loop]: for i in range(1, n+1):\n    // [manual conversion needed for loop]: for j in range(m):\n    x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n    y = table[i][j-1] if j >= 1 else 0\n    table[i][j] = x + y\n    return table[n][m-1];\n}"}
{"id": "919_java", "language": "Java", "requirement": "Write a python function to multiply all items in the list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4d51a4`\n   b. Major behaviors: public static int multiply_list(int items) {     tot = 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int multiply_list(int items) {\n    tot = 1\n    // [manual conversion needed for loop]: for x in items:\n    tot *= x\n    return tot;\n}"}
{"id": "920_java", "language": "Java", "requirement": "Write a function to remove all tuples with all none values in the given tuple list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `cc8aed`\n   b. Major behaviors: public static int remove_tuple(int test_list) {     res = [s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_tuple(int test_list) {\n    res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n    return (str(res));\n}"}
{"id": "921_java", "language": "Java", "requirement": "Write a function to perform chunking of tuples each of size n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7351a0`\n   b. Major behaviors: public static int chunk_tuples(int test_tup, int N) {     re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int chunk_tuples(int test_tup, int N) {\n    res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n    return (res);\n}"}
{"id": "922_java", "language": "Java", "requirement": "Write a function to find a pair with the highest product from a given array of integers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7244b7`\n   b. Major behaviors: public static int max_product(int arr) {     arr_len = len(a...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_product(int arr) {\n    arr_len = len(arr)\n    if ((arr_len < 2)) {\n        return None;\n        x = arr[0]; y = arr[1]\n        // [manual conversion needed for loop]: for i in range(0, arr_len):\n        // [manual conversion needed for loop]: for j in range(i + 1, arr_len):\n        if ((arr[i] * arr[j] > x * y)) {\n            x = arr[i]; y = arr[j]\n            return x,y;\n        }\n    }\n}"}
{"id": "923_java", "language": "Java", "requirement": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2b08d1`\n   b. Major behaviors: public static int super_seq(int X, int Y, int m, int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int super_seq(int X, int Y, int m, int n) {\n    if ((not m)) {\n        return n;\n        if ((not n)) {\n            return m;\n            if ((X[m - 1] == Y[n - 1])) {\n                return 1 + super_seq(X, Y, m - 1, n - 1);\n                return 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1));\n            }\n        }\n    }\n}"}
{"id": "924_java", "language": "Java", "requirement": "Write a function to find maximum of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `923aef`\n   b. Major behaviors: public static int max_of_two(int x, int y) {     if (x > y)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_of_two(int x, int y) {\n    if (x > y) {\n        return x;\n        return y;\n    }\n}"}
{"id": "925_java", "language": "Java", "requirement": "Write a python function to calculate the product of all the numbers of a given tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `196418`\n   b. Major behaviors: public static int mutiple_tuple(int nums) {     temp = list(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int mutiple_tuple(int nums) {\n    temp = list(nums)\n    product = 1\n    // [manual conversion needed for loop]: for x in temp:\n    product *= x\n    return product;\n}"}
{"id": "926_java", "language": "Java", "requirement": "Write a function to find n-th rencontres number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `872c0b`\n   b. Major behaviors: public static int binomial_coeffi(int n, int k) {     if ((k...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int binomial_coeffi(int n, int k) {\n    if ((k == 0 or k == n)) {\n        return 1;\n        return (binomial_coeffi(n - 1, k - 1);\n        + binomial_coeffi(n - 1, k))\n        public static int rencontres_number(int n, int m) {\n            if ((n == 0 and m == 0)) {\n                return 1;\n                if ((n == 1 and m == 0)) {\n                    return 0;\n                    if ((m == 0)) {\n                        return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0)));\n                        return (binomial_coeffi(n, m) * rencontres_number(n - m, 0));\n                    }\n                }\n            }\n        }\n    }\n}"}
{"id": "927_java", "language": "Java", "requirement": "Write a function to calculate the height of the given binary tree.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `aadc32`\n   b. Major behaviors: class Node: public static int __init__(int self, int data) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "class Node:\npublic static int __init__(int self, int data) {\n    self.data = data\n    self.left = None\n    self.right = None\n    public static int max_height(int node) {\n        if (node is None) {\n            return 0 ;;\n            } else {\n            left_height = max_height(node.left)\n            right_height = max_height(node.right)\n            if ((left_height > right_height)) {\n                return left_height+1;\n                } else {\n                return right_height+1;\n            }\n        }\n    }\n}"}
{"id": "928_java", "language": "Java", "requirement": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a12a94`\n   b. Major behaviors: import re public static int change_date_format(int dt) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int change_date_format(int dt) {\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt);\n    return change_date_format(dt);\n}"}
{"id": "929_java", "language": "Java", "requirement": "Write a function to count repeated items of a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d526b3`\n   b. Major behaviors: public static int count_tuplex(int tuplex, int value) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_tuplex(int tuplex, int value) {\n    count = tuplex.count(value)\n    return count;\n}"}
{"id": "930_java", "language": "Java", "requirement": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8c05b3`\n   b. Major behaviors: import re public static int text_match(int text) {     patte...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int text_match(int text) {\n    patterns = 'ab*?'\n    if (re.search(patterns,  text)) {\n        return ('Found a match!');\n        } else {\n        return ('Not matched!');\n    }\n}"}
{"id": "931_java", "language": "Java", "requirement": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6b2447`\n   b. Major behaviors: import math public static int sum_series(int number) {     t...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int sum_series(int number) {\n    total = 0\n    total = math.pow((number * (number + 1)) /2, 2)\n    return total;\n}"}
{"id": "932_java", "language": "Java", "requirement": "Write a function to remove duplicate words from a given list of strings.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e6d654`\n   b. Major behaviors: public static int remove_duplic_list(int l) {     temp = []...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_duplic_list(int l) {\n    temp = []\n    // [manual conversion needed for loop]: for x in l:\n    if (x not in temp) {\n        temp.append(x)\n        return temp;\n    }\n}"}
{"id": "933_java", "language": "Java", "requirement": "Write a function to convert camel case string to snake case string by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `41c4d1`\n   b. Major behaviors: import re public static int camel_to_snake(int text) {     s...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int camel_to_snake(int text) {\n    str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower();\n}"}
{"id": "934_java", "language": "Java", "requirement": "Write a function to find the nth delannoy number.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `4a1436`\n   b. Major behaviors: public static int dealnnoy_num(int n, int m) {     if ((m ==...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int dealnnoy_num(int n, int m) {\n    if ((m == 0 or n == 0) ) {\n        return 1;\n        return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1);\n    }\n}"}
{"id": "935_java", "language": "Java", "requirement": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `02b923`\n   b. Major behaviors: public static int series_sum(int number) {     total = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int series_sum(int number) {\n    total = 0\n    total = (number * (number + 1) * (2 * number + 1)) / 6\n    return total;\n}"}
{"id": "936_java", "language": "Java", "requirement": "Write a function to re-arrange the given tuples based on the given ordered list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6e8bd8`\n   b. Major behaviors: public static int re_arrange_tuples(int test_list, int ord_l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int re_arrange_tuples(int test_list, int ord_list) {\n    temp = dict(test_list)\n    res = [(key, temp[key]) for key in ord_list]\n    return (res);\n}"}
{"id": "937_java", "language": "Java", "requirement": "Write a function to count the most common character in a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `95d15e`\n   b. Major behaviors: from collections import Counter public static int max_char(i...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\npublic static int max_char(int str1) {\n    temp = Counter(str1)\n    max_char = max(temp, key = temp.get)\n    return max_char;\n}"}
{"id": "938_java", "language": "Java", "requirement": "Write a function to find three closest elements from three sorted arrays.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b1c9d3`\n   b. Major behaviors: import sys  public static int find_closet(int A, int B, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import sys\n\npublic static int find_closet(int A, int B, int C, int p, int q, int r) {\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while(i < p and j < q and k < r):\n    minimum = min(A[i], min(B[j], C[k]))\n    maximum = max(A[i], max(B[j], C[k]));\n    if (maximum-minimum < diff) {\n        res_i = i\n        res_j = j\n        res_k = k\n        diff = maximum - minimum;\n        if (diff == 0) {\n            break\n            if (A[i] == minimum) {\n                i = i+1\n                } else if (B[j] == minimum) {\n                j = j+1\n                } else {\n                k = k+1\n                return A[res_i],B[res_j],C[res_k];\n            }\n        }\n    }\n}"}
{"id": "939_java", "language": "Java", "requirement": "Write a function to sort a list of dictionaries using lambda function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `0bb1cc`\n   b. Major behaviors: public static int sorted_models(int models) {     sorted_mod...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sorted_models(int models) {\n    sorted_models = sorted(models, key = lambda x: x['color'])\n    return sorted_models;\n}"}
{"id": "940_java", "language": "Java", "requirement": "Write a function to sort the given array by using heap sort.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `151ca1`\n   b. Major behaviors: public static int heap_sort(int arr) {     heapify(arr)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int heap_sort(int arr) {\n    heapify(arr)\n    end = len(arr) - 1\n    // [manual conversion needed for while loop]: while end > 0:\n    arr[end], arr[0] = arr[0], arr[end]\n    shift_down(arr, 0, end - 1)\n    end -= 1\n    return arr;\n\n    public static int heapify(int arr) {\n        start = len(arr) // 2\n        // [manual conversion needed for while loop]: while start >= 0:\n        shift_down(arr, start, len(arr) - 1)\n        start -= 1\n        public static int shift_down(int arr, int start, int end) {\n            root = start\n            // [manual conversion needed for while loop]: while root * 2 + 1 <= end:\n            child = root * 2 + 1\n            if (child + 1 <= end and arr[child] < arr[child + 1]) {\n                child += 1\n                if (child <= end and arr[root] < arr[child]) {\n                    arr[root], arr[child] = arr[child], arr[root]\n                    root = child\n                    } else {\n                    return\n                }\n            }\n        }\n    }\n}"}
{"id": "941_java", "language": "Java", "requirement": "Write a function to count the elements in a list until an element is a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c32b1b`\n   b. Major behaviors: public static int count_elim(int num) {     count_elim = 0...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_elim(int num) {\n    count_elim = 0\n    // [manual conversion needed for loop]: for n in num:\n    if (isinstance(n, tuple)) {\n        break\n        count_elim += 1\n        return count_elim;\n    }\n}"}
{"id": "942_java", "language": "Java", "requirement": "Write a function to check if any list element is present in the given list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `9a447b`\n   b. Major behaviors: public static int check_element(int test_tup, int check_list...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check_element(int test_tup, int check_list) {\n    res = False\n    // [manual conversion needed for loop]: for ele in check_list:\n    if (ele in test_tup) {\n        res = True\n        break\n        return (res);\n    }\n}"}
{"id": "943_java", "language": "Java", "requirement": "Write a function to combine two given sorted lists using heapq module.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1c274f`\n   b. Major behaviors: from heapq import merge public static int combine_lists(int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from heapq import merge\npublic static int combine_lists(int num1, int num2) {\n    combine_lists=list(merge(num1, num2))\n    return combine_lists;\n}"}
{"id": "944_java", "language": "Java", "requirement": "Write a function to separate and print the numbers and their position of a given string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `e56fab`\n   b. Major behaviors: import re public static int num_position(int text) {     //...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int num_position(int text) {\n    // [manual conversion needed for loop]: for m in re.finditer(\"\\d+\", text):\n    return m.start();\n}"}
{"id": "945_java", "language": "Java", "requirement": "Write a function to convert the given tuples into set.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `8745b2`\n   b. Major behaviors: public static int tuple_to_set(int t) {     s = set(t)     r...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int tuple_to_set(int t) {\n    s = set(t)\n    return (s);\n}"}
{"id": "946_java", "language": "Java", "requirement": "Write a function to find the most common elements and their counts of a specified text.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `a23480`\n   b. Major behaviors: from collections import Counter public static int most_commo...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "from collections import Counter\npublic static int most_common_elem(int s, int a) {\n    most_common_elem=Counter(s).most_common(a)\n    return most_common_elem;\n}"}
{"id": "947_java", "language": "Java", "requirement": "Write a python function to find the length of the shortest word.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `260fd4`\n   b. Major behaviors: public static int len_log(int list1) {     min=len(list1[0])...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int len_log(int list1) {\n    min=len(list1[0])\n    // [manual conversion needed for loop]: for i in list1:\n    if (len(i)<min) {\n        min=len(i)\n        return min;\n    }\n}"}
{"id": "948_java", "language": "Java", "requirement": "Write a function to get an item of a tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1d0541`\n   b. Major behaviors: public static int get_item(int tup1, int index) {     item =...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_item(int tup1, int index) {\n    item = tup1[index]\n    return item;\n}"}
{"id": "949_java", "language": "Java", "requirement": "Write a function to sort the given tuple list basis the total digits in tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c73978`\n   b. Major behaviors: public static int count_digs(int tup) {     return sum([len(...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int count_digs(int tup) {\n    return sum([len(str(ele)) for ele in tup ]);\n    public static int sort_list(int test_list) {\n        test_list.sort(key = count_digs)\n        return (str(test_list));\n    }\n}"}
{"id": "950_java", "language": "Java", "requirement": "Write a function to display sign of the chinese zodiac for given year.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `ff17eb`\n   b. Major behaviors: public static int chinese_zodiac(int year) {     if ((year -...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int chinese_zodiac(int year) {\n    if ((year - 2000) % 12 == 0) {\n        sign = 'Dragon'\n        } else if ((year - 2000) % 12 == 1) {\n        sign = 'Snake'\n        } else if ((year - 2000) % 12 == 2) {\n        sign = 'Horse'\n        } else if ((year - 2000) % 12 == 3) {\n        sign = 'sheep'\n        } else if ((year - 2000) % 12 == 4) {\n        sign = 'Monkey'\n        } else if ((year - 2000) % 12 == 5) {\n        sign = 'Rooster'\n        } else if ((year - 2000) % 12 == 6) {\n        sign = 'Dog'\n        } else if ((year - 2000) % 12 == 7) {\n        sign = 'Pig'\n        } else if ((year - 2000) % 12 == 8) {\n        sign = 'Rat'\n        } else if ((year - 2000) % 12 == 9) {\n        sign = 'Ox'\n        } else if ((year - 2000) % 12 == 10) {\n        sign = 'Tiger'\n        } else {\n        sign = 'Hare'\n        return sign;\n    }\n}"}
{"id": "951_java", "language": "Java", "requirement": "Write a function to find the maximum of similar indices in two lists of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d3c512`\n   b. Major behaviors: public static int max_similar_indices(int test_list1, int te...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int max_similar_indices(int test_list1, int test_list2) {\n    res = [(max(x[0], y[0]), max(x[1], y[1]))\n    // [manual conversion needed for loop]: for x, y in zip(test_list1, test_list2)]\n    return (res);\n}"}
{"id": "952_java", "language": "Java", "requirement": "Write a function to compute the value of ncr mod p.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `2d2f2a`\n   b. Major behaviors: public static int nCr_mod_p(int n, int r, int p) {     if ((...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int nCr_mod_p(int n, int r, int p) {\n    if ((r > n- r)) {\n        r = n - r\n        C = [0 for i in range(r + 1)]\n        C[0] = 1\n        // [manual conversion needed for loop]: for i in range(1, n + 1):\n        // [manual conversion needed for loop]: for j in range(min(i, r), 0, -1):\n        C[j] = (C[j] + C[j-1]) % p\n        return C[r];\n    }\n}"}
{"id": "953_java", "language": "Java", "requirement": "Write a python function to find the minimun number of subsets with distinct elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5c8da1`\n   b. Major behaviors: public static int subset(int ar, int n) {     res = 0     ar...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int subset(int ar, int n) {\n    res = 0\n    ar.sort()\n    // [manual conversion needed for loop]: for i in range(0, n) :\n    count = 1\n    // [manual conversion needed for loop]: for i in range(n - 1):\n    if (ar[i] == ar[i + 1]) {\n        count+=1\n        } else {\n        break\n        res = max(res, count)\n        return res;\n    }\n}"}
{"id": "954_java", "language": "Java", "requirement": "Write a function that gives profit amount if the given amount has profit else return none.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `5abbb6`\n   b. Major behaviors: public static int profit_amount(int actual_cost, int sale_am...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int profit_amount(int actual_cost, int sale_amount) {\n    if(actual_cost > sale_amount):\n    amount = actual_cost - sale_amount\n    return amount;\n    } else {\n    return None;\n}"}
{"id": "955_java", "language": "Java", "requirement": "Write a function to find out, if the given number is abundant.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6c05cb`\n   b. Major behaviors: public static int is_abundant(int n) {     fctrsum = sum([fc...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int is_abundant(int n) {\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n;\n}"}
{"id": "956_java", "language": "Java", "requirement": "Write a function to split the given string at uppercase letters by using regex.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `61e15d`\n   b. Major behaviors: import re public static int split_list(int text) {     retur...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import re\npublic static int split_list(int text) {\n    return (re.findall('[A-Z][^A-Z]*', text));\n}"}
{"id": "957_java", "language": "Java", "requirement": "Write a python function to get the position of rightmost set bit.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bae0a5`\n   b. Major behaviors: import math public static int get_First_Set_Bit_Pos(int n) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "import math\npublic static int get_First_Set_Bit_Pos(int n) {\n    return math.log2(n&-n)+1;\n}"}
{"id": "958_java", "language": "Java", "requirement": "Write a function to convert an integer into a roman numeral.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `af1256`\n   b. Major behaviors: public static int int_to_roman(int num) {     val = [1000, 9...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int int_to_roman(int num) {\n    val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n    roman_num = ''\n    i = 0\n    // [manual conversion needed for while loop]: while  num > 0:\n    // [manual conversion needed for loop]: for _ in range(num // val[i]):\n    roman_num += syb[i]\n    num -= val[i]\n    i += 1\n    return roman_num;\n}"}
{"id": "959_java", "language": "Java", "requirement": "Write a python function to find the average of a list.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `63f0ca`\n   b. Major behaviors: public static int Average(int lst) {     return sum(lst) / l...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int Average(int lst) {\n    return sum(lst) / len(lst);\n}"}
{"id": "960_java", "language": "Java", "requirement": "Write a function to solve tiling problem.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `d1ec79`\n   b. Major behaviors: public static int get_noOfways(int n) {     if ((n == 0)) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int get_noOfways(int n) {\n    if ((n == 0)) {\n        return 0;;\n        if ((n == 1)) {\n            return 1;;\n            return get_noOfways(n - 1) + get_noOfways(n - 2);;\n        }\n    }\n}"}
{"id": "961_java", "language": "Java", "requirement": "Write a function to convert a roman numeral to an integer.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `83b5df`\n   b. Major behaviors: public static int roman_to_int(int s) {     rom_val = {'I':...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int roman_to_int(int s) {\n    rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_val = 0\n    // [manual conversion needed for loop]: for i in range(len(s)):\n    if (i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]) {\n        int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n        } else {\n        int_val += rom_val[s[i]]\n        return int_val;\n    }\n}"}
{"id": "962_java", "language": "Java", "requirement": "Write a python function to find the sum of all even natural numbers within the range l and r.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `b616ad`\n   b. Major behaviors: public static int sum_Natural(int n) {     sum = (n * (n + 1...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int sum_Natural(int n) {\n    sum = (n * (n + 1))\n    return int(sum);\n    public static int sum_Even(int l, int r) {\n        return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2)));\n    }\n}"}
{"id": "963_java", "language": "Java", "requirement": "Write a function to calculate the discriminant value.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `77a34a`\n   b. Major behaviors: public static int discriminant_value(int x, int y, int z) {...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int discriminant_value(int x, int y, int z) {\n    discriminant = (y**2) - (4*x*z)\n    if (discriminant > 0) {\n        return (\"Two solutions\",discriminant);\n        } else if (discriminant == 0) {\n        return (\"one solution\",discriminant);\n        } else if (discriminant < 0) {\n        return (\"no real solution\",discriminant);\n    }\n}"}
{"id": "964_java", "language": "Java", "requirement": "Write a python function to check whether the length of the word is even or not.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `89a206`\n   b. Major behaviors: public static int word_len(int s) {     s = s.split(' ')...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int word_len(int s) {\n    s = s.split(' ')\n    // [manual conversion needed for loop]: for word in s:\n    if (len(word)%2==0) {\n        return True;\n        } else {\n        return False;\n    }\n}"}
{"id": "965_java", "language": "Java", "requirement": "Write a function to convert camel case string to snake case string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `68b357`\n   b. Major behaviors: public static int camel_to_snake(int text) {     import re...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int camel_to_snake(int text) {\n    import re\n    str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower();\n}"}
{"id": "966_java", "language": "Java", "requirement": "Write a function to remove an empty tuple from a list of tuples.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `596328`\n   b. Major behaviors: public static int remove_empty(int tuple1): #L, int (), int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int remove_empty(int tuple1): #L, int (), int ('', int ), int ('a', int 'b'), int ('a', int 'b', int 'c'), int ('d')]) {\n    tuple1 = [t for t in tuple1 if t]\n    return tuple1;\n}"}
{"id": "967_java", "language": "Java", "requirement": "Write a python function to accept the strings which contains all vowels.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `fe3aef`\n   b. Major behaviors: public static int check(int string) {     if (len(set(string...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int check(int string) {\n    if (len(set(string).intersection(\"AEIOUaeiou\"))>=5) {\n        return ('accepted');\n        } else {\n        return (\"not accepted\");\n    }\n}"}
{"id": "968_java", "language": "Java", "requirement": "Write a python function to find maximum possible value for the given periodic function.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `c78c54`\n   b. Major behaviors: public static int floor_Max(int A, int B, int N) {     x = m...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int floor_Max(int A, int B, int N) {\n    x = min(B - 1,N)\n    return (A*x) // B;\n}"}
{"id": "969_java", "language": "Java", "requirement": "Write a function to join the tuples if they have similar initial elements.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `727cdb`\n   b. Major behaviors: public static int join_tuples(int test_list) {     res = []...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int join_tuples(int test_list) {\n    res = []\n    // [manual conversion needed for loop]: for sub in test_list:\n    if (res and res[-1][0] == sub[0]) {\n        res[-1].extend(sub[1:])\n        } else {\n        res.append([ele for ele in sub])\n        res = list(map(tuple, res))\n        return (res);\n    }\n}"}
{"id": "970_java", "language": "Java", "requirement": "Write a function to find minimum of two numbers.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `531919`\n   b. Major behaviors: public static int min_of_two(int x, int y) {     if (x < y)...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_of_two(int x, int y) {\n    if (x < y) {\n        return x;\n        return y;\n    }\n}"}
{"id": "971_java", "language": "Java", "requirement": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `1dcc7f`\n   b. Major behaviors: public static int maximum_segments(int n, int a, int b, int...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int maximum_segments(int n, int a, int b, int c)) {\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    // [manual conversion needed for loop]: for i in range(0, n) :\n    if ((dp[i] != -1) ) {\n        if(i + a <= n ):\n        dp[i + a] = max(dp[i] + 1,\n        dp[i + a])\n        if(i + b <= n ):\n        dp[i + b] = max(dp[i] + 1,\n        dp[i + b])\n        if(i + c <= n ):\n        dp[i + c] = max(dp[i] + 1,\n        dp[i + c])\n        return dp[n];\n    }\n}"}
{"id": "972_java", "language": "Java", "requirement": "Write a function to concatenate the given two tuples to a nested tuple.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `bf3556`\n   b. Major behaviors: public static int concatenate_nested(int test_tup1, int test...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int concatenate_nested(int test_tup1, int test_tup2) {\n    res = test_tup1 + test_tup2\n    return (res);\n}"}
{"id": "973_java", "language": "Java", "requirement": "Write a python function to left rotate the string.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `6ca873`\n   b. Major behaviors: public static int left_rotate(int s, int d) {     tmp = s[d...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int left_rotate(int s, int d) {\n    tmp = s[d : ] + s[0 : d]\n    return tmp;\n}"}
{"id": "974_java", "language": "Java", "requirement": "Write a function to find the minimum total path sum in the given triangle.", "sofl_cot": "1. Input: Parameters inferred from function signature and usage in code snippet\n2. Precondition: Ensure all inputs are of correct type and within expected bounds\n3. Operation:\n   a. Execute logic as described in the implementation snippet `7d332b`\n   b. Major behaviors: public static int min_sum_path(int A) {     memo = [None] *...\n4. Postcondition: Output satisfies functional correctness and edge case handling", "code": "public static int min_sum_path(int A) {\n    memo = [None] * len(A)\n    n = len(A) - 1\n    // [manual conversion needed for loop]: for i in range(len(A[n])):\n    memo[i] = A[n][i]\n    // [manual conversion needed for loop]: for i in range(len(A) - 2, -1,-1):\n    // [manual conversion needed for loop]: for j in range( len(A[i])):\n    memo[j] = A[i][j] + min(memo[j],\n    memo[j + 1])\n    return memo[0];\n}"}
